****************************************
air_ambulance_des_docs\STARS.qmd
****************************************
---
title: STARS
toc: true
---

## Essential Components


| Requirement            | Requirement Information (Source: <https://des.hsma.co.uk/stars.html>)                                                                                                                                                                                                                                                                                                                                                                                                         | Details                                                                                                                                                                                                                                                  |

| Open licence           | Before sharing code, it’s important to choose an appropriate open-source licence. **A licence tells others how they can use, modify or share your work**. Without a licence, you retain exclusive copyright, and others would not be able to legally reuse the model.                                                                                                                                                                                                         | The code is licenced under the GNU General Plublic License V3.0.                                                                                                                                                                                         |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | This copyleft licence confers permissions including but not limited to commercial use, modification and distribution.                                                                                                                                    |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | The licence file is available in the repository here: <https://github.com/RichardPilbery/DAA_DES/blob/main/LICENSE>                                                                                                                                      |

| Dependency management  | To make sure your code runs correctly for others (or for yourself in the future), you need to list the **required software and versions**. Without this, users may face errors due to missing dependencies.                                                                                                                                                                                                                                                                   | A requirements.txt file is provided at <https://github.com/RichardPilbery/DAA_DES/blob/main/requirements.txt>                                                                                                                                            |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | In Python, common tools for managing this are:                                                                                                                                                                                                                                                                                                                                                                                                                                | Additional requirements, such as the recommended/tested versions of Quarto and R, are detailed in the README.md.                                                                                                                                         |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | -   **Pip virtual environments** with a `requirements.txt` file.                                                                                                                                                                                                                                                                                                                                                                                                              |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | -   **Conda environments** with a `environment.yaml/yml` file.                                                                                                                                                                                                                                                                                                                                                                                                                |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | -   **Poetry** with a `pyproject.toml` file.                                                                                                                                                                                                                                                                                                                                                                                                                                  |                                                                                                                                                                                                                                                          |

| Use FOSS languages     | FOSS provides *freedom*: it grants users the rights to adapt and share copies of their model however they choose. Python is an example of a FOSS language.                                                                                                                                                                                                                                                                                                                    | The model is written in Python.                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | Some wrangling code is written in R.                                                                                                                                                                                                                     |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | Some Microsoft Excel xlsx files are used for compatibility reasons and ease of use, with no FOSS alternative being able to fulfil the role in this instance. These can be opened with FOSS software such as [LibreOffice](https://www.libreoffice.org/). |

| Minimum documentation  | At a minimum, you should include some documentation alongside your model that describes:                                                                                                                                                                                                                                                                                                                                                                                      | A model README is provided here: <https://github.com/RichardPilbery/DAA_DES/blob/main/README.md>                                                                                                                                                         |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | 1.  What the model does.                                                                                                                                                                                                                                                                                                                                                                                                                                                      |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | 2.  How to install and run the model to obtain results.                                                                                                                                                                                                                                                                                                                                                                                                                       |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | 3.  How to vary parameters to run new experiments.                                                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | This can be done easily using a `README.md` file. This is a markdown file stored in the root of your repository.                                                                                                                                                                                                                                                                                                                                                              |                                                                                                                                                                                                                                                          |

| ORCID                  | An **ORCID** is a free, unique, persistent ID that identifies and links authors to their research. It ensures that any outputs and publications are correctly attributed to you.                                                                                                                                                                                                                                                                                              | Contributor ORCIDs are provided in <https://github.com/RichardPilbery/DAA_DES/tree/main?tab=readme-ov-file#contributors>                                                                                                                                 |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | It is recommended to include your ORCID in the `README.md`                                                                                                                                                                                                                                                                                                                                                                                                                    |                                                                                                                                                                                                                                                          |

| Citation information   | Including citation instructions makes it easier for others to reference and give credit to your model. Platforms like GitHub support `CITATION.cff`, which are files that contain details like author names, version, and links to the original work.                                                                                                                                                                                                                         | A citation file is provided at <https://github.com/RichardPilbery/DAA_DES/blob/main/CITATION.cff>                                                                                                                                                        |

| Remote code repository | Remote code repositories like **GitHub, GitLab, and Bitbucket** help manage and share code.                                                                                                                                                                                                                                                                                                                                                                                   | The core repository is hosted here: <https://github.com/RichardPilbery/DAA_DES>                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | -   They provide **version control**, allowing developers to track changes, revert to previous versions, and collaborate through branching.                                                                                                                                                                                                                                                                                                                                   | There is also a fork here, which is the current source for the hosted web app and may be used for some development work: <https://github.com/Bergam0t/DAA_DES>                                                                                           |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | -   Users can **clone** a repository to use a model and pull updates as improvements are made.                                                                                                                                                                                                                                                                                                                                                                                |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | -   Features like **issues** (for discussion and bug tracking) and **releases** (for tagging stable versions) make collaboration easier.                                                                                                                                                                                                                                                                                                                                      |                                                                                                                                                                                                                                                          |
+------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Open science archive   | To ensure simulation models remain accessible over time, they should be stored in open science archives like [Zenodo](https://zenodo.org/), [Figshare](https://figshare.com/), and the [Open Science Framework](https://osf.io/). These platforms provide **DOIs (Digital Object Identifiers)** for citation and follow principles that guarantee long-term storage and discoverability. Unlike GitHub, which can change or be deleted, archives preserve models permanently. | An Open science archive is currently available here, though note that this currently points towards the fork, not the original repository <https://doi.org/10.5281/zenodo.15555520>                                                                      |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | These details will be updated with the DOI for the version of the model relevant to any publications.                                                                                                                                                    |


## Optional Components


| Requirement               | Requirement Information (Source: <https://des.hsma.co.uk/stars.html>)                                                                                                                                                                                                                                                                                                                      | Details                                                                                                                                                                                                                                                                                                                        |

| Enhanced Documentation    | Going beyond the minimum documentation requirements, good documentation should include:                                                                                                                                                                                                                                                                                                    | Enhanced documentation is published at <https://bergam0t.quarto.pub/air-ambulance-simulation/>, containing some of the following:                                                                                                                                                                                              |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   A plain-language summary of the project context and model.                                                                                                                                                                                                                                                                                                                             | \[ \] A plain-language summary of the project context and model.                                                                                                                                                                                                                                                               |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   Licence and citation details.                                                                                                                                                                                                                                                                                                                                                          | \[x\] Licence and citation details.                                                                                                                                                                                                                                                                                            |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   Contribution instructions.                                                                                                                                                                                                                                                                                                                                                             | \[ \] Contribution instructions.                                                                                                                                                                                                                                                                                               |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   Installation instructions.                                                                                                                                                                                                                                                                                                                                                             | \[ \] Installation instructions.                                                                                                                                                                                                                                                                                               |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   A structured code walk through of the model.                                                                                                                                                                                                                                                                                                                                           | \[ \] A structured code walk through of the model.                                                                                                                                                                                                                                                                             |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   Documentation of the modelling cycle using TRAnsparent and Comprehensive model Evaluation (TRACE) ([Ayllón et al. (2021)](https://doi.org/10.1016/j.envsoft.2020.104932)).                                                                                                                                                                                                             | \[ \] Documentation of the modelling cycle using TRAnsparent and Comprehensive model Evaluation (TRACE) ([Ayllón et al. (2021)](https://doi.org/10.1016/j.envsoft.2020.104932)).                                                                                                                                               |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   Annotated simulation reporting guidelines (e.g. [STRESS-DES](https://des.hsma.co.uk/stress_des.html)).                                                                                                                                                                                                                                                                                 | \[ \] Annotated simulation reporting guidelines (e.g. [STRESS-DES](https://des.hsma.co.uk/stress_des.html)).                                                                                                                                                                                                                   |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   Clear description of model validation including its intended purpose.                                                                                                                                                                                                                                                                                                                  | \[ \] Clear description of model validation including its intended purpose.                                                                                                                                                                                                                                                    |

| Documentation Hosting     | Services like **GitHub Pages, GitLab Pages, BitBucket Cloud, and Quarto Pub** can host documentation websites for free.                                                                                                                                                                                                                                                                    | Basic documentation is hosted at <https://richardpilbery.github.io/DAA_DES/>.                                                                                                                                                                                                                                                  |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            | Enhanced documentation is hosted at <https://bergam0t.quarto.pub/air-ambulance-simulation/>                                                                                                                                                                                                                                    |

| Online Coding Environment | There are tools which enable users to run code online without any installation or downloads. A FOSS example for jupyter notebooks is **BinderHub** ([https://mybinder.org](https://mybinder.org/)) which creates an online Jupyter environment from a public GitHub or GitLab repository. It packages the code and any dependencies into a container, from which the notebooks can be run. | A devcontainer.json file has been provided in the .devcontainer folder. This enables opening up the development environment in Github Codespaces. To access this, ensure you are logged into GitHub, then look for the green 'Code' button at the top of this repository. Click on this and select 'Create codespace on main'. |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            | You can find out more about codespaces at [github.com/features/codespaces](https://github.com/features/codespaces).                                                                                                                                                                                                            |

| Model Interface           | Turning your model into an **application** will make it more accessible to non-technical users who may be unfamiliar with coding. Python options include:                                                                                                                                                                                                                                  | A model interface is provided using Streamlit.                                                                                                                                                                                                                                                                                 |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   **Streamlit** (<https://streamlit.io/>).                                                                                                                                                                                                                                                                                                                                               | The web app can be run using the command                                                                                                                                                                                                                                                                                       |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   **Shiny for Python** (<https://shiny.posit.co/py/>).                                                                                                                                                                                                                                                                                                                                   | `streamlit run app/app.py`                                                                                                                                                                                                                                                                                                     |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   **Plotly Dash** (<https://dash.plotly.com/>).                                                                                                                                                                                                                                                                                                                                          |                                                                                                                                                                                                                                                                                                                                |

| Web App Hosting           | Services like **Streamlit Community Cloud** and **ShinyApps** offer free hosting tiers which can be used to deploy your **web app**, making it freely accessible via a website link.                                                                                                                                                                                                       | The web app can also be accessed without needing to install anything at [daa-des-demo.streamlit.app/](https://daa-des-demo.streamlit.app/).                                                                                                                                                                                    |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            | However, not that this will run more slowly and will complete fewer runs by default due to limitations of the hosting platform; it is recommended to download the app and run it locally if you are not just looking to get an idea of the app's capabilities.                                                                 |

****************************************

****************************************
air_ambulance_des_docs\STRESS_DES.qmd
****************************************
---
title: STRESS-DES
toc: true
---

Coming soon!
****************************************

****************************************
air_ambulance_des_docs\sync_docs.py
****************************************
import shutil
from pathlib import Path

root = Path(__file__).parent.parent
docs = root / "air_ambulance_des_docs"

files = {
    "README.md": "readme.qmd",
    "LICENSE": "licence.qmd",
    "CODE_OF_CONDUCT.md": "code_of_conduct.qmd",
    "checklists/STARS/STARS.qmd": "STARS.qmd",
    "checklists/STRESS-DES/STRESS_DES.qmd": "STRESS_DES.qmd",
    # "HISTORY.md": "changelog.qmd",
}

for src, dest in files.items():
    shutil.copy(root / src, docs / dest)

# YAML front matter to prepend
yaml_header = """---
format:
    html:
        toc: true
        toc-expand: 3
---

"""

# Files to prepend YAML to
for qmd_file in ["readme.qmd"]:
    file_path = docs / qmd_file
    content = file_path.read_text(encoding="utf-8")
    content = content.replace("/reference/", "../reference/")
    file_path.write_text(yaml_header + content, encoding="utf-8")
****************************************

****************************************
air_ambulance_des_docs\theme-dark.scss
****************************************
/*-- scss:defaults --*/

// Sidebar colors
$sidebar-bg: #00205B;  // Background color
$sidebar-fg: #ffffff;  // Foreground (text) color
$body-bg: #1F1F1F;
$code-block-bg: #00205B;
****************************************

****************************************
air_ambulance_des_docs\theme-light.scss
****************************************
/*-- scss:defaults --*/

// Sidebar colors
$sidebar-bg: #00205B;  // Background color
$sidebar-fg: #ffffff;

$body-bg: #e2f1f2;
$code-block-bg: #b5eff1;
$link-color: #D50032;

/* Sidebar header fix */
.sidebar-title,
.sidebar-header,
.sidebar .sidebar-header h1,
.sidebar .sidebar-header h2,
.sidebar .sidebar-header h3 {
  color: $sidebar-fg !important;
}
****************************************

****************************************
air_ambulance_des_docs\_publish.yml
****************************************
- source: project
  quarto-pub:
    - id: 6459aa88-32ff-4630-9b76-1024df5d2722
      url: https://bergam0t.quarto.pub/air-ambulance-simulation
****************************************

****************************************
air_ambulance_des_docs\_quarto.yml
****************************************
project:
  type: website
  output-dir: ../docs_quarto
  pre-render:
    - sync_docs.py

website:
  title: "Air Ambulance Simulation"
  description: "Documentation for the vidigi pathway animation package"

# tell quarto to read the generated sidebar
metadata-files:
  - _sidebar.yml

quartodoc:
  dir: reference
  out_index: index.qmd
  # the name used to import the package you want to create reference docs for
  package: air_ambulance_des
  # write sidebar data to this file
  sidebar:
    file: "_sidebar.yml"
    style: docked
    tools:
      - icon: github
        menu:
          - text: Source Code
            href:  https://github.com/RichardPilbery/DAA_DES
            target: _blank
          - text: Report a Bug
            href:  https://github.com/RichardPilbery/DAA_DES/issues
            target: _blank

    search: true
    title: "Air Ambulance Simulation"
    subtitle: "Opreational Modelling for Air Ambulance Services"
    collapse-level: 2
    contents:
      - file: index.qmd
        text: "Introduction"
      - file: readme.qmd
        text: "Project Overview"
      - section: "Class and Function Overview"
        contents:
          - "{{ contents }}"
      - section: "Model Checklists"
        contents:
        - text: "STARS"
          href: STARS.qmd
        - text: "STRESS-DES"
          href: STRESS_DES.qmd
      - section: "Package Details"
        contents:
        - text: "Licence"
          href: licence.qmd
        - text: "Contributor Code of Conduct"
          href: code_of_conduct.qmd
        - text: "Citing this Work"
          href: citation_details.qmd

  sections:
    - title: Model Component Classes
      desc: ""
      contents:
        - class_ambulance.Ambulance
        - class_hems.HEMS
        - class_patient.Patient
    - title: Resource Availability
      desc: ""
      contents:
        - class_hems_availability.ResourceAllocationReason
        - class_hems_availability.HEMSAvailability

    - title: Data Fitting and Preparation
      desc: ""
      contents:
        - distribution_fit_utils.DistributionFitUtils

    - title: Simulation Model
      desc: ""
      contents:
        - des_hems.DES_HEMS

    - title: Model Running
      desc: ""
      contents:
        - des_parallel_process.runSim
        - des_parallel_process.parallelProcessJoblib

    - title: Results
      desc: ""
      contents:
        - class_simulation_inputs.SimulationInputs
        - class_simulation_trial_results.TrialResults

    - title: Helpers
      desc: ""
      contents:
        - des_parallel_process.write_run_params
        - des_parallel_process.collateRunResults



format:
  html:
    grid:
      sidebar-width: 325px
      body-width: 1200px
      margin-width: 250px
      gutter-width: 1.5rem
    execute:
      freeze: auto
    theme:
      light: [flatly, theme-light.scss]
      dark: [darkly, theme-dark.scss]
****************************************

****************************************
air_ambulance_des_docs\_sidebar.yml
****************************************
website:
  sidebar:
  - collapse-level: 2
    contents:
    - file: index.qmd
      text: Introduction
    - file: readme.qmd
      text: Project Overview
    - contents:
      - reference/index.qmd
      - contents:
        - reference/class_ambulance.Ambulance.qmd
        - reference/class_hems.HEMS.qmd
        - reference/class_patient.Patient.qmd
        section: Model Component Classes
      - contents:
        - reference/class_hems_availability.ResourceAllocationReason.qmd
        - reference/class_hems_availability.HEMSAvailability.qmd
        section: Resource Availability
      - contents:
        - reference/distribution_fit_utils.DistributionFitUtils.qmd
        section: Data Fitting and Preparation
      - contents:
        - reference/des_hems.DES_HEMS.qmd
        section: Simulation Model
      - contents:
        - reference/des_parallel_process.runSim.qmd
        - reference/des_parallel_process.parallelProcessJoblib.qmd
        section: Model Running
      - contents:
        - reference/class_simulation_inputs.SimulationInputs.qmd
        - reference/class_simulation_trial_results.TrialResults.qmd
        section: Results
      - contents:
        - reference/des_parallel_process.write_run_params.qmd
        - reference/des_parallel_process.collateRunResults.qmd
        section: Helpers
      section: Class and Function Overview
    - contents:
      - href: STARS.qmd
        text: STARS
      - href: STRESS_DES.qmd
        text: STRESS-DES
      section: Model Checklists
    - contents:
      - href: licence.qmd
        text: Licence
      - href: code_of_conduct.qmd
        text: Contributor Code of Conduct
      - href: citation_details.qmd
        text: Citing this Work
      section: Package Details
    id: reference
    search: true
    style: docked
    subtitle: Opreational Modelling for Air Ambulance Services
    title: Air Ambulance Simulation
    tools:
    - icon: github
      menu:
      - href: https://github.com/RichardPilbery/DAA_DES
        target: _blank
        text: Source Code
      - href: https://github.com/RichardPilbery/DAA_DES/issues
        target: _blank
        text: Report a Bug
  - id: dummy-sidebar
****************************************

****************************************
app\.gitignore
****************************************
/.quarto/
****************************************

****************************************
app\acknowledgements.py
****************************************
import streamlit as st
from _app_utils import get_text, get_text_sheet, COLORSCHEME
from streamlit_extras.stylable_container import stylable_container

st.set_page_config(layout="wide")

with open("app/style.css") as css:
    st.markdown(f"<style>{css.read()}</style>", unsafe_allow_html=True)

st.markdown(
    '<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css">',
    unsafe_allow_html=True,
)

st.markdown(
    '<script src="https://kit.fontawesome.com/178c4e86b3.js" crossorigin="anonymous"></script>',
    unsafe_allow_html=True,
)

text_df = get_text_sheet("welcome")

col1, col2 = st.columns([0.7, 0.3])

with col1:
    st.title(get_text("page_title", text_df))

with col2:
    st.image("app/assets/daa-logo.svg", width=300)

st.header("Primary Project Team")

col_h, col_r, col_s = st.columns(3)

with col_h:
    st.subheader("Hannah Trebilcock")
    st.markdown("*Devon Air Ambulance*")

    st.image("app/assets/ht.png", width=200)

    st.markdown("""
#### Project Areas

- Project management
- Stakeholder and subject matter expert liaison
- Input data coordination, analysis and wrangling
- Domain expertise
""")

    st.markdown("""
Hannah is a process improvement manager, first working with Devon Air Ambulance in 2015. Hannah has extensive expertise with both ambulance and air ambulance service data.
""")

with col_r:
    st.subheader("Richard Pilbery")
    st.markdown("*Yorkshire Ambulance Service NHS Trust*")

    st.image("app/assets/rp.jpg", width=200)

    st.markdown("""
#### Project Areas

- Simulation model architecture design
- Simulation model coding
- Historical data transformations
- Domain expertise
""")

    # st.image("assets/rp.png")
    st.markdown(
        """
Richard is a paramedic research fellow with over 20 years experience in the ambulance service.
"""
    )

    rp_col_1, rp_col_2, rp_col_3 = st.columns(3)

    with rp_col_1:
        with stylable_container(
            key="container_orcid",
            css_styles=r"""
            .stLinkButton p:before {
                font-family: 'Font Awesome 6 Brands';
                content: '\f8d2';
                display: inline-block;
                padding-right: 3px;
                vertical-align: middle;
                font-weight: 200;
            }
            """,
        ):
            st.link_button("ORCiD", url="https://orcid.org/0000-0002-5797-9788")

    with rp_col_2:
        with stylable_container(
            key="container_github",
            css_styles=r"""
        .stLinkButton p:before {
            font-family: 'Font Awesome 6 Brands';
            content: '\f09b';
            display: inline-block;
            padding-right: 3px;
            vertical-align: middle;
            font-weight: 200;
        }
        """,
        ):
            st.link_button("GitHub", url="https://github.com/RichardPilbery")


with col_s:
    st.subheader("Sammi Rosser")
    st.markdown("*University of Exeter Medical School*")

    st.image("app/assets/sr.jpg", width=200)

    st.markdown("""
#### Project Areas

- Web application development
- Data visualisation
- Additional model coding
- Testing and validation
- Documentation
""")

    st.markdown(
        """
Sammi works as part of the [Peninsula Collaborative for health Operational Research and Data Science (PenCHORD)](https://medicine.exeter.ac.uk/health-community/research/penchord/),
specialising in computer simulation and web application development. Sammi has previously worked in the NHS and now teaches advanced data analysis and modelling techniques
on the [Health Service Modelling Associates Programme](https://www.hsma.co.uk).
"""
    )

    sr_col_1, sr_col_2, sr_col_3 = st.columns(3)

    with sr_col_1:
        with stylable_container(
            key="container_orcid",
            css_styles=r"""
            .stLinkButton p:before {
                font-family: 'Font Awesome 6 Brands';
                content: '\f8d2';
                display: inline-block;
                padding-right: 3px;
                vertical-align: middle;
                font-weight: 200;
            }
            """,
        ):
            st.link_button("ORCiD", url="https://orcid.org/0000-0002-9552-8988")

    with sr_col_2:
        with stylable_container(
            key="container_github",
            css_styles=r"""
            .stLinkButton p:before {
                font-family: 'Font Awesome 6 Brands';
                content: '\f09b';
                display: inline-block;
                padding-right: 3px;
                vertical-align: middle;
                font-weight: 200;
            }
            """,
        ):
            st.link_button("GitHub", url="https://github.com/Bergam0t")


st.markdown("""
**This Health Service Modelling Associates (HSMA) alumni project has been supported by the [HSMA programme](https://www.hsma.co.uk).**

Alumni of the HSMA programme are able to register a simulation or machine learning project and receive mentoring and support from the HSMA community of over 500 modelling associates.
""")
# st.write(get_text("page_description", text_df))
****************************************

****************************************
app\air_ambulance_simulation_output.qmd
****************************************
---
title: "Air Ambulance Simulation - Report"
execute:
  echo: false
format:
    html:
        toc: true
        embed-resources: true
        # URL options
        link-external-icon: true
        link-external-newwindow: true
        # Reference options
        citations-hover: true
        footnotes-hover: true
        #####################
        # Theme options #
        #####################
        css: "report_theme.css"
        callout-appearance: simple
        callout-collapse: true
        # Caption options
        cap-location: bottom
        # Title options
        title-block-banner: '#00B0B9'
        backgroundcolor: '#f0f4f5'
        # Set font
        mainfont: 'Poppins'
        include-before-body:
          text: |
              <link href='https://fonts.googleapis.com/css2?family=Poppins:wght@300&display=swap' rel="stylesheet">
              <link href='https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap' rel="stylesheet">
---

# Parameters

```{python}
#| output: asis
file = open("fig_outputs/quarto_text.txt", "r")
content = file.read()
print(content)
```

```{python}
file.close()
```

# Model Graphs

## Comparisons with Historical Data

### Utilisation Split

```{=html}
<iframe width="100%" height="600"
  src="fig_outputs/fig_utilisation.html"
></iframe>
```

### Monthly Job Numbers

```{=html}
<iframe width="100%" height="600"
  src="fig_outputs/fig_monthly_calls.html"
></iframe>
```

### Hour of Day

```{=html}
<iframe width="100%" height="600"
  src="fig_outputs/fig_hour_of_day.html"
></iframe>
```

### Day of Week

```{=html}
<iframe width="100%" height="600"
  src="fig_outputs/fig_day_of_week.html"
></iframe>
```

### Job Durations

```{=html}
<iframe width="100%" height="600"
  src="fig_outputs/fig_job_durations_historical.html"
></iframe>
```

## Other Plots

### Resource Usage Over Time

```{=html}
<iframe width="100%" height="600"
  src="fig_outputs/resource_use_fig.html"
></iframe>
```
****************************************

****************************************
app\app.py
****************************************
import streamlit as st
from _state_control import setup_state, reset_to_defaults
from _app_utils import get_quarto
import platform

# Ensure state parameters (necessary for passing parameters between separate
# pages) are defined
setup_state()

if "visited_setup_page" not in st.session_state:
    st.session_state["visited_setup_page"] = False

if "first_load" not in st.session_state:
    reset_to_defaults(reset_session_state=False, reset_csvs=True, notify=False)
    st.session_state["first_load"] = False

if platform.processor() == "":
    get_quarto("daa_des")  # This name must match the repository name on GitHub

pg = st.navigation(
    {
        "Model Setup": [
            st.Page("welcome.py", title="Welcome"),
            st.Page("setup.py", title="Choose Model Parameters"),
        ],
        "Model Outputs": [
            st.Page("model.py", title="Run Simulation"),
            # st.Page("compare_scenarios.py", title="Scenario Comparison")
        ],
        "Additional Information": [
            # st.Page("what_is.py", title="Introduction to Simulation"),
            st.Page("glossary.py", title="Glossary of Terms"),
            st.Page("info.py", title="Model Details"),
            st.Page("acknowledgements.py", title="Acknowledgements"),
        ],
    }
)

pg.run()
****************************************

****************************************
app\generate_bupar_outputs.R
****************************************
library(readr)
library(bupaverse)
library(processanimateR)
library(processmapR)
library(DiagrammeR)
library(ggplot2)
library(htmlwidgets)

data <- readr::read_csv("visualisation/event_log.csv")

activity_log <- data %>%
    filter(run_number==1) %>%
    bupaR::convert_timestamps("timestamp_dt", ymd_hms) %>%
    bupaR::eventlog(
        case_id = "P_ID",
        activity_id = "time_type",
        activity_instance_id = "activity_id",
        lifecycle_id = "lifecycle_id",
        timestamp = "timestamp_dt",
        resource_id = "callsign"
        )

### Frequency Maps

#### Absolute (counts)

activity_log %>%
    process_map(frequency("absolute"), render=FALSE) %>%
    processmapR::export_graph("visualisation/absolute_frequency.svg", file_type = "svg")

##### Absolute case

activity_log %>%
    process_map(frequency("absolute-case"), render=FALSE) %>%
    processmapR::export_graph("visualisation/absolute_case.svg", file_type = "svg")

#### Relative
activity_log %>%
    process_map(frequency("relative"), render=FALSE) %>%
    processmapR::export_graph("visualisation/relative_case.svg", file_type = "svg")


### Performance maps

#### Mean Times
activity_log %>%
    process_map(performance(), render=FALSE) %>%
    processmapR::export_graph("visualisation/performance_mean.svg", file_type = "svg")


#### Max Times
activity_log %>%
    process_map(performance(FUN = max), render=FALSE) %>%
    processmapR::export_graph("visualisation/performance_max.svg", file_type = "svg")

### Common Routes
activity_log %>%
    trace_explorer(n_traces = 10) %>%
    plot()

ggsave("visualisation/trace_explorer.svg")


### Activity Presence
activity_log %>%
    activity_presence() %>%
    plot()

ggsave("visualisation/activity_presence.svg")

### Processing Time
activity_log %>%
    processing_time("resource-activity", units = "mins") %>%
    plot()

ggsave("visualisation/processing_time_resource_activity.svg")

activity_log %>%
    processing_time("activity", units = "mins") %>%
    plot()

ggsave("visualisation/processing_time_activity.svg")

### Idle Time
activity_log %>%
    idle_time("resource", units = "mins") %>%
    plot()

ggsave("visualisation/idle_time_resource.svg")

## Animated Maps
activity_log %>%
    animate_process() %>%
    saveWidget("visualisation/anim_process.html", selfcontained = TRUE)

## ==== Resource level pathing ==== ##
activity_log_2 <- data %>%
    filter(run_number==1) %>%
    bupaR::convert_timestamps("timestamp_dt", ymd_hms) %>%
    bupaR::eventlog(
        case_id = "P_ID",
        activity_id = "callsign",
        activity_instance_id = "activity_id",
        lifecycle_id = "lifecycle_id",
        timestamp = "timestamp_dt",
        resource_id = "callsign"
        )

activity_log_2 %>%
    process_map(frequency("relative"), render=FALSE) %>%
    processmapR::export_graph("visualisation/relative_resource_level.svg", file_type = "svg")

activity_log_2 %>%
    animate_process() %>%
    saveWidget("visualisation/anim_resource_level.html", selfcontained = TRUE)
****************************************

****************************************
app\glossary.py
****************************************
import streamlit as st
import pandas as pd

st.set_page_config(layout="wide")

with open("app/style.css") as css:
    st.markdown(f"<style>{css.read()}</style>", unsafe_allow_html=True)

from _app_utils import get_text, get_text_sheet

text_df = get_text_sheet("glossary")

col1, col2 = st.columns([0.7, 0.3])

with col1:
    st.title(get_text("page_title", text_df))

with col2:
    st.image("app/assets/daa-logo.svg", width=300)

st.caption(get_text("page_description", text_df))

glossary = pd.read_csv("app/assets/glossary.csv", sep=",")

# glossary["Definition"] = glossary["Definition"].str.wrap(90)


glossary["Term"] = glossary["Term"].apply(lambda x: f"<b>{x}</b>")

glossary["Term"] = glossary["Term"].str.wrap(30)

# glossary = glossary.set_index("Term")

glossary = glossary.applymap(lambda x: x.replace("\n", "<br>"))

# Show as a static table
st.markdown(
    glossary.to_html(escape=False, index=False, justify="left"), unsafe_allow_html=True
)

# print(glossary)

# st.table(
#    glossary,
#     # use_container_width=True,
#     # hide_index=True,
# )
****************************************

****************************************
app\info.py
****************************************
import streamlit as st

st.set_page_config(layout="wide")

with open("app/style.css") as css:
    st.markdown(f"<style>{css.read()}</style>", unsafe_allow_html=True)

# from _app_utils import create_logic_diagram
from _app_utils import get_text, get_text_sheet

text_df = get_text_sheet("info")

col1, col2 = st.columns([0.7, 0.3])

with col1:
    st.title(get_text("page_title", text_df))

with col2:
    st.image("app/assets/daa-logo.svg", width=300)

st.caption(get_text("page_description", text_df))

(
    tab_model_logic,
    tab_demand_data,
    tab_activity_durations,
    tab_stand_downs,
    tab_resource_allocation,
) = st.tabs(
    [
        get_text("tab_1_name", text_df),
        get_text("tab_2_name", text_df),
        get_text("tab_3_name", text_df),
        get_text("tab_4_name", text_df),
        get_text("tab_5_name", text_df),
    ]
)

with tab_model_logic:
    st.caption(get_text("tab_1_content", text_df))
    # st.image(create_logic_diagram())
    st.image(
        "https://raw.githubusercontent.com/RichardPilbery/DAA_DES/refs/heads/main/reference/daa_des_model_logic.png",
        width=1200,
        use_container_width=True,
    )


with tab_demand_data:
    st.markdown(get_text("tab_2_content", text_df))

with tab_activity_durations:
    st.markdown(get_text("tab_3_content", text_df))

with tab_stand_downs:
    st.markdown(get_text("tab_4_content", text_df))

with tab_resource_allocation:
    st.markdown(get_text("tab_5_content", text_df))
****************************************

****************************************
app\model.py
****************************************
import streamlit as st
import platform

# Data processing imports
import pandas as pd
from datetime import datetime

# Memory management
import gc

from _app_utils import (
    get_text,
    get_text_sheet,
    summary_sidebar,
    generate_quarto_report,
)

from air_ambulance_des.utils import iconMetricContainer, COLORSCHEME, format_diff

# Workaround to deal with relative import issues
# https://discuss.streamlit.io/t/importing-modules-in-pages/26853/2
from pathlib import Path
import sys

sys.path.append(str(Path(__file__).resolve().parent.parent))

# Simulation imports
from air_ambulance_des.des_parallel_process import (
    runSim,
    parallelProcessJoblib,
    collateRunResults,
)
from _state_control import setup_state

from air_ambulance_des.utils import Utils

from streamlit_extras.stylable_container import stylable_container

from air_ambulance_des.class_simulation_trial_results import TrialResults
from air_ambulance_des.class_simulation_inputs import SimulationInputs
from air_ambulance_des.class_historic_results import HistoricResults

APP_DIR = Path(__file__).parent.resolve()

st.set_page_config(layout="wide")

with open(f"{APP_DIR}/style.css") as css:
    st.markdown(f"<style>{css.read()}</style>", unsafe_allow_html=True)


setup_state()

# st.write("Current working directory:", os.getcwd())
# st.write("Contents:", os.listdir())

# Pull in required font
poppins_script = """
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap');
"""

quarto_string = ""

text_df = get_text_sheet("model")

# Avoid reading from utils due to odd issues it seems to be introducing
# u = Utils()
# rota = u.HEMS_ROTA
# rota = pd.read_csv("actual_data/HEMS_ROTA.csv")
# SERVICING_SCHEDULE = pd.read_csv('actual_data/service_schedules_by_model.csv')

# Set up the columns for the 'run simulation' button and DAA logo
col1, col2 = st.columns([0.7, 0.3])

with col1:
    st.title("Run a Simulation")

with col2:
    st.image(f"{APP_DIR}/assets/daa-logo.svg", width=200)

# Add a sidebar with a toggle for debugging messages and a summary of the model input parameters
with st.sidebar:
    debug_messages = st.toggle(
        "Turn on debugging messages",
        value=st.session_state.debugging_messages_to_log,
        key="key_debugging_messages_to_log",
        on_change=lambda: setattr(
            st.session_state,
            "debugging_messages_to_log",
            st.session_state.key_debugging_messages_to_log,
        ),
        help="This will turn on display of messages in the developer terminal and write logging messages to the log.txt file",
    )

    summary_sidebar(quarto_string=quarto_string)

# Create the run button with a custom style
with stylable_container(
    key="run_buttons",
    css_styles=f"""
                    button {{
                            background-color: {COLORSCHEME["blue"]};
                            color: white;
                            border-color: white;
                        }}
                        """,
):
    button_run_pressed = st.button(
        "Click this button to run the simulation with the selected parameters",
        icon=":material/play_circle:",
    )

# If the user hasn't been to the setup page, warn them that they will be using the default
# parameters, and give them an easy way to navigate to the parameter setup page
if not st.session_state["visited_setup_page"]:
    if not button_run_pressed:
        with stylable_container(
            key="warning_buttons",
            css_styles=f"""
                    button {{
                            background-color: {COLORSCHEME["orange"]};
                            color: {COLORSCHEME["charcoal"]};
                            border-color: white;
                        }}
                        """,
        ):
            if st.button(
                "**Warning**\n\nYou haven't set up any parameters - default parameters will be used!\n\nClick this button to go to the parameter page, or click the blue button above\n\nif you are happy to use the default model parameters",
                icon=":material/warning:",
            ):
                st.switch_page("setup.py")

if button_run_pressed:
    # Clear cache when new run is started
    st.cache_data.clear()

    gc.collect()

    # MARK: Run Simulation
    progress_text = "Simulation in progress. Please wait."
    # This check is a way to guess whether it's running on
    # Streamlit community cloud
    if platform.processor() == "":
        my_bar = st.progress(0, text=progress_text)

    with st.spinner(
        f"Simulating {st.session_state.number_of_runs_input} replication(s) of {st.session_state.sim_duration_input} days. This may take several minutes...",
        show_time=True,
    ):
        # If running on community cloud, parallelisation will not work
        # so run instead using the runSim function sequentially
        if platform.processor() == "":
            print("Running sequentially")
            results = []

            for run in range(st.session_state.number_of_runs_input):
                run_results = runSim(
                    run=run,
                    total_runs=st.session_state.number_of_runs_input,
                    sim_duration=float(st.session_state.sim_duration_input * 24 * 60),
                    warm_up_time=float(st.session_state.warm_up_duration * 60),
                    sim_start_date=datetime.combine(
                        datetime.strptime(
                            st.session_state.sim_start_date_input, "%Y-%m-%d"
                        ).date(),
                        datetime.strptime(
                            st.session_state.sim_start_time_input, "%H:%M"
                        ).time(),
                    ),
                    amb_data=st.session_state.amb_data,
                    demand_increase_percent=float(st.session_state.overall_demand_mult)
                    / 100.0,
                    activity_duration_multiplier=float(
                        st.session_state.activity_duration_multiplier
                    ),
                    print_debug_messages=debug_messages,
                    random_seed=st.session_state.master_seed + run,
                )

                results.append(run_results)

                my_bar.progress(
                    (run + 1) / st.session_state.number_of_runs_input,
                    text=progress_text,
                )

            # Turn into a single dataframe when all runs complete
            pd.concat(results).to_csv(
                Utils.RUN_RESULTS_CSV, index=True, encoding="utf-8-sig"
            )

            my_bar.empty()

        # If running locally, use parallel processing function to speed up execution significantly
        else:
            print("Running in parallel")
            print(
                f"st.session_state.overall_demand_mult: {st.session_state.overall_demand_mult}"
            )
            print(
                f"st.session_state.sim_duration_input: {st.session_state.sim_duration_input}"
            )
            parallelProcessJoblib(
                total_runs=st.session_state.number_of_runs_input,
                sim_duration=float(st.session_state.sim_duration_input * 24 * 60),
                warm_up_time=float(st.session_state.warm_up_duration * 60),
                sim_start_date=datetime.combine(
                    datetime.strptime(
                        st.session_state.sim_start_date_input, "%Y-%m-%d"
                    ).date(),
                    datetime.strptime(
                        st.session_state.sim_start_time_input, "%H:%M"
                    ).time(),
                ),
                amb_data=st.session_state.amb_data,
                demand_increase_percent=float(st.session_state.overall_demand_mult)
                / 100.0,
                activity_duration_multiplier=float(
                    st.session_state.activity_duration_multiplier
                ),
                print_debug_messages=debug_messages,
                master_seed=st.session_state.master_seed,
            )
            collateRunResults()

        tab_names = [
            "Simulation Results Summary",
            "Key Visualisations",
            "Comparing Model with Historic Data",
            "Additional Outputs",
            "Download Output",
        ]

        # Set up the required number of tabs for results, which will vary depending on whether
        # the user has chosen to create an animation
        if st.session_state.create_animation_input:
            tab_names.append("Animation")
            tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs(tab_names)
        else:
            tab1, tab2, tab3, tab4, tab5 = st.tabs(tab_names)

        with tab5:
            report_message = st.empty()

        try:
            simulation_inputs = SimulationInputs(
                data_folder_path="data", actual_data_folder_path="actual_data"
            )
            print("simulation input object created successfully")

        except FileNotFoundError:
            print("data folder or actual_data folder not found")

        try:
            historical_data = HistoricResults(
                historical_data_folder_path="historical_data",
                historic_rota_df_path="tests/rotas_historic/HISTORIC_HEMS_ROTA.csv",
                historic_callsign_df_path="tests/rotas_historic/HISTORIC_callsign_registration_lookup.csv",
                historic_servicing_df_path="tests/rotas_historic/HISTORIC_service_dates.csv",
            )
            print("historical data object created successfully")

        except FileNotFoundError:
            print("historical data folder or historic rotas not found")

        try:
            trial_results = TrialResults(
                simulation_inputs=simulation_inputs,
                historical_data=historical_data,
                run_results=pd.read_csv("data/run_results.csv"),
                daily_availability_data=pd.read_csv("data/daily_availability.csv"),
            )
            print("trial results object created successfully")
        except FileNotFoundError:
            print("run results not found")

        # MARK: Result Summary
        with tab1:
            quarto_string += "# Key Metrics\n\n"

            averaged_string = f"All Metrics are averaged across {st.session_state.number_of_runs_input} simulation runs"

            quarto_string += "*"
            quarto_string += averaged_string
            quarto_string += "*\n\n"

            st.info(averaged_string)

            report_message = st.empty()

            st.subheader("Missed Jobs")

            t1_col1, t1_col2 = st.columns(2)

            with t1_col1:
                (
                    total_average_calls_received_per_year,
                    perc_unattended,
                    perc_unattended_normalised,
                ) = trial_results.get_perc_unattended_string_normalised()

                quarto_string += "## Calls Not Attended\n\n"

                quarto_string += f"Across these runs of the simulation, on average a DAAT Resource was unable to attend {perc_unattended} calls\n\n"

                with iconMetricContainer(
                    key="nonattend_metric", icon_unicode="e61f", family="outline"
                ):
                    st.metric(
                        "Average Number of Calls DAAT Resource Couldn't Attend",
                        perc_unattended,
                        border=True,
                    )
                    missed_calls_hist_string = (
                        historical_data.PLOT_historical_missed_jobs_data(
                            format="string"
                        )
                    )
                    st.caption(f"**{perc_unattended_normalised}**")
                    st.caption(
                        f"*This compares to an average of {missed_calls_hist_string:.1f}% of calls missed historically (approximately {total_average_calls_received_per_year * (float(missed_calls_hist_string) / 100):.0f} calls per year)*"
                    )

                    missed_calls_description = get_text(
                        "missed_calls_description", text_df
                    )

            with t1_col2:
                st.caption(missed_calls_description)

                quarto_string += missed_calls_description

                # with st.expander("View Breakdown"):
                #     outcome_df = _vehicle_calculation.resource_allocation_outcomes(results_all_runs)
                #     outcome_df["Count"] = (outcome_df["Count"]/st.session_state.number_of_runs_input).round(0)
                #     outcome_df.rename(columns={'Count':'Mean Calls per Simulation Run'}, inplace=True)
                #     st.dataframe(outcome_df)

            st.divider()

            st.markdown("## Critical Care, Enhanced Care and Helicopter Benefit")

            st.markdown("### Missed Jobs")

            col_ec_cc_sim, col_ec_cc_hist_sim = st.columns(2)

            with col_ec_cc_sim:
                st.markdown("#### Simulation Outputs")

                sim_missed_cc = trial_results.RETURN_missed_jobs_fig("CC")
                sim_missed_ec = trial_results.RETURN_missed_jobs_fig("EC")
                sim_missed_all_reg = trial_results.RETURN_missed_jobs_fig(
                    "REG"
                ) + trial_results.RETURN_missed_jobs_fig("REG - Helicopter Benefit")
                sim_missed_reg_heli_benefit = trial_results.RETURN_missed_jobs_fig(
                    "REG - Helicopter Benefit"
                )

                # ----------------------------------------------------------------------- #

                # ======= Calculate missed jobs under historical rotas/conditions ======= #
                hist_missed_cc = historical_data.RETURN_missed_jobs_fig("CC")
                hist_missed_ec = historical_data.RETURN_missed_jobs_fig("EC")
                hist_missed_all_reg = historical_data.RETURN_missed_jobs_fig(
                    "REG"
                ) + historical_data.RETURN_missed_jobs_fig("REG - Helicopter Benefit")
                hist_missed_reg_heli_benefit = historical_data.RETURN_missed_jobs_fig(
                    "REG - Helicopter Benefit"
                )
                # ======================================================================= #

                # '''''''''''' Calculate the difference '''''''''''' #
                diff_missed_cc = sim_missed_cc - hist_missed_cc
                diff_missed_ec = sim_missed_ec - hist_missed_ec
                diff_missed_all_reg = sim_missed_all_reg - hist_missed_all_reg
                diff_missed_reg_heli_benefit = (
                    sim_missed_reg_heli_benefit - hist_missed_reg_heli_benefit
                )

                """""" """""" """""" """""" """""" """""" """""" """""" ""  #

                missed_jobs_sim_string = f"""
    The simulation estimates that, with the proposed conditions, there would be - on average, per year - roughly

    - **{sim_missed_cc:.0f} critical care** jobs that would be missed due to no resource being available  (*{format_diff(diff_missed_cc)}*), with an estimated range of {historical_data.RETURN_missed_jobs_fig("CC", "min"):.0f} to {historical_data.RETURN_missed_jobs_fig("CC", "max"):.0f}

    - **{sim_missed_ec:.0f} enhanced care** jobs that would be missed due to no resource being available (*{format_diff(diff_missed_ec)}*) with an estimated range of {historical_data.RETURN_missed_jobs_fig("EC", "min"):.0f} to {historical_data.RETURN_missed_jobs_fig("EC", "max"):.0f}

    - **{sim_missed_all_reg:.0f} jobs with no predicted CC or EC intervention** that would be missed due to no resource being available (*{format_diff(diff_missed_all_reg)}*) with an estimated range of {historical_data.RETURN_missed_jobs_fig("REG", "min") + historical_data.RETURN_missed_jobs_fig("REG - Helicopter Benefit", "min"):.0f} to {historical_data.RETURN_missed_jobs_fig("REG", "max") + historical_data.RETURN_missed_jobs_fig("REG - Helicopter Benefit", "max"):.0f}

        - of these missed regular jobs, **{sim_missed_reg_heli_benefit:.0f}** may have benefitted from the attendance of a helicopter (*{format_diff(diff_missed_reg_heli_benefit)}*)
                            """

                st.write(missed_jobs_sim_string)

                quarto_string += "## Missed Jobs\n\n"
                quarto_string += missed_jobs_sim_string

            with col_ec_cc_hist_sim:
                missed_jobs_historical_comparison = f"""
    As CC, EC and helicopter benefit can only be determined for attended jobs, we cannot estimate the ratio for previously missed jobs.
    However, the simulation estimates that, with historical rotas and vehicles, there would be - on average, per year - roughly

    - {hist_missed_cc:.0f} critical care jobs that would be missed due to no resource being available *(estimated range of {historical_data.RETURN_missed_jobs_fig("CC", "min"):.0f} to {historical_data.RETURN_missed_jobs_fig("CC", "max"):.0f})*
    - {hist_missed_ec:.0f} enhanced care jobs that would be missed due to no resource being available *(estimated range of {historical_data.RETURN_missed_jobs_fig("EC", "min"):.0f} to {historical_data.RETURN_missed_jobs_fig("EC", "max"):.0f})*
    - {hist_missed_all_reg:.0f} jobs with no predicted CC or EC intervention that would be missed due to no resource being available *(estimated range of {historical_data.RETURN_missed_jobs_fig("REG", "min") + historical_data.RETURN_missed_jobs_fig("REG - Helicopter Benefit", "min"):.0f} to {historical_data.RETURN_missed_jobs_fig("REG", "max") + historical_data.RETURN_missed_jobs_fig("REG - Helicopter Benefit", "max"):.0f})*
        - of these missed regular jobs, {hist_missed_reg_heli_benefit:.0f} may have benefitted from the attendance of a helicopter *(estimated range of {historical_data.RETURN_missed_jobs_fig("REG - Helicopter Benefit", "min"):.0f} to {historical_data.RETURN_missed_jobs_fig("REG - Helicopter Benefit", "max"):.0f})*
                            """

                st.caption(missed_jobs_historical_comparison)

                quarto_string += "### Historical Missed Jobs\n\n"
                quarto_string += missed_jobs_historical_comparison

            st.markdown("### Suboptimal Resource Allocation")

            col_ec_cc_suboptimal_sim, col_ec_cc_suboptimal_hist_sim = st.columns(2)

            with col_ec_cc_suboptimal_sim:
                mean_cc_sent_ec, min_cc_sent_ec, max_cc_sent_ec = (
                    trial_results.RETURN_prediction_cc_patients_sent_ec_resource()
                )

                mean_heli_ben_sent_car, min_heli_ben_sent_car, max_heli_ben_sent_car = (
                    trial_results.RETURN_prediction_heli_benefit_patients_sent_car()
                )

                mean_cc_sent_ec_HIST, min_cc_sent_ec_HIST, max_cc_sent_ec_HIST = (
                    historical_data.RETURN_prediction_cc_patients_sent_ec_resource()
                )

                (
                    mean_heli_ben_sent_car_HIST,
                    min_heli_ben_sent_car_HIST,
                    max_heli_ben_sent_car_HIST,
                ) = historical_data.RETURN_prediction_heli_benefit_patients_sent_car()

                suboptimal_jobs_sim_string = f"""
                The simulation estimates that, with the proposed conditions, there would be - on average, per year - roughly

                - **{mean_cc_sent_ec:.0f} critical care (CC)** jobs that would be sent an enhanced care (EC) resource (*{format_diff(mean_cc_sent_ec - mean_cc_sent_ec_HIST)}*), with an estimated range of {min_cc_sent_ec:.0f} to {max_cc_sent_ec:.0f}

                - **{mean_heli_ben_sent_car:.0f} jobs that would benefit from a helicopter** that would be sent a car (*{format_diff(mean_heli_ben_sent_car - mean_heli_ben_sent_car_HIST)}*) with an estimated range of {min_heli_ben_sent_car:.0f} to {max_heli_ben_sent_car:.0f}
                """

                st.write(suboptimal_jobs_sim_string)

                quarto_string += "## Suboptimal Resource Allocation to Jobs\n\n"
                quarto_string += suboptimal_jobs_sim_string

            with col_ec_cc_suboptimal_hist_sim:
                suboptimal_jobs_hist_string = f"""
                As CC, EC and helicopter benefit can only be determined for attended jobs, we cannot estimate the ratio for previously missed jobs.
                However, the simulation estimates that, with historical rotas and vehicles, there would be - on average, per year - roughly

                - **{mean_cc_sent_ec_HIST:.0f} critical care (CC)** jobs that would be sent an enhanced care (EC) resource, with an estimated range of {min_cc_sent_ec_HIST:.0f} to {max_cc_sent_ec_HIST:.0f}

                - **{mean_heli_ben_sent_car_HIST:.0f} jobs that would benefit from a helicopter** that would be sent a car, with an estimated range of {min_heli_ben_sent_car_HIST:.0f} to {max_heli_ben_sent_car_HIST:.0f}
                """
                st.write(suboptimal_jobs_hist_string)

                quarto_string += "## Suboptimal Resource Allocation to Jobs - Historical Comparison\n\n"
                quarto_string += suboptimal_jobs_hist_string

            st.subheader("Resource Utilisation")

            quarto_string += "\n\n## Resource Utilisation"

            # Get unique callsigns for helicopters and cars from run_results
            if (
                "vehicle_type" in trial_results.run_results.columns
                and "callsign" in trial_results.run_results.columns
            ):
                all_helicopter_callsigns = sorted(
                    list(
                        trial_results.run_results[
                            trial_results.run_results["vehicle_type"] == "helicopter"
                        ]["callsign"]
                        .dropna()
                        .unique()
                    )
                )
                all_car_callsigns = sorted(
                    list(
                        trial_results.run_results[
                            trial_results.run_results["vehicle_type"] == "car"
                        ]["callsign"]
                        .dropna()
                        .unique()
                    )
                )
            else:
                st.error(
                    "The 'run_results' DataFrame is missing 'vehicle_type' or 'callsign' columns."
                )
                all_helicopter_callsigns = []
                all_car_callsigns = []

            # --- Display Helicopter Metrics ---
            st.markdown("### Helicopters")
            if all_helicopter_callsigns:
                helo_cols = st.columns(len(all_helicopter_callsigns))
                for idx, helo_callsign in enumerate(all_helicopter_callsigns):
                    quarto_string = trial_results.display_vehicle_utilisation_metric(
                        st_column=helo_cols[idx],
                        callsign_to_display=helo_callsign,
                        vehicle_type_label="Helicopter",
                        icon_unicode="f60c",
                        historical_data_class=historical_data,
                        current_quarto_string=quarto_string,
                    )
            else:
                st.info("No helicopter data found in the current run results.")

            st.caption(get_text("helicopter_utilisation_description", text_df))
            st.divider()

            # --- Display Car Metrics ---
            st.markdown("### Cars")
            if all_car_callsigns:
                car_metric_cols = st.columns(len(all_car_callsigns))
                for idx, car_callsign in enumerate(all_car_callsigns):
                    quarto_string = trial_results.display_vehicle_utilisation_metric(
                        historical_data_class=historical_data,
                        st_column=car_metric_cols[idx],
                        callsign_to_display=car_callsign,
                        vehicle_type_label="Car",
                        icon_unicode="eb3c",
                        current_quarto_string=quarto_string,
                    )
            else:
                st.info("No car data found in the current run results.")

            # Display a description for car utilisation
            # st.caption(get_text("car_utilisation_description", text_df))
            # st.divider() # If you add a caption above, a divider might be good here too.

            t1_col3, t1_col4 = st.columns(2)

        # MARK: Key Plots
        with tab2:
            tab_2_1, tab_2_2, tab_2_3, tab_2_4, tab_2_5 = st.tabs(
                [
                    "'Missed' Calls",
                    "Resource Utilisation",
                    "Split of Jobs by Callsign Group",
                    "CC and EC Benefit",
                    "Resource Tasking",
                ]
            )

            with tab_2_1:

                @st.fragment
                def missed_jobs():
                    show_proportions_per_hour = st.toggle(
                        "Show as proportion of jobs missed per hour", value=False
                    )

                    by_quarter = st.toggle("Stratify results by quarter", value=False)

                    st.plotly_chart(
                        trial_results.PLOT_missed_jobs(
                            show_proportions_per_hour=show_proportions_per_hour,
                            by_quarter=by_quarter,
                        )
                    )

                missed_jobs()

                st.caption("""
## What is this plot showing?

This chart shows how often helicopter emergency medical services (HEMS) were either available and sent or unavailable during each hour of the day. It compares simulated data (used for testing or planning purposes) with historical data (what actually happened in the past).

- The top chart shows the simulated job counts by hour.

- The bottom chart shows the historical job counts by hour.

## What do the colours mean?

Each bar is split into:

- Dark blue: When a HEMS vehicle (either helicopter or car) was available and sent to a job.

- Light blue: When no HEMS was available for a job received during that time period.

If more of the bar is light blue, this means that there were more jobs in that hour that were not responded to by a HEMS resource due to no HEMS resource being available at the time.

## Using this plot for model quality assurance

If the default historical parameters are being used, this plot can be used to judge if the simulation is mirroring reality well.
In this case, we would be looking for two things to be consistent across the top and bottom plots:

- the overall pattern of bar heights per hour (reflecting the total number of jobs being received each hour)
- the split between dark and light blue per hour (reflecting how often a resource is or is not available to respond to a job received in that hour)

""")

            # NOTE!
            # The final plot in this tab (summary of missed calls over runs) is not created
            # # until tab_2_4, when a related plot is created.
            # It then gets put here.

            with tab_2_2:

                @st.fragment
                def create_utilisation_rwc_plot():
                    fig_utilisation = trial_results.PLOT_UTIL_rwc_plot()

                    fig_utilisation.write_html(
                        f"{APP_DIR}/fig_outputs/fig_utilisation.html",
                        full_html=False,
                        include_plotlyjs="cdn",
                    )  # , post_script = poppins_script)#,full_html=False, include_plotlyjs='cdn')

                    st.plotly_chart(fig_utilisation)

                create_utilisation_rwc_plot()

                historical_monthly_totals_df = pd.read_csv(
                    "historical_data/historical_monthly_totals_by_callsign.csv"
                )
                historical_monthly_totals_df["month"] = pd.to_datetime(
                    historical_monthly_totals_df["month"], format="%Y-%m-%d"
                )

                st.caption(f"""
This plot shows the split within a callsign group of resources that are sent on jobs.
Bars within a callsign group will sum to 100%.

Dotted lines indicate the average historical allocation seen of resources within a callsign group,
averaged over {len(historical_monthly_totals_df)} months, drawing on data
from {historical_monthly_totals_df.month.min().strftime("%B %Y")}
to {historical_monthly_totals_df.month.max().strftime("%B %Y")}.

If the simulation is using the default parameters, we would expect the dotted lines to be roughly level with the top of the
relevant bars - though being out by a few % is not too unusual due to the natural variation that occurs across
simulation runs.

If the simulation is not using the default parameters, we would not expect the output to match the historical data, but you may
    wish to consider the historical split as part of your decision making.
                """)

                st.plotly_chart(
                    trial_results.PLOT_SIMULATION_utilisation_summary(
                        historical_results_obj=historical_data
                    )
                )

                st.plotly_chart(
                    trial_results.make_SIMULATION_utilisation_variation_plot(
                        historical_results_obj=historical_data
                    )
                )

                with tab_2_3:

                    @st.fragment
                    def plot_callsign_group_split():
                        x_is_callsign_group = st.toggle(
                            "Plot callsign group on the horizontal axis", value=False
                        )

                        st.plotly_chart(
                            trial_results.create_callsign_group_split_rwc_plot(
                                historical_data_obj=historical_data,
                                x_is_callsign_group=x_is_callsign_group,
                            )
                        )

                    plot_callsign_group_split()

                with tab_2_4:
                    st.caption("""
Historical data has been retrospectively audited to determine when jobs have included interventions that
could only be delivered by an EC or CC team.

This has then been used to inform the rate at which jobs with an EC or CC benefit are generated in the simulation.

While the numbers are low, it does not include a wide range of additional benefits that HEMS crews
bring to the scene. Work is now underway to improve the capture of these additional benefits, but
they are not reflected in the model.

For the model, it has been assumed that the split of CC calls, EC calls and calls where no CC or EC intervention
is delivered is consistent across the day. We do not have access to this data for time where jobs have not historically
been attended due to no resource being in service.

It is also assumed that the split of care categories is consistent across the year.

This data is affected by the fact that the historical actions will be affected by the crew that attended, and reflect
care delivered rather than ideal care. For example, if an EC crew attended a job that would benefit
from a CC intervention (due to no CC crew being on shift or the CC crew already being on another job),
only EC interventions would be delivered and only an EC benefit would have been recorded in the
dataset.
""")

                    st.subheader(
                        "Variation in projected missed calls across simulation runs"
                    )
                    st.write(
                        "This is compared with an estimate of the missed calls per year by category using historic rotas"
                    )

                    st.plotly_chart(
                        trial_results.plot_missed_calls_boxplot(
                            historical_results_obj=historical_data
                        )
                    )
                    tab_2_1.subheader(
                        "Variation in missed calls across simulation runs"
                    )

                    tab_2_1.plotly_chart(
                        trial_results.plot_missed_calls_boxplot(
                            historical_results_obj=historical_data,
                            what="summary",
                            historical_yearly_missed_calls_estimate=total_average_calls_received_per_year
                            * (float(missed_calls_hist_string) / 100),
                        )
                    )

                    st.subheader("Job Categories - Simulation vs Historical")

                    @st.fragment
                    def plot_cc_ec_split():
                        show_proportions_care_cat_plot = st.toggle(
                            "Show Proportions", True
                        )

                        st.plotly_chart(
                            trial_results.get_care_cat_counts_plot_sim(
                                show_proportions=show_proportions_care_cat_plot
                            )
                        )

                        st.caption("""
                        In this plot, we are predicting by the highest level of care provided.
                        (e.g. a job marked as 'CC' may also deliver an EC intervention, or an EC job may
                        also have a helicopter benefit)
                        """)

                        st.plotly_chart(
                            historical_data.PLOT_care_cat_counts_historic(
                                show_proportions=show_proportions_care_cat_plot
                            )
                        )

                        st.caption("""
                            We can also take a look at the proportion of jobs allocated to each category
                            at a high level to confirm the model is reflecting the historical trends.

                            Note that for historic data, we have excluded jobs that were not attended (and therefore
                            where the care category is not known) from the total number of jobs.
                            """)

                        st.dataframe(
                            trial_results.get_care_cat_proportion_table().drop(
                                columns=["Historic Job Counts", "Simulated Job Counts"]
                            )
                        )

                    plot_cc_ec_split()

            with tab_2_5:

                @st.fragment
                def job_count_heatmap():
                    normalise_heatmap_daily_jobs = st.toggle(
                        "Normalise by average daily jobs", False
                    )

                    fig_jobs_by_callsign_heatmap = trial_results.PLOT_job_count_heatmap(
                        normalise_per_day=normalise_heatmap_daily_jobs,
                        simulated_days=st.session_state.sim_duration_input,
                    )

                    st.plotly_chart(fig_jobs_by_callsign_heatmap)

                    fig_jobs_by_callsign_heatmap_monthly = (
                        trial_results.PLOT_job_count_heatmap_monthly(
                            normalise_per_day=normalise_heatmap_daily_jobs,
                            simulated_days=st.session_state.sim_duration_input,
                        )
                    )

                    st.plotly_chart(fig_jobs_by_callsign_heatmap_monthly)

                job_count_heatmap()

        # MARK: Historical Comparisons
        with tab3:
            tab_3_1, tab_3_2, tab_3_3, tab_3_4, tab_3_5, tab_3_6 = st.tabs(
                [
                    "Jobs per Month",
                    "Jobs by Hour of Day",
                    "Jobs by Day of Week",
                    "Jobs per Day - Distribution",
                    "Job Durations - Overall",
                    "Job Durations - Split",
                ]
            )

            with tab_3_1:

                @st.fragment
                def plot_monthly_jobs():
                    mj_1, mj_2 = st.columns(2)

                    show_real_data = mj_1.toggle(
                        "Compare with Real Data", value=True, disabled=False
                    )

                    show_individual_runs = mj_2.toggle(
                        "Show Individual Simulation Runs", value=False
                    )

                    if show_real_data:
                        historical_view_method = st.radio(
                            "Choose Historical Data Display Method",
                            ["Range", "Individual Lines"],
                            horizontal=True,
                        )
                        if historical_view_method == "Range":
                            show_historical_individual_years = False
                        else:
                            show_historical_individual_years = True
                    else:
                        show_historical_individual_years = False

                    fig_monthly_calls = trial_results.PLOT_monthly_calls(
                        show_individual_runs=show_individual_runs,
                        use_poppins=True,
                        show_historical=show_real_data,
                        show_historical_individual_years=show_historical_individual_years,
                        job_count_col="inc_date",
                    )

                    trial_results.PLOT_monthly_calls(
                        show_individual_runs=show_individual_runs,
                        use_poppins=False,
                        show_historical=show_real_data,
                        show_historical_individual_years=show_historical_individual_years,
                        job_count_col="inc_date",
                    ).write_html(
                        f"{APP_DIR}/fig_outputs/fig_monthly_calls.html",
                        full_html=False,
                        include_plotlyjs="cdn",
                    )  # , post_script = poppins_script)

                    return st.plotly_chart(fig_monthly_calls)

                plot_monthly_jobs()
                st.caption("""
Note that only full months in the simulation are included in this plot.
Partial months are excluded for ease of interpretation.
                           """)

            with tab_3_2:

                @st.fragment
                def plot_jobs_per_hour():
                    help_jph = get_text("help_jobs_per_hour", text_df)
                    jph_1, jph_2, jph_3, jph_4 = st.columns(4)

                    display_historic_jph = jph_1.toggle(
                        "Display Historic Data", value=True
                    )
                    average_per_month = jph_2.toggle(
                        "Display Average Calls Per Month", value=True, help=help_jph
                    )

                    display_advanced = jph_3.toggle(
                        "Display Advanced Plot", value=False
                    )

                    if not display_advanced:
                        display_error_bars_bar = jph_4.toggle("Display Variation")
                    else:
                        display_error_bars_bar = False

                    fig_hour_of_day = trial_results.PLOT_hourly_call_counts(
                        average_per_month=average_per_month,
                        box_plot=display_advanced,
                        show_error_bars_bar=display_error_bars_bar,
                        use_poppins=True,
                        show_historical=display_historic_jph,
                    )

                    trial_results.PLOT_hourly_call_counts(
                        average_per_month=average_per_month,
                        box_plot=display_advanced,
                        show_error_bars_bar=display_error_bars_bar,
                        use_poppins=False,
                        show_historical=display_historic_jph,
                    ).write_html(
                        f"{APP_DIR}/fig_outputs/fig_hour_of_day.html",
                        full_html=False,
                        include_plotlyjs="cdn",
                    )  # , post_script = poppins_script)

                    st.plotly_chart(fig_hour_of_day)

                plot_jobs_per_hour()

            with tab_3_3:

                @st.fragment
                def plot_jobs_per_day():
                    # help_jph = get_text("help_jobs_per_hour", text_df)
                    jpd_1, jpd_2, jpd_3, jpd_4 = st.columns(4)

                    display_historic_jph_pd = jpd_1.toggle(
                        "Display Historic Data", value=True, key="historic_pd"
                    )

                    average_per_month_pd = jpd_2.toggle(
                        "Display Average Calls Per Day",
                        value=True,
                        # help= help_jph,
                        key="average_pd",
                    )

                    display_advanced_pd = jpd_3.toggle(
                        "Display Advanced Plot", value=False, key="advanced_pd"
                    )

                    if not display_advanced_pd:
                        display_error_bars_bar_pd = jpd_4.toggle(
                            "Display Variation", key="variation_pd"
                        )
                    else:
                        display_error_bars_bar_pd = False

                    fig_day_of_week = trial_results.PLOT_daily_call_counts(
                        average_per_month=average_per_month_pd,
                        box_plot=display_advanced_pd,
                        show_error_bars_bar=display_error_bars_bar_pd,
                        use_poppins=True,
                        show_historical=display_historic_jph_pd,
                    )

                    trial_results.PLOT_daily_call_counts(
                        average_per_month=average_per_month_pd,
                        box_plot=display_advanced_pd,
                        show_error_bars_bar=display_error_bars_bar_pd,
                        use_poppins=False,
                        show_historical=display_historic_jph_pd,
                    ).write_html(
                        f"{APP_DIR}/fig_outputs/fig_day_of_week.html",
                        full_html=False,
                        include_plotlyjs="cdn",
                    )  # , post_script = poppins_script)

                    st.plotly_chart(fig_day_of_week)

                plot_jobs_per_day()

            #######################################
            # Histogram of calls received per day #
            #######################################

            with tab_3_4:

                @st.fragment()
                def plot_days_with_job_count_hist():
                    trial_results.PLOT_days_with_job_count_hist_ks()

                plot_days_with_job_count_hist()

            ##############################################
            # Historical Job Durations - Overall Summary #
            ##############################################

            with tab_3_5:

                @st.fragment
                def create_job_duration_plot():
                    plot_violin = st.toggle("Violin Plot?", value=False)

                    # Create plot for inclusion in streamlit
                    fig_job_durations_historical = trial_results.plot_historical_job_duration_vs_simulation_overall(
                        use_poppins=True,
                        write_to_html=True,
                        html_output_filepath=f"{APP_DIR}/fig_outputs/fig_job_durations_historical.html",
                        violin=plot_violin,
                    )

                    # Include job durations plot in streamlit app
                    st.plotly_chart(fig_job_durations_historical)

                    st.caption("""
    This plot looks at the total amount of time each resource was in use during the simulation.

    All simulated points are represented in the box plots.

    The blue bars give an indication of the historical averages. We would expect the median - the
    central horizontal line within the box portion of the box plots - to fall within the blue box for
    each resource type, and likely to be fairly central within that region.
    """)

                    historical_data.historical_time_df_cars_only = (
                        historical_data.historical_job_durations_breakdown[
                            historical_data.historical_job_durations_breakdown[
                                "vehicle_type"
                            ]
                            == "car"
                        ]
                    )
                    historical_data.historical_time_df_helos_only = (
                        historical_data.historical_job_durations_breakdown[
                            historical_data.historical_job_durations_breakdown[
                                "vehicle_type"
                            ]
                            == "helicopter"
                        ]
                    )

                    trial_results.simulated_job_time_df_cars_only = (
                        trial_results.resource_use_wide[
                            trial_results.resource_use_wide["vehicle_type"] == "car"
                        ]
                    )
                    trial_results.simulated_job_time_df_helos_only = (
                        trial_results.resource_use_wide[
                            trial_results.resource_use_wide["vehicle_type"]
                            == "helicopter"
                        ]
                    )

                    trial_results.calculate_ks_for_job_durations(
                        historical_data_series=historical_data.historical_time_df_helos_only[
                            historical_data.historical_time_df_helos_only["name"]
                            == "total_duration"
                        ]["value"],
                        simulated_data_series=trial_results.simulated_job_time_df_helos_only[
                            "resource_use_duration"
                        ],
                        what="helicopters",
                    )

                    trial_results.calculate_ks_for_job_durations(
                        historical_data_series=historical_data.historical_time_df_cars_only[
                            historical_data.historical_time_df_cars_only["name"]
                            == "total_duration"
                        ]["value"],
                        simulated_data_series=trial_results.simulated_job_time_df_cars_only[
                            "resource_use_duration"
                        ],
                        what="cars",
                    )

                create_job_duration_plot()

            ############################
            # Historical Job Durations - Breakdown #
            ############################

            with tab_3_6:
                st.plotly_chart(trial_results.PLOT_time_breakdown())

                st.caption("""
This chart is comparing how long different stages of emergency jobs take in real life (called Historical) versus how long they take in a computer simulation (called Simulated).

The idea is to check if the simulation is realistic by seeing if it behaves similarly to what actually happened in the past.

Each job has several stages:

- Time allocation: Time from when the call was made to when a vehicle was assigned.
- Time mobile: Time from assignment to when the vehicle started moving.
- Time to scene: Travel time to the scene.
- Time on scene: Time spent at the scene.
- Time to hospital: Travel time to the hospital (if applicable).
- Time to clear: Time from hospital drop-off (or leaving the scene, if no patient transport undertaken) to when the vehicle is ready for the next job.

These stages are shown for two types of vehicles:

- Cars (top row) - including both helicopter backup cars and standalone vehicles
- Helicopters (bottom row)

## How to Read the Boxes

- Each blue box shows the range of times for that job stage—how long it usually takes.
- The dark blue boxes are the simulated times, and the light blue ones are the historical (real) times.
- Taller boxes or longer “whiskers” (lines) mean more **variation** in how long that stage takes.
- If the boxes and whiskers for simulated and historical data overlap a lot, that means the simulation is doing a good job of copying reality.
                           """)

        # MARK: Debugging Plots
        with tab4:
            st.caption("""
This tab contains visualisations to help model authors do additional checks into the underlying functioning of the model.

Most users will not need to look at the visualisations in this tab.
            """)

            tab_4_1, tab_4_2, tab_4_3, tab_4_4 = st.tabs(
                [
                    "Debug Resources",
                    "Debug Events",
                    "Debug Outcomes",
                    "Debug Job Durations",
                ]
            )

            with tab_4_1:
                trial_results.display_resource_use_exploration()

                st.caption("""
This visual shows the resource use of each resource throughout the simulation.

Grey hatched boxes indicate the time the resource was away for servicing.

- For H70 (g-daas), it is assumed that H71 (g-daan) will be reallocated the callsign H70 during the
service period for g-daas. Therefore, for the H70 line, we would expect calls to continue being allocated
to H70 during its service period, **but we would expect H71 to consequently show no activity in that period.**

- For the servicing of H71 (g-daan), it is assumed that g-daan will be unavailable during that period
and no callsign reallocation will occur, so we would anticipate no activity occurring for H71 during that period.

CC70 and CC71 are backup vehicles, for use in the event that their associated helicopter cannot fly
for any reason (pilot unavailability, servicing, etc.).

It should be the case that resources from the same callsign group (H70 & CC70, H71 & CC71) cannot ever be allocated
to a job at the same time, as it is assumed that a single crew is available for each callsign group.

Unavailability of cars due to servicing is not modelled; cars are assumed to always be available.

*The handles at the bottom of the plot can be used to zoom in to a shorter period of time, allowing
you to more clearly see patterns of resource use. The '1m, 6m, YTD, 1y' buttons at the top of the plot
can also be used to adjust the chosen time period. Double click on the plot or click on the 'reset axes'
button at the top right - which will only appear when hovering over the plot - to reset to looking at
the overall time period.*
            """)

                st.subheader("Jobs per Day - By Callsign")

                st.plotly_chart(trial_results.PLOT_jobs_per_callsign())

                st.subheader("Minutes per day on Shift")

                st.plotly_chart(trial_results.PLOT_daily_availability())

                st.subheader("Jobs Outcome by Category/Preference")

                @st.fragment
                def plot_preferred_outcome_by_hour():
                    show_proportions_job_outcomes_by_hour = st.toggle(
                        "Show Proportions",
                        False,
                        key="show_proportions_job_outcomes_by_hour",
                    )
                    st.plotly_chart(
                        trial_results.get_preferred_outcome_by_hour(
                            show_proportions=show_proportions_job_outcomes_by_hour
                        )
                    )

                plot_preferred_outcome_by_hour()

                st.plotly_chart(
                    trial_results.get_facet_plot_preferred_outcome_by_hour()
                )

            with tab_4_2:
                st.subheader("Event Overview")

                # @st.fragment
                # def event_overview_plot():
                #     runs_to_display_eo = st.multiselect(
                #         "Choose the runs to display",
                #         trial_results.run_results["run_number"].unique(),
                #         default=1,
                #     )

                #     st.plotly_chart(
                #         trial_results.PLOT_events_over_time(runs=runs_to_display_eo),
                #         use_container_width=True,
                #     )

                # event_overview_plot()

                st.plotly_chart(
                    trial_results.PLOT_cumulative_arrivals_per_run(),
                    use_container_width=True,
                )

                st.subheader("Event Counts")
                st.write(f"Period: {st.session_state.sim_duration_input} days")

                @st.fragment
                def event_funnel_plot():
                    hems_events_initial = [
                        "arrival",
                        "HEMS call start",
                        "HEMS allocated to call",
                        "HEMS mobile",
                        # "HEMS stood down en route",
                        "HEMS on scene",
                        # "HEMS patient treated (not conveyed)",
                        "HEMS leaving scene",
                        "HEMS arrived destination",
                        "HEMS clear",
                    ]

                    hems_events = st.multiselect(
                        "Choose the events to show",
                        trial_results.event_counts_long["time_type"].unique(),
                        hems_events_initial,
                    )

                    run_select = st.multiselect(
                        "Choose the runs to show",
                        trial_results.event_counts_long["run_number"].unique(),
                        1,
                    )

                    st.plotly_chart(
                        trial_results.PLOT_event_funnel_plot(hems_events, run_select)
                    )

                event_funnel_plot()

                @st.fragment
                def patient_viz():
                    st.subheader("Per-patient journey exploration")

                    patient_filter = st.selectbox(
                        "Select a patient", trial_results.run_results.P_ID.unique()
                    )

                    tab_list = st.tabs(
                        [
                            f"Run {i + 1}"
                            for i in range(st.session_state.number_of_runs_input)
                        ]
                    )

                    for idx, tab in enumerate(tab_list):
                        p_df = trial_results.run_results[
                            (trial_results.run_results.P_ID == patient_filter)
                            & (trial_results.run_results.run_number == idx + 1)
                        ].copy()

                        p_df["time_type"] = p_df["time_type"].astype("str")

                        tab.plotly_chart(
                            trial_results.PLOT_per_patient_events(p_df),
                            use_container_width=True,
                            key=f"p_viz_{patient_filter}_{idx}",
                        )

                patient_viz()

            with tab_4_3:

                @st.fragment
                def explore_outcomes():
                    plot_counts = st.toggle("Plot Counts", value=False)

                    st.caption(
                        "Note that these plots only cover patients for whom a resource was available to attend"
                    )

                    st.subheader("HEMS result by vehicle type")
                    try:
                        st.plotly_chart(
                            trial_results.plot_patient_outcomes(plot_counts=plot_counts)
                        )
                    except:
                        st.write("Error generating chart")

                    st.subheader("HEMS result by care category")
                    try:
                        st.plotly_chart(
                            trial_results.plot_patient_outcomes(
                                plot_counts=plot_counts,
                                group_cols="care_cat",
                            )
                        )
                    except:
                        st.write("Error generating chart")

                    st.subheader("HEMS Result by Outcome")
                    st.caption(
                        "Note this sums to 1 within each outcome, not within each hems result"
                    )
                    try:
                        st.plotly_chart(
                            trial_results.plot_patient_outcomes(
                                plot_counts=plot_counts,
                                group_cols="outcome",
                            )
                        )
                    except:
                        st.write("Error generating chart")

                    st.subheader("Outcome by Vehicle Type")
                    try:
                        st.plotly_chart(
                            trial_results.plot_patient_outcomes(
                                group_cols="vehicle_type",
                                outcome_col="outcome",
                                plot_counts=plot_counts,
                            )
                        )
                    except:
                        st.write("Error generating chart")

                    st.subheader("Vehicle Type by Care Cat")
                    st.caption(
                        "Note this sums to 1 within each cat, not within each vehicle type"
                    )
                    try:
                        st.plotly_chart(
                            trial_results.plot_patient_outcomes(
                                outcome_col="vehicle_type",
                                group_cols="care_cat",
                                plot_counts=plot_counts,
                            )
                        )
                    except:
                        st.write("Error generating chart")

                    st.header("Outcome variation across day")

                    try:
                        if plot_counts:
                            y_col_hourly_hems_result = "count"
                        else:
                            y_col_hourly_hems_result = "proportion"

                        st.plotly_chart(
                            trial_results.PLOT_outcome_variation_across_day(
                                y_col=y_col_hourly_hems_result
                            )
                        )
                    except:
                        st.write("Error generating chart")

                explore_outcomes()

            with tab_4_4:
                st.subheader("Duration by HEMS Outcome and Vehicle Type")
                st.caption(
                    "Outcomes are sorted by the average job duration (shortest first)"
                )
                st.plotly_chart(
                    trial_results.plot_total_times_by_hems_or_pt_outcome(
                        y="hems_result",
                        color="vehicle_type",
                        column_of_interest="hems_result",
                        show_group_averages=True,
                    )
                )

                st.markdown("#### Per-vehicle focus")
                st.plotly_chart(
                    trial_results.plot_total_times_by_hems_or_pt_outcome(
                        y="vehicle_type",
                        color="hems_result",
                        column_of_interest="hems_result",
                        show_group_averages=False,
                    )
                )

                st.divider()

                st.subheader("Duration by Patient Outcome and Vehicle Type")
                st.caption(
                    "Outcomes are sorted by the average job duration (shortest first)"
                )

                st.plotly_chart(
                    trial_results.plot_total_times_by_hems_or_pt_outcome(
                        y="outcome",
                        color="vehicle_type",
                        column_of_interest="outcome",
                        show_group_averages=True,
                    )
                )

                st.markdown("#### Per-vehicle focus")

                st.plotly_chart(
                    trial_results.plot_total_times_by_hems_or_pt_outcome(
                        y="vehicle_type",
                        color="outcome",
                        column_of_interest="outcome",
                        show_group_averages=False,
                    )
                )
        # MARK: Generate Report
        with tab5:

            @st.fragment()
            def generate_report_button():
                if st.button("Click here to generate the downloadable report"):
                    report_message.info("Generating Report...")
                    with st.spinner(
                        "Generating report. This may take a minute...", show_time=True
                    ):
                        try:
                            with open("fig_outputs/quarto_text.txt", "w") as text_file:
                                text_file.write(quarto_string)

                            msg = generate_quarto_report(run_quarto_check=False)

                            if msg == "success":
                                st.success("Report Available for Download")

                        except Exception as e:  # noqa
                            st.error(
                                "Report cannot be generated - please speak to a developer"
                            )

            generate_report_button()
****************************************

****************************************
app\README.md
****************************************
This folder contains the code relating to the Streamlit app.

This also includes all code for generating the output Quarto report.

## Quarto Output

Within the app, there is a button to generate a Quarto output.

# App Pages

## Control Pages

- **app.py**

## Model Setup and Running Pages
- **model.py**
- **setup.py**

## Model Info Pages

- **acknowledgements.py**
- **welcome.py**
- **what_is.py**
- **glossary.py**

## Supporting Scripts

- **_app_utils.py**
- **_state_control.py**

## Theming and styling

- **style.css**
- **report_theme.css**

# Visualisations

All visualisations generated within this app can be found by returning to the root folder and looking for the folder 'visualisation'
****************************************

****************************************
app\report_theme.css
****************************************
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap');
@import url('https://fonts.googleapis.com/icon?family=Material+Icons|Material+Icons+Outlined|Material+Symbols+Outlined');


.panel-tabset .nav-item {
    font-size: 16px;
}

table colgroup col {
    width: auto !important;
}
.btn-action-primary {
    color: white;
    background-color: #00205B !important;
}

.btn-action-primary:hover {
    background-color: #ffeb3b !important;
    color: #000 !important;
}

.btn-action {
    min-width: 165px;
    border-radius: 30px;
    border: none;
}

.dt-buttons {
      /* margin-bottom: -7px; */
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      text-align: center;
      padding-bottom: 0.3em;
}

.figure-caption {
    color: #373a3c;
    font-size: 16px;
}

.nav-tabs .nav-link.active, .nav-tabs .nav-item.show .nav-link {
    color: #495057;
    background-color: #fff;
    border-color: #dee2e6 #dee2e6 #fff;
}

.tab-content {
    padding-top: 1em;
    padding-bottom: 1em;
    background-color: #fff;
}

.quarto-title-banner {
    padding-top: 30px;
    padding-right: 0px;
    padding-bottom: 40px;
    padding-left: 0px;
    margin-bottom: 0px;
}

.quarto-title-meta  {
    padding-top: 0px;
    padding-right: 0px;
    padding-bottom: 0px;
    padding-left: 0px;
    margin-bottom: 0px;
    background-color: #fff;
}

#title-block-header.quarto-title-block {
    padding-top: 0px;
    padding-right: 0px;
    padding-bottom: 10px;
    padding-left: 0px;
    margin-bottom: 0px;
    background-color: #fff;
}

.quarto-title {
      background-image: url("data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%0A%3Csvg%20id%3D%22DAA_Logo%22%20width%3D%22280%22%20height%3D%2290.313%22%20viewBox%3D%220%200%20280%2090.313%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%3E%0A%20%3Cpath%20transform%3D%22translate%28-65.555%20-45.453%29%22%20d%3D%22M158.871%2C94.859c-12.288%2C1.754-24.744%2C4.737-24.744%2C4.737%2C8.995-3.336%2C23.115-6.444%2C23.115-6.444Zm20.272%2C1.706q.506-.791%2C1.018-1.662c.383-.652.875-1.492%2C1.451-2.648l.011-.023a1.434%2C1.434%2C0%2C0%2C0-1.19-2.073c-.536-.039-1.1-.078-1.671-.13-.887-.083-1.461-.141-2.213-.214a1.448%2C1.448%2C0%2C0%2C0-1.523.982%2C19.36%2C19.36%2C0%2C0%2C1-1.658%2C3.6%2C20.036%2C20.036%2C0%2C0%2C1-1.656%2C2.455%2C1.321%2C1.321%2C0%2C0%2C1-1.064.493%2C14.726%2C14.726%2C0%2C0%2C1-4.8-.943%2C14.124%2C14.124%2C0%2C0%2C1-7.47-6.3c-.7.221-1.465.411-2.228.606l-2.289.648c-.927.285-2.441.726-5.1%2C1.473-2.469.725-5%2C1.485-7.079%2C2.153-3.08.987-7.932%2C2.776-12.155%2C4.373a46%2C46%2C0%2C0%2C0%2C2.664%2C5.749%2C110.1%2C110.1%2C0%2C0%2C1%2C19.438-4.68A113.222%2C113.222%2C0%2C0%2C1%2C169.7%2C99.26a50%2C50%2C0%2C0%2C1%2C9.48.8c1.424.276%2C2.59.584%2C3.391.812a23.658%2C23.658%2C0%2C0%2C0%2C1.769-2.277%2C23.23%2C23.23%2C0%2C0%2C0%2C1.421-2.381%2C10.473%2C10.473%2C0%2C0%2C1-6.127%2C1.351.652.652%2C0%2C0%2C1-.492-1%22%20fill%3D%22%23d50032%22/%3E%0A%20%3Cpath%20transform%3D%22translate%28-43.203%20-38.229%29%22%20d%3D%22M96.407%2C88.126c-1.48-3.94-2.929-7.892-4.4-11.833A1.041%2C1.041%2C0%2C0%2C0%2C90.13%2C76c-.8.966-1.615%2C1.92-2.385%2C2.91a1.409%2C1.409%2C0%2C0%2C0-.256.869c.045.833.153%2C1.665.251%2C2.5.117.989.251%2C1.975.378%2C2.971L91.391%2C84l.223.324c-1.728.923-3.311%2C1.524-4.919%2C4.3%2C0%2C.012.011.022.015.035a19%2C19%2C0%2C0%2C0-1.346%2C3.911c.263.013.534.023.812.036.768-2.7%2C1.943-4.489%2C3.076-4.37%2C1.081.115%2C1.839%2C1.933%2C2.072%2C4.532%2C1.6-1.183%2C3.147-2.342%2C4.721-3.454a.856.856%2C0%2C0%2C0%2C.362-1.194%22%20fill%3D%22%23d50032%22/%3E%0A%20%3Cpath%20transform%3D%22translate%28-42.383%20-60.804%29%22%20d%3D%22M83.8%2C120.138a27.1%2C27.1%2C0%2C0%2C0-.01%2C3.469%2C8.394%2C8.394%2C0%2C0%2C0%2C.814-.231%2C21.076%2C21.076%2C0%2C0%2C1-.062-3.19l-.742-.048%22%20fill%3D%22%23d50032%22/%3E%0A%20%3Cpath%20transform%3D%22translate%280%29%22%20d%3D%22M135.4%2C22.077c-7.146%2C3.28-17.453%2C5.856-23.69%2C7.242.426.119.884.258%2C1.372.427.214.073.495.171.828.3%2C1.993-.285%2C3.849-.559%2C4.529-.677a85.043%2C85.043%2C0%2C0%2C0%2C19.558-5.438%2C37.014%2C37.014%2C0%2C0%2C0%2C4.193-2.28c-1.453%2C0-3.763-.038-5.213.018a4.306%2C4.306%2C0%2C0%2C0-1.576.41m-60.671%2C2.5a44.507%2C44.507%2C0%2C0%2C1%2C13.332-2.168%2C7.538%2C7.538%2C0%2C0%2C0-5.486-3.257s-1.861-5.846-2.515-8.227c15.535-2.883%2C52.184-2.8%2C55.584-2.788.167%2C0%2C.378-.194%2C0-.244C130.7%2C7.253%2C106%2C5.128%2C72.93%2C8.042c1.281%2C2.629%2C5.054%2C10.366%2C5.676%2C11.638-2.333%2C1.466-3.612%2C3.08-3.881%2C4.9m-7.15%2C3.071a28.225%2C28.225%2C0%2C0%2C1%2C3.655-1.918c-6.975.375-21.111.9-32.241.256a29.277%2C29.277%2C0%2C0%2C0-4.717.422s.884.13%2C1.165.16c12.07%2C1.706%2C25.8%2C1.352%2C32.138%2C1.08m-52.111-.728s1.213.306%2C1.544.4c18.846%2C4.88%2C37.439%2C5.885%2C44.329%2C6.218a19.317%2C19.317%2C0%2C0%2C1%2C3.94-4.26%2C402.259%2C402.259%2C0%2C0%2C1-43.133-2.665%2C46.283%2C46.283%2C0%2C0%2C0-6.681.3M60.049%2C1.153A208.958%2C208.958%2C0%2C0%2C0%2C13.491%2C7.467C10.1%2C8.307-.181%2C11.574%2C0%2C17.061c.2%2C5.988%2C12.24%2C7.055%2C22.6%2C6.968%2C10.222-.085%2C44.072-1.514%2C50.086-1.558a10.217%2C10.217%2C0%2C0%2C1%2C1.521-2.433c-11.073.338-39.492%2C1.136-52.158.825-9.579-.237-14.039-2.153-14.11-4.3C7.633%2C7.087%2C58.9%2C1.73%2C59.418%2C1.684c3.637-.335%2C2.677-.627.63-.531M58.964%2C4.59c1.152-.249%2C1.439-.556-.223-.374s-3.5.368-5.251.589c-2.725.348-40.045%2C6.075-39.859%2C11.643-.05%2C0%2C4.77-.187%2C5.391-.21%2C3-5.367%2C38.789-11.4%2C39.941-11.648m98.689%2C3.751C155.5%2C7.665%2C130.842-1.042%2C71.647.1c-.91-.005-3.053.075-3.053.075s1.924%2C3.443%2C2.766%2C4.855a1.035%2C1.035%2C0%2C0%2C0%2C.819.342c3.28-.212%2C6.556-.573%2C9.839-.677%2C45.334-2.141%2C73.371%2C3.761%2C75.5%2C4.2%2C1.5.312%2C2.283.116.133-.561m9.256%2C6.889c-1.753.07-61.017%2C2.335-79.029%2C3.024a10.254%2C10.254%2C0%2C0%2C1%2C2.714%2C2.818c8.79-.29%2C58.167-1.915%2C59.482-1.915%2C1.419%2C0%2C1.428.431-.132%2C1.546a31.953%2C31.953%2C0%2C0%2C1-5.039%2C2.921c-7.074%2C3.327-14.651%2C4.971-22.269%2C6.457-.654.128-3.731.469-6.811.805a20.571%2C20.571%2C0%2C0%2C1%2C2.964%2C1.8c4.877-.472%2C10.5-1.029%2C12.566-1.332a165.874%2C165.874%2C0%2C0%2C0%2C21.227-4.54A60.215%2C60.215%2C0%2C0%2C0%2C165.3%2C21.965a7.882%2C7.882%2C0%2C0%2C0%2C3.646-3.453%2C2.263%2C2.263%2C0%2C0%2C0-2.036-3.281%22%20fill%3D%22%231d428a%22/%3E%0A%20%3Cpath%20transform%3D%22translate%28-42.383%20-34.988%29%22%20d%3D%22M83.792%2C94.323a28.062%2C28.062%2C0%2C0%2C0%2C.123%2C4.768c.536%2C4.418%2C2.246%2C4.993%2C2.855%2C5.148a8.8%2C8.8%2C0%2C0%2C0%2C2.374.052c.612-.018%2C1.225-.1%2C1.838-.15.03.082.062.164.092.247-.8.333-3.107%2C1.086-3.107%2C1.086s.3%2C3.554.446%2C5.055l3.305.24c.435-2.268.825-4.412%2C1.275-6.544a2.067%2C2.067%2C0%2C0%2C1%2C.647-1.092c2.811-3.1%2C2.919-5.34%2C2.919-5.34s8.265-4.027%2C10-4.738q-.393-.836-.724-1.62c-.318.11-.609.208-.887.319Q97.643%2C94.68%2C90.34%2C97.624a1.657%2C1.657%2C0%2C0%2C0-.667.63c-.134.2-.263.411-.392.622-.737%2C1.916-1.7%2C3.1-2.623%2C3.005-2.412%2C0-2.107-7.488-2.107-7.488Zm2.6-4.91%2C1.551.057.21-2c-.62-.049-1.255.707-1.761%2C1.94m1.017%2C5.142-2-.129c-.094%2C2.724.509%2C4.847%2C1.49%2C4.979Zm2.942-23.6a7.53%2C7.53%2C0%2C0%2C0-.221-.837c-.144-.339-.3-.936-.484-.947-.626-.048-1.5-.123-1.867.237-1.115%2C1.1-2.358%2C2.286-1.4%2C4.232.32-.382.627-.77.958-1.133.791-.866%2C1.324-2.176%2C3.012-1.551m61.986%2C21.65a70.5%2C70.5%2C0%2C0%2C1-9.1%2C4.814%2C58.185%2C58.185%2C0%2C0%2C1-10.432%2C3.817c-.184.044-.368.082-.552.124%2C1.879-.688%2C3.722-1.476%2C5.546-2.309a66.466%2C66.466%2C0%2C0%2C0%2C9.88-5.329c.668-.454%2C1.282-.9%2C1.844-1.316.583.03%2C1.167.066%2C1.751.113.377.03.727.06%2C1.06.088m-33.066%2C11.887-8.642%2C3.188a6.778%2C6.778%2C0%2C0%2C1%2C.336-1.032%2C6.258%2C6.258%2C0%2C0%2C1%2C1.369-2.088%2C11.577%2C11.577%2C0%2C0%2C1%2C2.6-1.719%2C12.3%2C12.3%2C0%2C0%2C0%2C4.339%2C1.651m36.318-10.7c1.249-.905%2C2.273-1.728%2C3.04-2.378-2.648-.976-4.011-1.115-7.9-1.431a100.213%2C100.213%2C0%2C0%2C0-16.979.4A102.41%2C102.41%2C0%2C0%2C0%2C120.135%2C92.5c-1.25.295-3.774.894-7.015%2C1.986-1.445.488-2.649.947-3.541%2C1.305a18.311%2C18.311%2C0%2C0%2C0%2C1.574%2C3.093c3.157-1.064%2C6.867-2.288%2C9.284-2.985%2C4.934-1.422%2C13.539-2.385%2C11.9-1.9a85.54%2C85.54%2C0%2C0%2C0-18.792%2C7.761.04.04%2C0%2C0%2C1%2C.006.007c-.079.043-.152.083-.223.124q-.852.513-1.669%2C1.053a7.5%2C7.5%2C0%2C0%2C0-1.636%2C1.613%2C11.146%2C11.146%2C0%2C0%2C0-.832%2C1.405%2C22.52%2C22.52%2C0%2C0%2C0-1.17%2C2.547q-1.128.361-2.316.705-1.117.326-2.2.613a1.334%2C1.334%2C0%2C0%2C0-.278%2C1.667%2C1.173%2C1.173%2C0%2C0%2C0%2C.778.446c2.585-.793%2C4.711-1.468%2C6.2-1.947%2C5.792-1.858%2C6.346-2.149%2C14.482-5.078a40.651%2C40.651%2C0%2C0%2C0%2C6.78-.6%2C49.747%2C49.747%2C0%2C0%2C0%2C5.66-1.412%2C69.039%2C69.039%2C0%2C0%2C0%2C7.379-2.943%2C79.4%2C79.4%2C0%2C0%2C0%2C7.423-3.785c1.5-.9%2C2.73-1.731%2C3.654-2.386l0%2C0m8.4%2C7.1a.917.917%2C0%2C0%2C0-1.783-.288c-.131.333-.246.647-.329.807a4.868%2C4.868%2C0%2C0%2C1-.958%2C1.171%2C4.65%2C4.65%2C0%2C0%2C1-1.489.893%2C4.526%2C4.526%2C0%2C0%2C1-1.128.256%2C22.919%2C22.919%2C0%2C0%2C0-.83-3.15%2C18.144%2C18.144%2C0%2C0%2C0-1.044-2.533%2C10.268%2C10.268%2C0%2C0%2C0-1.755-2.367c-.493.31-1.06.655-1.69%2C1.019a10.9%2C10.9%2C0%2C0%2C1%2C1.207%2C1.453%2C12.661%2C12.661%2C0%2C0%2C1%2C2.123%2C6.2L139.819%2C109.3a11.931%2C11.931%2C0%2C0%2C0-.981-2.452%2C10.253%2C10.253%2C0%2C0%2C0-2.036-2.738c-.669.2-1.292.356-1.86.483a8.362%2C8.362%2C0%2C0%2C1%2C1.715%2C1.965%2C10.931%2C10.931%2C0%2C0%2C1%2C1.5%2C3.247c-1.267.454-2.592.88-3.98%2C1.263-.233.064-.464.127-.7.187a1.442%2C1.442%2C0%2C0%2C0-.213.456%2C1.108%2C1.108%2C0%2C0%2C0%2C.027.829%2C1.008%2C1.008%2C0%2C0%2C0%2C.59.484c14.689-4.277%2C23.9-6.953%2C24.712-7.171.058-.017.308-.084.637-.192a11.011%2C11.011%2C0%2C0%2C0%2C1.555-.638%2C6.517%2C6.517%2C0%2C0%2C0%2C1.958-1.617%2C7.817%2C7.817%2C0%2C0%2C0%2C1.165-2.165.886.886%2C0%2C0%2C0%2C.075-.356%22%20fill%3D%22%231d428a%22/%3E%0A%20%3Cpath%20transform%3D%22translate%28-69.054%20-29.476%29%22%20d%3D%22M191%2C73.472a14.512%2C14.512%2C0%2C0%2C0-1.323-4.157%2C21.49%2C21.49%2C0%2C0%2C0-1.631-2.692l-1.078.227s-.919.176-2.708.437c.472.96.93%2C1.939%2C1.222%2C2.6.841%2C1.536%2C3.661%2C3.162%2C5.518%2C3.582m-4.554%2C2.755c-.778%2C1.547-1.579%2C3.017-2.387%2C4.41.717-.125%2C1.454-.27%2C2.225-.444.946-.222%2C1.848-.458%2C2.7-.7a1.389%2C1.389%2C0%2C0%2C0%2C.885-.748%2C16.267%2C16.267%2C0%2C0%2C0%2C.973-3.065c.061-.319.116-.631.162-.936l-2.332-.729a1.162%2C1.162%2C0%2C0%2C0-1.407.555c-.264.547-.537%2C1.095-.816%2C1.657m-22.36-1.6a9.293%2C9.293%2C0%2C0%2C0%2C.584.83%2C12.032%2C12.032%2C0%2C0%2C0%2C6.476%2C4.045%2C13.9%2C13.9%2C0%2C0%2C0%2C1.814.373%2C1.911%2C1.911%2C0%2C0%2C0%2C1.828-.773c.256-.367.533-.791.809-1.266a17.865%2C17.865%2C0%2C0%2C0%2C.946-1.89c.219-.5.471-1.094.727-1.789a1.284%2C1.284%2C0%2C0%2C0-1.145-1.736c-.123%2C0-.244-.006-.373-.013-1.208-.04-3.152-.059-7.9.238-.772.045-1.729.108-2.836.192a1.177%2C1.177%2C0%2C0%2C0-.926%2C1.787m-3.321-5.3c.056.191.1.33.115.39a3.139%2C3.139%2C0%2C0%2C0%2C3.28%2C2.247c1.047-.089%2C2.108-.176%2C3.193-.247a68.689%2C68.689%2C0%2C0%2C1%2C7.768-.153%2C4.855%2C4.855%2C0%2C0%2C0%2C2.8-.524%2C5.213%2C5.213%2C0%2C0%2C0%2C1.762-3.153c-4.406.513-10.759%2C1.095-18.915%2C1.44m-6.448.21c.011.375.022.74.034%2C1.082v.005c.009.2.014.4.019.587a.01.01%2C0%2C0%2C1%2C0%2C.008c.006.169.011.332.017.487%2C0%2C.038%2C0%2C.076%2C0%2C.113.006.139.011.274.017.4v.019c.006.128.01.244.015.349%2C0%2C.028%2C0%2C.055%2C0%2C.08.006.1.011.195.016.271v0c.061%2C1.02.441%2C1.29.76%2C1.332a.886.886%2C0%2C0%2C0%2C.46-.074l1.194-.319c.519-.14.981-.266%2C1.76-.488l.34-.095a1.652%2C1.652%2C0%2C0%2C0%2C1.342-1.724%2C2.7%2C2.7%2C0%2C0%2C0-.032-.33c-.013-.067-.023-.123-.035-.167-.014-.062-.026-.1-.026-.1a.123.123%2C0%2C0%2C1-.007-.016v0c-.034-.113-.226-.708-.509-1.583q-2.575.1-5.376.166m4.235-3.7h0c0-.007-.005-.015-.009-.024-.073-.226-.15-.459-.223-.689q-1.987-.038-4.131-.12c0%2C.063%2C0%2C.122%2C0%2C.186%2C0%2C.027%2C0%2C.054%2C0%2C.082.014.5.029%2C1.026.044%2C1.562q1.581.022%2C3.172.023c.5%2C0%2C.987%2C0%2C1.472%2C0-.107-.333-.218-.673-.33-1.019m-5.487.974L153%2C64.956c-1.869-.08-3.817-.189-5.832-.333l-.426.274a1.087%2C1.087%2C0%2C0%2C0-.191.16c-.015.015-.03.031-.044.044a1.745%2C1.745%2C0%2C0%2C0-.469%2C1.071l.011.389q3.47.177%2C7.011.25m-6.93%2C2.818.177%2C6.725a.537.537%2C0%2C0%2C0%2C.763.489l5.508-1.72a1.045%2C1.045%2C0%2C0%2C0%2C.719-.952l-.147-4.614q-3.355.069-7.02.071m-6.317%2C1.678h0l.2%2C7.31c.012.4.355.6.768.452l3.745-1.346a1.115%2C1.115%2C0%2C0%2C0%2C.15-.07%2C1.176%2C1.176%2C0%2C0%2C0%2C.524-.617l.04-.151c.034-.1.015-.052.012-.151l-.213-7.108q-2.2-.006-4.505-.037l-.059.044a1.733%2C1.733%2C0%2C0%2C0-.665%2C1.673M137.2%2C72.523a2.491%2C2.491%2C0%2C0%2C0-.754%2C1.737c0%2C.126%2C0%2C.262.018.4a9.529%2C9.529%2C0%2C0%2C0%2C.155.967s.637%2C3.318.8%2C3.915a1.09%2C1.09%2C0%2C0%2C0%2C.427.606c.1.064.112.027.253-.005.047-.011.1-.027.148-.045.256-.1.385-.147.444-.172l.044-.017c.367-.186.411-.571.4-1.089l-.241-6.965c-.011-.375-.276-.683-.633-.389a9.047%2C9.047%2C0%2C0%2C0-1.063%2C1.054m15.759-9.011-.047-1.438a1.133%2C1.133%2C0%2C0%2C0-.094-.436h0a.943.943%2C0%2C0%2C0-.069-.121l-.012-.013a.466.466%2C0%2C0%2C0-.08-.079.289.289%2C0%2C0%2C0-.027-.019.382.382%2C0%2C0%2C0-.077-.041.221.221%2C0%2C0%2C0-.052-.013.244.244%2C0%2C0%2C0-.07-.011.622.622%2C0%2C0%2C0-.077.009c-.018%2C0-.035%2C0-.056.01a.568.568%2C0%2C0%2C0-.134.065l-.007%2C0-2.66%2C1.708q1.7.2%2C3.465.378m4.513-.986h0a.3.3%2C0%2C0%2C1-.012-.035c-.1-.322-.209-.637-.31-.945l-.006-.013c-.1-.318-.206-.628-.3-.922-.282-.846-.973-1.078-1.491-.805-.181.1-.349.177-.482.238-.568.267-.74.719-.758%2C1.486%2C0%2C.11%2C0%2C.228%2C0%2C.349a.081.081%2C0%2C0%2C1%2C0%2C.017c0%2C.015%2C0%2C.036%2C0%2C.066s0%2C.1%2C0%2C.17c.007.3.02.828.038%2C1.5q1.862.178%2C3.785.327c-.156-.483-.314-.962-.467-1.429m14.506-3.972a50.223%2C50.223%2C0%2C0%2C0-13.23.256%2C1.1%2C1.1%2C0%2C0%2C0-.848%2C1.446c.16.477.765%2C2.332%2C1.237%2C3.786%2C2.962.213%2C6.025.376%2C9.192.473%2C2.352.073%2C5.369.11%2C7.22.111.327%2C0%2C.278.059-.01.081-2.2.181-8%2C.548-16.048.436.1.324.184.569.218.684a0%2C0%2C0%2C0%2C1%2C.005%2C0c.091.3.2.658.309%2C1.026%2C8.809-.04%2C15.269-.273%2C20-.589.056-.319.106-.646.153-.981.006%2C0%2C.052-.418.049-.417a5.09%2C5.09%2C0%2C0%2C0-.643-2.846c-1.452-2.4-5.018-3.2-7.607-3.467m15.274%2C7.025a11.325%2C11.325%2C0%2C0%2C0-1.129-1.228%2C19.18%2C19.18%2C0%2C0%2C0-1.931-1.658%2C20.6%2C20.6%2C0%2C0%2C0-3.311-1.982%2C21.585%2C21.585%2C0%2C0%2C0-2.457-.993%2C24.811%2C24.811%2C0%2C0%2C0-2.46-.707%2C12.255%2C12.255%2C0%2C0%2C1%2C7.131%2C6.061l.011%2C0c.147.262.318.578.493.915%2C1.422-.13%2C2.63-.268%2C3.653-.405%22%20fill%3D%22%231d428a%22/%3E%0A%20%3Cpath%20transform%3D%22translate%28-138.46%20-72.527%29%22%20d%3D%22M411.149%2C151.6a3.622%2C3.622%2C0%2C0%2C1%2C3.6%2C2.777h-7.18a3.631%2C3.631%2C0%2C0%2C1%2C3.576-2.777m.056%2C11.237a7.346%2C7.346%2C0%2C0%2C0%2C7.045-4.537h-3.764a3.873%2C3.873%2C0%2C0%2C1-3.2%2C1.523%2C3.732%2C3.732%2C0%2C0%2C1-3.736-2.91h10.809a5.476%2C5.476%2C0%2C0%2C0%2C.1-1.148%2C7.317%2C7.317%2C0%2C1%2C0-7.257%2C7.072m-15.721%2C0a6.8%2C6.8%2C0%2C0%2C0%2C6.992-5.551h-3.683a3.39%2C3.39%2C0%2C0%2C1-3.309%2C2.189%2C3.763%2C3.763%2C0%2C0%2C1%2C0-7.526%2C3.389%2C3.389%2C0%2C0%2C1%2C3.309%2C2.189h3.683a6.794%2C6.794%2C0%2C0%2C0-6.992-5.551%2C7.128%2C7.128%2C0%2C1%2C0%2C0%2C14.251m-22.552-.32H376.4v-7.474a2.97%2C2.97%2C0%2C0%2C1%2C3.2-3.094%2C2.823%2C2.823%2C0%2C0%2C1%2C2.963%2C3.042v7.526h3.469v-8.645a4.978%2C4.978%2C0%2C0%2C0-5.309-5.285%2C5.6%2C5.6%2C0%2C0%2C0-4.324%2C1.841v-1.521h-3.469Zm-10.277-3.042a3.763%2C3.763%2C0%2C1%2C1%2C3.762-3.764%2C3.671%2C3.671%2C0%2C0%2C1-3.762%2C3.764m-.667%2C3.362a5.852%2C5.852%2C0%2C0%2C0%2C4.428-1.92v1.6h3.474v-13.61h-3.474v1.6a5.848%2C5.848%2C0%2C0%2C0-4.428-1.92c-3.792%2C0-6.646%2C3.068-6.646%2C7.124s2.854%2C7.126%2C6.646%2C7.126m-12.439-.32h3.469V143.3h-3.469Zm-10.446.32a5.266%2C5.266%2C0%2C0%2C0%2C4.136-1.814v1.493h3.469v-13.61h-3.469v7.658a2.782%2C2.782%2C0%2C0%2C1-2.989%2C2.91%2C2.663%2C2.663%2C0%2C0%2C1-2.8-2.856v-7.712h-3.469v8.727a4.867%2C4.867%2C0%2C0%2C0%2C5.125%2C5.2m-14.268-3.362a3.763%2C3.763%2C0%2C1%2C1%2C3.736-3.764%2C3.671%2C3.671%2C0%2C0%2C1-3.736%2C3.764m-7.206%2C3.042H321.1v-1.6a5.86%2C5.86%2C0%2C0%2C0%2C4.431%2C1.92c3.792%2C0%2C6.62-3.069%2C6.62-7.126s-2.828-7.124-6.62-7.124a5.856%2C5.856%2C0%2C0%2C0-4.431%2C1.92V143.3h-3.469Zm-24.112%2C0h3.469v-7.767a2.7%2C2.7%2C0%2C0%2C1%2C2.882-2.8%2C2.557%2C2.557%2C0%2C0%2C1%2C2.67%2C2.748v7.82h3.469v-7.767a2.674%2C2.674%2C0%2C0%2C1%2C2.854-2.8%2C2.543%2C2.543%2C0%2C0%2C1%2C2.668%2C2.748v7.82H315v-8.861a4.74%2C4.74%2C0%2C0%2C0-4.99-5.069%2C5.441%2C5.441%2C0%2C0%2C0-4.668%2C2.348%2C4.757%2C4.757%2C0%2C0%2C0-4.328-2.348%2C5.148%2C5.148%2C0%2C0%2C0-4.027%2C1.735v-1.414h-3.469Zm-13.426-6.965%2C2.722-7.395%2C2.7%2C7.395Zm-6.511%2C6.965h3.976l1.282-3.576h7.928l1.307%2C3.576H292.1L285.026%2C144.1h-4.345Z%22%20fill%3D%22%231d428a%22/%3E%0A%20%3Cpath%20transform%3D%22translate%28-226.75%20-45.228%29%22%20d%3D%22M474.574%2C109.221h3.469v-6.485c0-2.3%2C1.547-3.764%2C4.319-3.764h.508V95.4h-.508a5.284%2C5.284%2C0%2C0%2C0-4.319%2C2.269V95.61h-3.469Zm-6.567%2C0h3.469V95.61h-3.469Zm1.735-15.533a2.163%2C2.163%2C0%2C1%2C0-2.192-2.162%2C2.143%2C2.143%2C0%2C0%2C0%2C2.192%2C2.162m-15.214%2C8.566%2C2.722-7.393%2C2.7%2C7.393Zm-6.511%2C6.966h3.978l1.277-3.576h7.93l1.307%2C3.576h4.029L459.463%2C90.8h-4.345Z%22%20fill%3D%22%231d428a%22/%3E%0A%20%3Cpath%20transform%3D%22translate%28-140.35%20-46.705%29%22%20d%3D%22M341.712%2C110.7h3.469v-7.474a2.969%2C2.969%2C0%2C0%2C1%2C3.2-3.1%2C2.824%2C2.824%2C0%2C0%2C1%2C2.963%2C3.042V110.7h3.471v-8.647a4.982%2C4.982%2C0%2C0%2C0-5.313-5.284%2C5.6%2C5.6%2C0%2C0%2C0-4.324%2C1.841V97.087h-3.469Zm-9.528-3.043a3.763%2C3.763%2C0%2C1%2C1%2C3.734-3.764%2C3.67%2C3.67%2C0%2C0%2C1-3.734%2C3.764m0%2C3.363a7.128%2C7.128%2C0%2C1%2C0-7.314-7.126%2C7.07%2C7.07%2C0%2C0%2C0%2C7.314%2C7.126m-16.494-.32h3.6l5.657-13.611h-3.9l-3.525%2C9.287-3.523-9.287h-3.948ZM302.85%2C99.781a3.624%2C3.624%2C0%2C0%2C1%2C3.606%2C2.777h-7.18a3.628%2C3.628%2C0%2C0%2C1%2C3.574-2.777m.056%2C11.237a7.34%2C7.34%2C0%2C0%2C0%2C7.045-4.538h-3.762a3.873%2C3.873%2C0%2C0%2C1-3.2%2C1.523%2C3.734%2C3.734%2C0%2C0%2C1-3.736-2.911h10.811a5.452%2C5.452%2C0%2C0%2C0%2C.1-1.146%2C7.316%2C7.316%2C0%2C1%2C0-7.259%2C7.072m-18.47-15.268a5.739%2C5.739%2C0%2C0%2C1%2C0%2C11.477H281V95.751ZM277.309%2C110.7h7.208a9.21%2C9.21%2C0%2C1%2C0%2C0-18.417h-7.208Z%22%20fill%3D%22%23d50032%22/%3E%0A%20%3Cpath%20transform%3D%22translate%28-35.383%20-24.994%29%22%20d%3D%22M138.294%2C52.985a29.381%2C29.381%2C0%2C0%2C0-11.078-3.473c-5.727-.632-22.389.762-29.17%2C11.231A12.1%2C12.1%2C0%2C0%2C0%2C96.6%2C65.765c.694-1.459%2C2.243-3.471%2C5.687-5.455%2C9.064-5.22%2C14.123-5.732%2C14.123-5.732a98.864%2C98.864%2C0%2C0%2C0-12.092%2C6.815c-7.076%2C4.6-7.622%2C8.034-7.091%2C10.074.264%2C1.013.419%2C1.574.533%2C2.116-2.876%2C1.791-6.872%2C4.34-10.291%2C6.517a2.839%2C2.839%2C0%2C0%2C1-1.671.484c-5.193-.044-12.14-.447-12.8-.447-1.075%2C0-2.4%2C1.322-2.931%2C2.065s.536.742.536.742%2C9.641.618%2C12.972.835a4.8%2C4.8%2C0%2C0%2C0%2C2.148-.383c3.256-1.45%2C13.187-5.886%2C14.606-6.561%2C1.7-.809%2C2.13-1.635%2C1.692-3.454-.34-1.412-.131-.5-.5-2.293-.4-2%2C.432-3.559%2C2.808-5.638a68.008%2C68.008%2C0%2C0%2C1%2C12.965-9.2c4.059-2.292%2C5.668-3.3%2C11.716-3.586a57.036%2C57.036%2C0%2C0%2C1%2C9.284.324%22%20fill%3D%22%23d50032%22/%3E%0A%3C/svg%3E%0A");
        display: block;
        background-color: #00B0B9;
        background-repeat: no-repeat;
        background-size: 90px;
        background-position: 0px 0px;
}

.quarto-title p.subtitle {
        margin-top: 10px;
        font-size: 22px;
        font-weight: 300;
}

.quarto-title h1.title {
        text-indent: 3.7em;
        font-size: 30px;
}

.callout-caption-container {
    color: #00205B;
}

.bg-primary {
    color: #00205B;
}


.html-fill-container {
    color: #00205B;
}

.navbar-container {
    background-color: #00205B;
}

.html-fill-item {
    color: white;
}

.value-box-title {
    color: white;
}

.value-box-value {
    color: white;
}

.dt-container {
    color: black
}

.callout {
    background-color: white;
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
    border-radius: .25rem;
}

.callout-note.callout {
    border-left-color: #00205B;
    background-color: white;
}

.callout.callout-style-simple {
    padding: .01em .7em;
}

.title {
    font-size: 28px;
    font-weight: lighter;
}

h1, .h1 {
    font-size:30px;
    font-weight:600;
}

h2, .h2 {
   font-size:20px;
   font-weight:600;
}

h3, .h3 {
   font-size:18px;
   font-weight:600;
}

.header-section-number {
    color: #373a3c;
}

@import url('https://fonts.googleapis.com/css?family=Poppins');

.opensans {
    font-family: "Poppins", sans-serif;
}

.poppins {
    font-family: "Poppins", sans-serif;
}


body {
   -moz-osx-font-smoothing:grayscale;
   -webkit-font-smoothing:antialiased;
}
****************************************

****************************************
app\requirements.txt
****************************************
fitter==1.7.1
Jinja2==3.1.6
MarkupSafe==2.1.5
pandas==2.2.2
pdoc==14.7.0
Pygments==2.18.0
python-dateutil==2.9.0.post0
pytz==2024.1
simpy==4.1.1
six==1.16.0
tzdata==2024.1
plotly==6.0.1
streamlit==1.50.0
sim-tools==0.6.1
vidigi==0.0.3
joblib==1.4.2
streamlit-extras==0.5.0
schemdraw==0.19
openpyxl==3.1.5
python-calamine==0.3.1
nbformat==5.10.4
nbclient==0.10.2
scour==0.38.2
psutil==7.0.0
ipykernel==6.29.5
pytest==8.3.4
pytest-cov==6.0.0
pytest-html==4.1.1
quartodoc==0.11.1
-e .
****************************************

****************************************
app\setup.py
****************************************
import streamlit as st
import pandas as pd
from pandas.api.types import CategoricalDtype
from datetime import time, datetime
import calendar

# Workaround to deal with relative import issues
# https://discuss.streamlit.io/t/importing-modules-in-pages/26853/2
from pathlib import Path
import sys

sys.path.append(str(Path(__file__).resolve().parent.parent))
from _state_control import setup_state, reset_to_defaults, DEFAULT_INPUTS

st.set_page_config(layout="wide")

with open("app/style.css") as css:
    st.markdown(f"<style>{css.read()}</style>", unsafe_allow_html=True)

setup_state()

from streamlit_extras.stylable_container import stylable_container
from utils import Utils
from _app_utils import (
    get_text,
    get_text_sheet,
    COLORSCHEME,
    MONTH_MAPPING,
    REVERSE_MONTH_MAPPING,
    get_rota_month_strings,
)

u = Utils()

text_df = get_text_sheet("setup")

st.session_state["visited_setup_page"] = True

col1, col2 = st.columns([0.7, 0.3])

with col1:
    st.title(get_text("page_title", text_df))

with col2:
    st.image("app/assets/daa-logo.svg", width=300)

st.caption(get_text("page_description", text_df))

st.button(
    get_text("reset_parameters_button", text_df),
    type="primary",
    on_click=reset_to_defaults,
    icon=":material/history:",
)
st.caption(get_text("reset_parameters_warning", text_df))

st.divider()

st.header("HEMS Rota Builder")


@st.fragment
def rota_start_end_dates():
    st.markdown("### Summer and Winter Setup")

    col_summer_start, col_summer_end, col_summer_spacing = st.columns(3)

    with col_summer_start:
        start_month = st.selectbox(
            "Select **start** month (inclusive) for Summer Rota",
            list(MONTH_MAPPING.keys()),
            index=st.session_state.summer_start_month_index,
            key="key_summer_start_month_index",
            on_change=lambda: setattr(
                st.session_state,
                "summer_start_month_index",
                # note index is 1 less than actual month due to zero indexing in python
                MONTH_MAPPING[st.session_state.key_summer_start_month_index] - 1,
            ),
        )
    with col_summer_end:
        end_month = st.selectbox(
            "Select **end** month (inclusive) for Summer Rota",
            list(MONTH_MAPPING.keys()),
            index=st.session_state.summer_end_month_index,
            key="key_summer_end_month_index",
            on_change=lambda: setattr(
                st.session_state,
                "summer_end_month_index",
                # note index is 1 less than actual month due to zero indexing in python
                MONTH_MAPPING[st.session_state.key_summer_end_month_index] - 1,
            ),
        )

        (
            start_month_num,
            end_month_num,
            summer_start_date,
            summer_end_date,
            summer_end_day,
            winter_start_date,
            winter_end_date,
            winter_end_day,
        ) = get_rota_month_strings(start_month, end_month)

    if start_month_num <= end_month_num:
        # Output
        st.write(
            f"☀️ Summer rota runs from {summer_start_date} to {summer_end_date} (inclusive)"
        )
        st.write(
            f"❄️ Winter rota runs from {winter_start_date} to {winter_end_date} (inclusive)"
        )

        pd.DataFrame(
            [
                {"what": "summer_start_month", "month": start_month_num},
                {"what": "summer_end_month", "month": end_month_num},
                {"what": "summer_start_month_string", "month": start_month},
                {"what": "summer_end_month_string", "month": end_month},
            ]
        ).to_csv("actual_data/rota_start_end_months.csv", index=False)
    else:
        default_start_month = DEFAULT_INPUTS["summer_start_month_index"] + 1
        default_end_month = DEFAULT_INPUTS["summer_end_month_index"] + 1
        default_start_month_name = REVERSE_MONTH_MAPPING[default_start_month]
        default_end_month_name = REVERSE_MONTH_MAPPING[default_end_month]

        default_summer_end_day = calendar.monthrange(2024, end_month_num)[
            1
        ]  # Assume leap year for Feb
        default_summer_end_date = f"{default_summer_end_day}th {default_end_month_name}"
        st.error(
            f"""End month must be later than start month. Using default summer start of 1st {default_start_month_name} and summer end of {default_summer_end_date}."""
        )
        pd.DataFrame(
            [
                {"what": "summer_start_month", "month": default_start_month},
                {"what": "summer_end_month", "month": default_end_month},
            ]
        ).to_csv("actual_data/rota_start_end_months.csv", index=False)


rota_start_end_dates()


@st.fragment
def fleet_setup():
    st.markdown(f"""### {get_text("header_fleet_setup", text_df)}""")

    st.caption("""At present, the fleet cannot be expanded beyond what is currently
               available, though resources can be removed. """)

    col_1_fleet_setup, col_2_fleet_setup, blank_col_fleet_setup = st.columns(3)

    with col_1_fleet_setup:
        num_helicopters = st.number_input(
            get_text("set_num_helicopters", text_df),
            min_value=1,
            max_value=2,
            disabled=False,
            value=st.session_state.num_helicopters,
            help=get_text("help_helicopters", text_df),
            on_change=lambda: setattr(
                st.session_state,
                "num_helicopters",
                st.session_state.key_num_helicopters,
            ),
            key="key_num_helicopters",
        )

    with col_2_fleet_setup:
        num_cars = st.number_input(
            get_text("set_num_additional_cars", text_df),
            min_value=0,
            max_value=1,
            disabled=False,
            value=st.session_state.num_cars,
            help=get_text("help_cars", text_df),
            on_change=lambda: setattr(
                st.session_state, "num_cars", st.session_state.key_num_cars
            ),
            key="key_num_cars",
        )

    # Pull in the callsign and model lookup
    # For each, we will pull through the edited dataframe and the default dataframe
    # This allows us to ensure we are able to add in information about any default resources
    # even if we have removed it from the saved non-default lookups
    callsign_lookup = pd.read_csv("actual_data/callsign_registration_lookup.csv")
    callsign_lookup_default = pd.read_csv(
        "actual_data/callsign_registration_lookup_DEFAULT.csv"
    )
    callsign_lookup_columns = callsign_lookup.columns

    models = pd.read_csv("actual_data/service_schedules_by_model.csv")
    models_default = pd.read_csv("actual_data/service_schedules_by_model_DEFAULT.csv")
    models_columns = models.columns

    hems_rota_default = pd.read_csv("actual_data/HEMS_ROTA_DEFAULT.csv")

    callsign_lookup = pd.concat([callsign_lookup, callsign_lookup_default]).reset_index(
        drop=True
    )
    callsign_lookup = callsign_lookup.drop_duplicates(keep="first")
    print(callsign_lookup)

    models = pd.concat([models, models_default]).reset_index(drop=True)
    models = models.drop_duplicates(keep="first", subset=["model", "vehicle_type"])
    model_options = list(
        models[models["vehicle_type"] == "helicopter"]["model"].unique()
    )
    print(models)

    potential_fleet = callsign_lookup.merge(models, how="left", on=["model"])

    potential_fleet["callsign_group"] = potential_fleet["callsign"].str.extract(
        r"(\d+)"
    )

    potential_fleet["callsign_count"] = potential_fleet.groupby("callsign_group")[
        "callsign_group"
    ].transform("count")

    default_helos = potential_fleet[potential_fleet["vehicle_type"] == "helicopter"]

    default_cars = potential_fleet[
        (potential_fleet["vehicle_type"] == "car")
        & (potential_fleet["callsign_count"] == 1)
    ]

    default_helos = default_helos.head(num_helicopters)
    default_helos["has_car"] = True

    default_cars = default_cars.head(num_cars)

    st.markdown("#### Define the Helicopters")
    st.caption(
        "Columns with the :material/edit_note: symbol can be edited by double clicking the relevant table cell."
    )

    updated_helos_df = st.data_editor(
        default_helos,
        hide_index=True,
        key="helicopter_data_editor",
        column_order=[
            "callsign",
            #   "callsign_group",
            "registration",
            "has_car",
            "model",  # "service_schedule_months", "service_duration_weeks"
        ],
        column_config={
            "registration": st.column_config.TextColumn(
                label="Registration", required=True
            ),
            "callsign": st.column_config.TextColumn(label="Callsign", required=True),
            "callsign_group": st.column_config.TextColumn(
                label="Callsign", disabled=True
            ),
            "has_car": st.column_config.CheckboxColumn(label="Has a Backup Car"),
            "model": st.column_config.SelectboxColumn(
                label="Model", options=model_options, required=True
            ),
            # "service_schedule_months": st.column_config.NumberColumn(label="Servicing Interval (Months)", disabled=True),
            # "service_duration_weeks": st.column_config.NumberColumn(label="Servicing Interval (Weeks)", disabled=True)
        },
    )

    st.markdown("#### Define the Backup Cars")

    backup_cars = potential_fleet[
        (potential_fleet["vehicle_type"] == "car")
        & (potential_fleet["callsign_count"] > 1)
        & (potential_fleet["callsign_group"]).isin(
            updated_helos_df[updated_helos_df["has_car"] == True][
                "callsign_group"
            ].unique()
        )
    ]

    updated_backup_cars_df = st.data_editor(
        backup_cars,
        hide_index=True,
        key="backup_car_data_editor",
        column_order=[
            "callsign",
            #   "callsign_group",
            "registration",
            "model",  # "service_schedule_months", "service_duration_weeks"
        ],
        column_config={
            "registration": st.column_config.TextColumn(
                label="Registration", required=True
            ),
            "callsign": st.column_config.TextColumn(label="Callsign", required=True),
            "callsign_group": st.column_config.TextColumn(
                label="Callsign", disabled=True
            ),
            "model": st.column_config.SelectboxColumn(
                label="Model",
                options=potential_fleet[potential_fleet["vehicle_type"] == "car"][
                    "model"
                ].unique(),
                required=True,
            ),
            # "service_schedule_months": st.column_config.NumberColumn(label="Servicing Interval (Months)", disabled=True),
            # "service_duration_weeks": st.column_config.NumberColumn(label="Servicing Interval (Weeks)", disabled=True)
        },
    )

    st.markdown("#### Define the Standalone Cars")
    st.caption(
        "Columns with the :material/edit_note: symbol can be edited by double clicking the relevant table cell."
    )

    updated_cars_df = st.data_editor(
        default_cars,
        hide_index=True,
        key="standalone_car_data_editor",
        column_order=[
            "callsign",
            #   "callsign_group",
            "registration",
            "model",
            #   "service_schedule_months", "service_duration_weeks"
        ],
        column_config={
            "registration": st.column_config.TextColumn(
                label="Registration", required=True
            ),
            "callsign": st.column_config.TextColumn(label="Callsign", required=True),
            # "callsign_group": st.column_config.TextColumn(label="Callsign", disabled=True),
            "model": st.column_config.SelectboxColumn(
                label="Model",
                options=potential_fleet[potential_fleet["vehicle_type"] == "car"][
                    "model"
                ].unique(),
                required=True,
            ),
            # "service_schedule_months": st.column_config.NumberColumn(label="Servicing Interval (Months)", disabled=True),
            # "service_duration_weeks": st.column_config.NumberColumn(label="Servicing Interval (Weeks)", disabled=True)
        },
    )

    final_df = pd.concat([updated_helos_df, updated_backup_cars_df, updated_cars_df])

    final_df[callsign_lookup_columns].drop_duplicates().to_csv(
        "actual_data/callsign_registration_lookup.csv", index=False
    )

    # final_df[models_columns].drop_duplicates().to_csv("actual_data/service_schedules_by_model.csv", index=False)

    # hems_rota_default['callsign_group'] = hems_rota_default['callsign_group'].astype('str')
    hems_rota = hems_rota_default[
        hems_rota_default["callsign"].isin(final_df.callsign.unique())
    ]
    hems_rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

    with st.expander("Click here to view the final fleet dataframes"):
        st.markdown("### Callsign Lookup")
        st.dataframe(
            final_df[callsign_lookup_columns].drop_duplicates(), hide_index=True
        )
        st.markdown("### Vehicle Model Details")
        st.dataframe(
            pd.read_csv("actual_data/service_schedules_by_model.csv"), hide_index=True
        )

    st.markdown("### Individual Rota Setup")

    # Load callsign registration (this should reflect the output of fleet_setup)
    try:
        callsign_registration_lookup_df = pd.read_csv(
            "actual_data/callsign_registration_lookup.csv"
        )
    except FileNotFoundError:
        st.error(
            "actual_data/callsign_registration_lookup.csv not found. Please run Fleet Setup first."
        )
        st.stop()

    # Derive callsign_group and vehicle_type if not already perfect from the CSV
    # (The fleet_setup already does this, so it might be redundant if CSV is always up-to-date)
    if "callsign_group" not in callsign_registration_lookup_df.columns:
        callsign_registration_lookup_df["callsign_group"] = (
            callsign_registration_lookup_df["callsign"].str.extract(r"(\d+)")
        )
    if (
        "vehicle_type" not in callsign_registration_lookup_df.columns
        and "model" in callsign_registration_lookup_df.columns
    ):
        # This logic might need to align with how vehicle_type is determined in fleet_setup
        # For simplicity, let's assume it's present or use a simplified model-based inference
        callsign_registration_lookup_df["vehicle_type"] = (
            callsign_registration_lookup_df["model"].apply(
                lambda x: "helicopter"
                if isinstance(x, str) and "Airbus" in x or "H1" in x
                else "car"  # Simplified
            )
        )

    # Load default rota (this is the master template for shifts)
    try:
        df_default_rota = pd.read_csv("actual_data/HEMS_ROTA_DEFAULT.csv")
    except FileNotFoundError:
        st.error("HEMS_ROTA_DEFAULT.csv not found!")
        st.stop()

    # Sort: group, then helicopter first
    # Ensure 'vehicle_type' exists before trying to use it for sorting
    if "vehicle_type" in callsign_registration_lookup_df.columns:
        vehicle_order = CategoricalDtype(categories=["helicopter", "car"], ordered=True)
        callsign_registration_lookup_df["vehicle_type"] = (
            callsign_registration_lookup_df["vehicle_type"].astype(vehicle_order)
        )
        sorted_lookup_df = callsign_registration_lookup_df.sort_values(
            by=["callsign_group", "vehicle_type"]
        )
    else:
        st.warning(
            "'vehicle_type' column missing in callsign lookup. Rota setup might be incomplete."
        )
        sorted_lookup_df = (
            callsign_registration_lookup_df.copy()
        )  # Proceed without vehicle type sorting if missing

    rota_data = {}
    helicopter_rotas_by_group = {}

    # Define columns for the rota editor UI and their configuration
    editable_rota_columns = [
        "category",
        "summer_start",
        "summer_end",
        "winter_start",
        "winter_end",
    ]
    rota_editor_column_config = {
        "category": st.column_config.SelectboxColumn(
            label="Category", options=["CC", "EC"], required=True
        ),
        "summer_start": st.column_config.NumberColumn(
            label="Summer Start Hour", min_value=0, max_value=23, step=1, required=True
        ),
        "summer_end": st.column_config.NumberColumn(
            label="Summer End Hour", min_value=0, max_value=23, step=1, required=True
        ),
        "winter_start": st.column_config.NumberColumn(
            label="Winter Start Hour", min_value=0, max_value=23, step=1, required=True
        ),
        "winter_end": st.column_config.NumberColumn(
            label="Winter End Hour", min_value=0, max_value=23, step=1, required=True
        ),
    }
    # Column order for the editor will be just the editable_rota_columns
    rota_editor_column_order = editable_rota_columns[:]

    for idx, row_lookup in sorted_lookup_df.iterrows():
        callsign = row_lookup["callsign"]
        model = row_lookup.get(
            "model", "N/A"
        )  # Use .get for safety if 'model' might be missing
        # Ensure vehicle_type and callsign_group are present in row_lookup
        vehicle_type = row_lookup.get("vehicle_type", "unknown")
        group = row_lookup.get("callsign_group", "unknown_group")

        if vehicle_type == "unknown" or group == "unknown_group":
            st.warning(
                f"Skipping {callsign} due to missing vehicle_type or callsign_group in lookup data."
            )
            continue

        st.markdown(f"#### Set up rota for {callsign} ({model})")

        # Prepare existing_rota_for_resource: contains all columns (identifiers + schedule)
        existing_rota_for_resource = df_default_rota[
            df_default_rota["callsign"] == callsign
        ].copy()

        if existing_rota_for_resource.empty:
            num_rows_input = st.number_input(
                f"Number of shifts for {callsign}",
                min_value=1,
                max_value=5,
                value=2,
                key=f"{callsign}_num_rows",
            )
            default_category_val = "EC" if vehicle_type == "helicopter" else "CC"
            existing_rota_for_resource = pd.DataFrame(
                {
                    "callsign": [callsign] * num_rows_input,
                    "category": [default_category_val] * num_rows_input,
                    "vehicle_type": [vehicle_type] * num_rows_input,
                    "callsign_group": [group] * num_rows_input,
                    "summer_start": [7] * num_rows_input,
                    "winter_start": [7] * num_rows_input,
                    "summer_end": [19] * num_rows_input,
                    "winter_end": [19] * num_rows_input,
                }
            )

        # This DataFrame will be passed to st.data_editor, containing only schedule columns
        data_for_rota_editor = existing_rota_for_resource[editable_rota_columns].copy()

        current_edited_df = None  # This will hold the final DataFrame for this resource (with all columns)

        if vehicle_type == "car" and group in helicopter_rotas_by_group:
            toggle_key = f"{callsign}_same_as_heli"
            # Initialize session state for the toggle if not already present
            if toggle_key not in st.session_state:
                st.session_state[toggle_key] = True  # Default to using heli rota

            use_heli_rota = st.toggle(
                f"Use same rota as helicopter for group {group}?", key=toggle_key
            )

            if use_heli_rota:
                # helicopter_rotas_by_group stores the full DataFrame (identifiers + schedule)
                full_heli_rota_template = helicopter_rotas_by_group[group].copy()

                # Update identifiers for the car
                full_heli_rota_template["callsign"] = callsign
                full_heli_rota_template["vehicle_type"] = "car"
                full_heli_rota_template["callsign_group"] = (
                    group  # Should be the same group
                )

                current_edited_df = full_heli_rota_template
                st.info(f"Using helicopter rota for {callsign} ({model}).")
            else:
                # Custom rota for the car - show editor with only schedule columns
                edited_schedule_df = st.data_editor(
                    data_for_rota_editor,  # Contains only editable_rota_columns
                    column_order=rota_editor_column_order,
                    column_config=rota_editor_column_config,
                    hide_index=True,
                    num_rows="dynamic",
                    key=f"{callsign}_custom_car_rota_editor",
                )
                # Reconstruct the full DataFrame
                current_edited_df = edited_schedule_df.copy()
                current_edited_df["callsign"] = callsign
                current_edited_df["vehicle_type"] = "car"  # Explicitly car
                current_edited_df["callsign_group"] = group
        else:
            # Default editor for helicopters, or cars not having the sync toggle
            edited_schedule_df = st.data_editor(
                data_for_rota_editor,  # Contains only editable_rota_columns
                column_order=rota_editor_column_order,
                column_config=rota_editor_column_config,
                hide_index=True,
                num_rows="dynamic",
                key=f"{callsign}_default_rota_editor",
            )
            # Reconstruct the full DataFrame
            current_edited_df = edited_schedule_df.copy()
            current_edited_df["callsign"] = callsign
            current_edited_df["vehicle_type"] = (
                vehicle_type  # This vehicle's actual type
            )
            current_edited_df["callsign_group"] = group

        rota_data[callsign] = current_edited_df

        if vehicle_type == "helicopter":
            # current_edited_df is the helicopter's fully reconstructed rota
            helicopter_rotas_by_group[group] = current_edited_df.copy()

    st.markdown("## Full Rota Preview")
    if rota_data:
        full_rota_df = pd.concat(rota_data.values(), ignore_index=True)

        # Ensure all core columns from df_default_rota are present and in the correct order
        # The columns 'callsign', 'vehicle_type', 'callsign_group' should now be correctly
        # populated from the loop logic.

        # Make sure all columns from the default rota schema are present
        for col in df_default_rota.columns:
            if col not in full_rota_df.columns:
                # Add missing columns with appropriate default (e.g., NA or specific values)
                # This handles cases where df_default_rota might have more columns than generated.
                full_rota_df[col] = pd.NA
                if (
                    col == "category" and "category" not in full_rota_df.columns
                ):  # Example default
                    full_rota_df[col] = "EC"  # Or some other logic for default category

        # Select and order columns according to the df_default_rota schema
        # Filter full_rota_df.columns to only those that are also in df_default_rota.columns
        # to prevent errors if full_rota_df accidentally gains extra columns not in the schema.
        final_columns_ordered = [
            col for col in df_default_rota.columns if col in full_rota_df.columns
        ]
        full_rota_df = full_rota_df[final_columns_ordered]

        st.dataframe(full_rota_df, hide_index=True)
        # Save to HEMS_ROTA.csv (the working file), not HEMS_ROTA_DEFAULT.csv
        full_rota_df.to_csv("actual_data/HEMS_ROTA.csv", index=False)
        st.success("Final rota automatically saved to HEMS_ROTA.csv!")
    else:
        st.warning("No rota data generated to preview or save.")


fleet_setup()

# col_summer, col_winter, col_summer_winter_spacing = st.columns(3)
# with col_summer:
#     st.caption(get_text("summer_rota_help", text_df))
# with col_winter:
#     st.caption(get_text("winter_rota_help", text_df))


# @st.fragment
# def fleet_editors(final_helo_df, final_car_df):
#     # Create an editable dataframe for people to modify the parameters in
#     st.markdown("##### Helicopters")

#     st.info("Single resources with different levels of care at different times will be represented as two rows with non-overlapping rota times")

#     st.caption("Columns with the :material/edit_note: symbol can be edited by double clicking the relevant table cell.")

#     updated_helo_df = st.data_editor(
#         final_helo_df.reset_index(),
#         disabled=["vehicle_type"],
#         hide_index=True,
#         column_order=["vehicle_type", "callsign", "registration", "category", "model",
#                     "summer_start", "summer_end", "winter_start", "winter_end"],
#         column_config={
#             "vehicle_type": "Vehicle Type",
#             "callsign": st.column_config.TextColumn(
#                 "Callsign", disabled=True
#                 ),
#             "registration": st.column_config.TextColumn(
#                 "Registration", disabled=True
#             ),
#             "category": st.column_config.SelectboxColumn(
#                 "Care Type",
#                 options=["EC", "CC"],
#                 disabled=False
#                 ),
#             "model": st.column_config.SelectboxColumn(
#                 "Model",
#                 options=["Airbus EC135", "Airbus H145"],
#             ),
#             "summer_start": st.column_config.TimeColumn(
#                 "Summer Start", format="HH:mm",
#                 disabled=False
#             ),
#             "summer_end": st.column_config.TimeColumn(
#                 "Summer End", format="HH:mm",
#                 disabled=False
#             ),
#             "winter_start": st.column_config.TimeColumn(
#                 "Winter Start", format="HH:mm",
#                 disabled=False
#             ),
#             "winter_end": st.column_config.TimeColumn(
#                 "Winter End", format="HH:mm",
#                 disabled=False
#             )
#             }
#         )

#     st.caption("""
# :red_car: **All helicopters in the model are automatically assumed to have a backup car assigned to them for use
# when the helicopter is unavailable for any reason.**
# """)


#     st.markdown("##### Additional Cars")
#     st.caption("""
# In the table below you can also alter the parameters of the *additional* cars that have their own separate callsign
# group and operate as a totally separate resource to the helicopters.""")
#     st.caption("Columns with the :material/edit_note: symbol can be edited by double clicking the relevant table cell.")


#     final_car_df["vehicle_type"] = final_car_df["vehicle_type"].apply(lambda x: x.title())

#     updated_car_df = st.data_editor(final_car_df.reset_index(),
#                                     hide_index=True,
#                                     disabled=["vehicle_type"],
#                                     column_order=["vehicle_type", "callsign", "registration", "category",
#                                                   "model", "summer_start", "summer_end",
#                                                   "winter_start", "winter_end"],
#                                     column_config={
#             "vehicle_type": "Vehicle Type",
#             "callsign": st.column_config.TextColumn(
#                 "Callsign", disabled=True
#                 ),
#             "registration": st.column_config.TextColumn(
#                 "Registration", disabled=True
#             ),
#             "category": st.column_config.SelectboxColumn(
#                 "Care Type", options=["EC", "CC"],
#                 disabled=False
#             ),
#                 "model": st.column_config.SelectboxColumn(
#                 "Model", options=["Volvo XC90"],
#                 disabled=True
#             ),
#             "summer_start": st.column_config.TimeColumn(
#                 "Summer Start", format="HH:mm",
#                 disabled=False
#             ),
#             "summer_end": st.column_config.TimeColumn(
#                 "Summer End", format="HH:mm",
#                 disabled=False
#             ),
#             "winter_start": st.column_config.TimeColumn(
#                 "Winter Start", format="HH:mm",
#                 disabled=False
#             ),
#             "winter_end": st.column_config.TimeColumn(
#                 "Winter End", format="HH:mm",
#                 disabled=False
#             )

#             }
#                                     )

#     # Join the dataframes back together
#     final_rota = pd.concat([updated_helo_df, updated_car_df]).drop(columns='index')

#     # Convert vehicle type column back to expected capitalisation
#     final_rota["vehicle_type"] = final_rota["vehicle_type"].str.lower()

#     # Add callsign group column back in
#     final_rota["callsign_group"] = final_rota["callsign"].str.extract("(\d+)")

#     # print(final_rota)

#     # # Merge with service schedule df to get actual servicing intervals for chosen model
#     # final_rota = final_rota.merge(
#     #     u.SERVICING_SCHEDULES_BY_MODEL.merge(
#     #         pd.read_csv("actual_data/callsign_registration_lookup.csv"), how="left", on="model"),
#     #     on=["model","registration"], how="left"
#     #     )

#     print("Final Rota - Before Companion Cars")
#     print(final_rota)

#     ###############
#     # Companion Cars
#     ###############

#     # Take a copy of the helicopter df to allow us to create the cars that go alongside it
#     # We can assume operating hours and care category will be the same
#     companion_car_df = updated_helo_df.copy()
#     print("Initial Companion Car df")
#     print(companion_car_df)

#     # TODO: For now, we have hardcoded companion cars to be Volvo XC90s
#     companion_car_df["model"] = "Volvo XC90"
#     # Register them as cars instead of helicopters
#     companion_car_df["vehicle_type"] = "car"
#     # Update callsign
#     companion_car_df["callsign"] = companion_car_df["callsign"].str.replace("H", "CC")
#     # Add callsign group column
#     companion_car_df["callsign_group"] = companion_car_df["callsign"].str.extract("(\d+)")
#     # Remove 'last_service' date
#     # SR UPDATE 26/3 - no longer needed due to RP redesign of this df
#     # companion_car_df = companion_car_df.drop(columns=["last_service"])

#     # Merge with service schedule df to get actual servicing intervals for chosen model
#     companion_car_df.drop(columns=["service_schedule_months", "service_duration_weeks"])

#     companion_car_df = companion_car_df.merge(
#         u.SERVICING_SCHEDULES_BY_MODEL,
#         on=["model","vehicle_type"], how="left"
#         )

#     # Join this onto the list of helicopters and separate cars, then sort
#     final_rota = (pd.concat([final_rota, companion_car_df])
#                   .sort_values(["callsign_group", "vehicle_type"], ascending=[True, False])
#                   .drop(columns='index')
#                   )

#     # Remove the servicing columns as they will reflect the originally set models in the
#     # default rota
#     # SR Comment 26/3 - testing removal after RP redesign of service schedule monitoring
#     # final_rota = final_rota.drop(columns=["service_schedule_months","service_duration_weeks"])

#     print("Generated Rota")
#     print(final_rota)

#     print("Servicing Schedules by Model")
#     print(u.SERVICING_SCHEDULES_BY_MODEL)
#     print("Final Rota after Merge with Servicing Schedules")
#     print(final_rota)

#     # Convert the time columns back to something the model can understand
#     for col in ["summer_start", "winter_start", "summer_end", "winter_end"]:
#         final_rota[col] = final_rota[col].apply(lambda x: x.hour)

#     # Sort the columns into the order of the original rota
#     # Write back
#     final_rota_cols = pd.read_csv('actual_data/HEMS_ROTA_DEFAULT.csv').columns
#     # Write the rota back to a csv
#     final_rota[final_rota_cols].to_csv('actual_data/HEMS_ROTA.csv', index=False)

#     callsign_registration_lookup_cols = pd.read_csv('actual_data/callsign_registration_lookup_DEFAULT.csv').columns
#     callsign_output = final_rota[callsign_registration_lookup_cols].drop_duplicates()
#     callsign_output['registration'] = callsign_output.apply(lambda x: x["callsign"].lower() if "CC" in x["callsign"] else x["registration"], axis=1)
#     callsign_output.to_csv('actual_data/callsign_registration_lookup.csv', index=False)

# fleet_editors(final_helo_df, final_car_df)

# st.divider()

# st.header("Demand Parameters")

# st.caption("""
# At present it is only possible to apply an overall demand adjustment, which increases the number
# of calls that will be received per day in the model. You can use the slider below to carry out
# this adjustment.

# In future, the model will allow more granular control of additional demand.
# """)

# demand_adjust_type = "Overall Demand Adjustment"

# # TODO: Add to session state
# # demand_adjust_type = st.radio("Adjust High-level Demand",
# #          ["Overall Demand Adjustment",
# #           "Per Season Demand Adjustment",
# #           "Per AMPDS Code Demand Adjustment"],
# #           key="demand_adjust_type",
# #           horizontal=True,
# #           disabled=True
# #           )

# if demand_adjust_type == "Overall Demand Adjustment":
#     overall_demand_mult = st.slider(
#         "Overall Demand Adjustment",
#         min_value=90,
#         max_value=200,
#         value=st.session_state.overall_demand_mult,
#         format="%d%%",
#         on_change= lambda: setattr(st.session_state, 'overall_demand_mult', st.session_state.key_overall_demand_mult),
#         key="key_overall_demand_mult"
#         )

overall_demand_mult = 100

# elif demand_adjust_type == "Per Season Demand Adjustment":
#     season_demand_col_1, season_demand_col_2, season_demand_col_3, season_demand_col_4 = st.columns(4)

#     spring_demand_mult = season_demand_col_1.slider(
#         "🌼 Spring Demand Adjustment",
#         min_value=90,
#         max_value=200,
#         value=st.session_state.spring_demand_mult,
#         format="%d%%",
#         on_change= lambda: setattr(st.session_state, 'spring_demand_mult', st.session_state.key_spring_demand_mult),
#         key="key_spring_demand_mult"
#         )

#     summer_demand_mult = season_demand_col_2.slider(
#         "☀️ Summer Demand Adjustment",
#         min_value=90,
#         max_value=200,
#         value=st.session_state.summer_demand_mult,
#         format="%d%%",
#         on_change= lambda: setattr(st.session_state, 'summer_demand_mult', st.session_state.key_summer_demand_mult),
#         key="key_summer_demand_mult"
#         )

#     autumn_demand_mult = season_demand_col_3.slider(
#         "🍂 Autumn Demand Adjustment",
#         min_value=90,
#         max_value=200,
#         value=st.session_state.autumn_demand_mult,
#         format="%d%%",
#         on_change= lambda: setattr(st.session_state, 'autumn_demand_mult', st.session_state.key_autumn_demand_mult),
#         key="key_autumn_demand_mult"
#         )

#     winter_demand_mult = season_demand_col_4.slider(
#         "❄️ Winter Demand Adjustment",
#         min_value=90,
#         max_value=200,
#         value=st.session_state.winter_demand_mult,
#         format="%d%%",
#         on_change= lambda: setattr(st.session_state, 'winter_demand_mult', st.session_state.key_winter_demand_mult),
#         key="key_winter_demand_mult"
#         )

# elif demand_adjust_type == "Per AMPDS Code Demand Adjustment":
#     st.write("Coming Soon!")

# else:
#     st.error("TELL A DEVELOPER: Check Conditional Code for demand modifier in setup.py")

st.divider()

# st.divider()

st.header(get_text("additional_params_header", text_df))

st.caption(get_text("additional_params_help", text_df))


@st.fragment
def additional_params_expander():
    st.markdown("### Replications")

    number_of_runs_input = st.slider(
        "Number of Runs",
        min_value=1,
        max_value=100,
        value=st.session_state.number_of_runs_input,
        on_change=lambda: setattr(
            st.session_state,
            "number_of_runs_input",
            st.session_state.key_number_of_runs_input,
        ),
        key="key_number_of_runs_input",
        help="""
This controls how many times the simulation will repeat. On each repeat, while the core parameters
will stay the same, slight randomness will occur in the patterns of arrivals and in choices like which
resource responds, what the outcome of each job is, and more.
\n\n
Think of it like watching 10 different versions of the same day in an emergency control room.
In one run, a call comes in five minutes earlier. In another, a different crew is dispatched.
A patient might recover quickly in one case, or need extra help in another.
\n\n
By running the simulation multiple times, we get a better sense of the range of things that *could*
happen — not just a single outcome, but the full picture of what’s likely and what’s possible.
For example, by running 10 replications of 1 year, we can get a better sense of how well the model
will cope in busier and quieter times, helping to understand the likely range of performance that
might be observed in the real world.
""",
    )

    st.markdown("### Simulation and Warm-up Duration")

    col_button_1, col_button_2, col_button_3, col_button_4 = st.columns(4)

    col_button_1.button(
        "Set sim duration to 4 weeks",
        on_click=lambda: setattr(st.session_state, "sim_duration_input", 7 * 4),
    )

    col_button_2.button(
        "Set sim duration to 1 year",
        on_click=lambda: setattr(st.session_state, "sim_duration_input", 365),
    )

    col_button_3.button(
        "Set sim duration to 2 years",
        on_click=lambda: setattr(st.session_state, "sim_duration_input", 365 * 2),
    )

    col_button_4.button(
        "Set sim duration to 3 years",
        on_click=lambda: setattr(st.session_state, "sim_duration_input", 365 * 3),
    )

    sim_duration_input = st.slider(
        "Simulation Duration (days)",
        min_value=1,
        max_value=365 * 3,
        value=st.session_state.sim_duration_input,
        on_change=lambda: setattr(
            st.session_state,
            "sim_duration_input",
            st.session_state.key_sim_duration_input,
        ),
        key="key_sim_duration_input",
    )

    warm_up_duration = st.slider(
        "Warm-up Duration (hours)",
        min_value=0,
        max_value=24 * 10,
        value=st.session_state.warm_up_duration,
        on_change=lambda: setattr(
            st.session_state, "warm_up_duration", st.session_state.key_warm_up_duration
        ),
        key="key_warm_up_duration",
    )

    st.caption(
        f"The simulation will not start recording metrics until {(warm_up_duration / 24):.2f} days have elapsed"
    )

    st.markdown("### Dates")

    st.caption("""
This affects when the simulation will start. The simulation time affects the rota that is used,
as well as the demand (average number of jobs received).
""")

    sim_start_date_input = st.date_input(
        "Select the starting day for the simulation",
        value=st.session_state.sim_start_date_input,
        on_change=lambda: setattr(
            st.session_state,
            "sim_start_date_input",
            st.session_state.key_sim_start_date_input.strftime("%Y-%m-%d"),
        ),
        key="key_sim_start_date_input",
        min_value="2023-01-01",
        max_value="2027-01-01",
    ).strftime("%Y-%m-%d")

    sim_start_time_input = st.time_input(
        "Select the starting time for the simulation",
        value=st.session_state.sim_start_time_input,
        on_change=lambda: setattr(
            st.session_state,
            "sim_start_time_input",
            st.session_state.key_sim_start_time_input.strftime("%H:%M"),
        ),
        key="key_sim_start_time_input",
    ).strftime("%H:%M")

    st.markdown("### Reproducibility and Variation")

    master_seed = st.number_input(
        "Set the master random seed",
        1,
        100000,
        42,
        key="key_master_seed",
        on_change=lambda: setattr(
            st.session_state, "master_seed", st.session_state.key_master_seed
        ),
    )

    st.markdown("### Other Modifiers")

    activity_duration_multiplier = st.slider(
        "Apply a multiplier to activity times",
        value=st.session_state.activity_duration_multiplier,
        max_value=2.0,
        min_value=0.7,
        on_change=lambda: setattr(
            st.session_state,
            "activity_duration_multiplier",
            st.session_state.key_activity_duration_multiplier,
        ),
        key="key_activity_duration_multiplier",
        help="""
This lengthens or shortens all generated activity times by the selected multiplier.
\n\n
For example, if a journey time of 10 minutes was generated, this would be shortened to 8 minutes if
this multiplier is set to 0.8, or lengthened to 12 minutes if the multiplier was set to 1.2.
\n\n
This can be useful for experimenting with the impact of longer or shorter activity times, or for
temporarily adjusting the model if activity times are not accurately reflecting reality.
""",
    )

    create_animation_input = st.toggle(
        "Create Animation",
        value=st.session_state.create_animation_input,
        on_change=lambda: setattr(
            st.session_state,
            "create_animation_input",
            st.session_state.key_create_animation_input,
        ),
        key="key_create_animation_input",
        disabled=True,
        help="Coming soon!",
    )

    amb_data = st.toggle(
        "Model ambulance service data",
        value=st.session_state.amb_data,
        on_change=lambda: setattr(
            st.session_state, "amb_data", st.session_state.key_amb_data
        ),
        key="key_amb_data",
        disabled=True,
        help="Coming soon!",
    )


with st.expander(get_text("additional_params_expander_title", text_df)):
    additional_params_expander()

st.divider()

with st.sidebar:
    with stylable_container(
        css_styles=f"""
                    button {{
                            background-color: {COLORSCHEME["teal"]};
                            color: white;
                            border-color: white;
                        }}
                        """,
        key="teal_buttons",
    ):
        if st.button(
            "Finished setting up parameters?\n\nClick here to go to the model page",
            icon=":material/play_circle:",
        ):
            st.switch_page("model.py")
****************************************

****************************************
app\style.css
****************************************
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap');
@import url('https://fonts.googleapis.com/icon?family=Material+Icons|Material+Icons+Outlined|Material+Symbols+Outlined');

[data-testid="stSidebar"] h1,
[data-testid="stSidebar"] h2,
[data-testid="stSidebar"] h3,
[data-testid="stSidebar"] h4,
[data-testid="stSidebar"] a,
[data-testid="stSidebar"] p,
[data-testid="stSidebar"] ul  {
    color: white
}


[data-testid="stSidebar"] ul,
[data-testid="stSidebar"] ul li,
[data-testid="stSidebar"] ul ul {
    margin-top: 0 !important;
    margin-bottom: 0 !important;
    padding-top: 0 !important;
    padding-bottom: 0 !important;
    line-height: 1.1;
}

[data-testid="stSidebar"] {
    background-color: #00205b ;
}

[data-testid="stSidebarNavViewButton"]  {
    color: white
}

[data-testid="stNavSectionHeader"]  {
    color: white
}

[data-testid="stSidebarNavLink"] span {
    color: white;
    font-family: "Poppins", sans-serif;
}

[data-testid="stTickBarMin"],
[data-testid="stTickBarMax"] {
    color: white;
    font-family: "Poppins", sans-serif;
}

* {
    font-family: "Poppins", sans-serif;
}

h1 {
    font-family: "Poppins", sans-serif;
    font-weight: 700;
}

p {
    font-family: "Poppins", sans-serif;
    font-weight: 300;
}



.block-container {
    width: 100%;
    padding: 3rem 2rem 2rem;
    min-width: auto;
    max-width: initial;
}


/* .st-emotion-cache-1inwz65 {
    color: white
} */
****************************************

****************************************
app\welcome.py
****************************************
import streamlit as st

st.set_page_config(layout="wide")

with open("app/style.css") as css:
    st.markdown(f"<style>{css.read()}</style>", unsafe_allow_html=True)

from _app_utils import get_text, get_text_sheet, COLORSCHEME
from streamlit_extras.stylable_container import stylable_container

text_df = get_text_sheet("welcome")

col1, col2 = st.columns([0.7, 0.3])

with col1:
    st.title(get_text("page_title", text_df))

with col2:
    st.image("app/assets/daa-logo.svg", width=300)

st.write(get_text("page_description", text_df))

col_nav_1, col_nav_2 = st.columns(2)

with col_nav_1:
    with stylable_container(
        css_styles=f"""
                button {{
                        background-color: {COLORSCHEME["teal"]};
                        color: white;
                    }}
                    """,
        key="green_buttons",
    ):
        if st.button(
            "Want to run a simulation of the current service?\n\nHead straight to the simulation page.",
            icon=":material/play_circle:",
        ):
            st.switch_page("model.py")


with col_nav_2:
    with stylable_container(
        css_styles=f"""
                button {{
                        background-color: {COLORSCHEME["teal"]};
                        color: white;
                        border-color: {COLORSCHEME["navy"]};
                    }}
                    """,
        key="green_buttons",
    ):
        if st.button(
            "Want to change some parameters first?\n\nHead to the setup page.",
            icon=":material/display_settings:",
        ):
            st.switch_page("setup.py")
****************************************

****************************************
app\what_is.py
****************************************
import streamlit as st

st.set_page_config(layout="wide")

with open("app/style.css") as css:
    st.markdown(f"<style>{css.read()}</style>", unsafe_allow_html=True)

from _app_utils import get_text, get_text_sheet

text_df = get_text_sheet("what_is")

col1, col2 = st.columns([0.7, 0.3])

with col1:
    st.title(get_text("page_title", text_df))

with col2:
    st.image("app/assets/daa-logo.svg", width=300)

st.caption(get_text("page_description", text_df))

tab_1, tab_2, tab_3 = st.tabs(
    [
        get_text("tab_1_name", text_df),
        get_text("tab_2_name", text_df),
        get_text("tab_3_name", text_df),
    ]
)

with tab_1:
    st.write(get_text("tab_1_content", text_df))

with tab_2:
    st.write(get_text("tab_2_content", text_df))

with tab_3:
    st.write(get_text("tab_3_content", text_df))
****************************************

****************************************
app\_app_utils.py
****************************************
import streamlit as st
import pandas as pd
import os
import subprocess
import platform
from datetime import datetime
import calendar
from air_ambulance_des.utils import (
    COLORSCHEME,
    to_military_time,
    get_rota_month_strings,
)
from streamlit_extras.stylable_container import stylable_container


def file_download_confirm():
    st.toast("File Downloaded", icon=":material/download:")


@st.cache_data
def get_text_sheet(sheet):
    return pd.read_excel("app/assets/text.xlsx", sheet_name=sheet, engine="calamine")


@st.cache_data
def get_text(reference, text_df):
    return text_df[text_df["reference"] == reference]["text"].values[0]


@st.cache_data
def get_quarto(repo_name, quarto_version="1.5.57"):
    print(f"Output of platform.processor(): {platform.processor()}")
    print(f"type:  {type(platform.processor())}")
    print("Attempting to download Quarto")
    # Download Quarto
    os.system(
        f"wget https://github.com/quarto-dev/quarto-cli/releases/download/v{quarto_version}/quarto-{quarto_version}-linux-amd64.tar.gz"
    )

    # Create directory and extract Quarto
    os.system(f"tar -xvzf quarto-{quarto_version}-linux-amd64.tar.gz")
    # Check the contents of the folder we are in
    os.system("pwd")

    # # Ensure PATH is updated in the current Python process
    # Check current path
    os.system("echo $PATH")
    # Create a folder and symlink quarto to that location
    os.system(f"mkdir -p /mount/src/{repo_name}/local/bin")
    os.system(
        f"ln -s /mount/src/{repo_name}/quarto-{quarto_version}/bin/quarto /mount/src/{repo_name}/local/bin"
    )
    # Update path
    os.system(f"echo 'export PATH=$PATH:/mount/src/{repo_name}/local/bin' >> ~/.bashrc")
    os.system("source /etc/bash.bashrc")
    # alternative method for good measure
    os.environ["PATH"] = f"/mount/src/{repo_name}/local/bin:{os.environ['PATH']}"

    # ensure path updates have propagated through
    print(os.environ["PATH"])
    # Install jupyter even if not in requirements
    os.system("python3 -m pip install jupyter")
    # Install second copy of requirements (so accessible by Quarto - can't access packages
    # that are installed as part of community cloud instance setup process)
    os.system(f"python3 -m pip install -r /mount/src/{repo_name}/requirements.txt")

    print("Trying to run 'quarto check' command")
    try:
        os.system("quarto check")
        result = subprocess.run(
            ["quarto", "check"], capture_output=True, text=True, shell=True
        )
        print(result.stdout)
        print(result.stderr)
        print("Quarto check run")
    except PermissionError:
        print("Permission error encountered when running 'quarto check'")
    except:  # noqa
        print("Other unspecified error when running quarto check")


@st.fragment
def generate_quarto_report(run_quarto_check=False):
    """
    Passed an empty placeholder, put in a download button or a disabled download
    button in the event of failure
    """
    print("Trying to generate a downloadable quarto report")
    output_dir = os.path.join(os.getcwd(), "app/outputs")
    qmd_filename = "app/air_ambulance_des_output.qmd"
    qmd_path = os.path.join(os.getcwd(), qmd_filename)
    print(f"Trying to find quarto template in {qmd_path}")
    html_filename = os.path.basename(qmd_filename).replace(".qmd", ".html")
    # html_filename = f"simulation_output_{datetime.now().strftime('%Y%m%d_%H%M')}.html"
    # print(html_filename)
    # dest_html_path = os.path.join(output_dir,f"simulation_output_{datetime.now().strftime('%H-%m-%d_%H%M')}.html")
    dest_html_path = os.path.join(output_dir, html_filename)

    # print(dest_html_path)

    try:
        if run_quarto_check:
            print("Trying to run 'quarto check' command")
            subprocess.run(["quarto", "check"])

        print("Running Quarto Render Command")

        ## forces result to be html
        result = subprocess.run(
            [
                "quarto",
                "render",
                qmd_path,
                "--to",
                "html",
                "--output-dir",
                output_dir,
                # , "--output-file"
                # , html_filename
            ],
            capture_output=True,
            text=True,
        )

        print("Quarto Render Command run succesfully")
        print(f"Destination Path: {dest_html_path}")
    except:  # noqa
        ## error message
        print("Report cannot be generated")

    if os.path.exists(dest_html_path):
        print(
            f"Destination file {dest_html_path} found in filesystem - obtaining for download"
        )
        with open(dest_html_path, "r") as f:
            html_data = f.read()

        with stylable_container(
            key="report_dl_buttons",
            css_styles=f"""
                    button {{
                            background-color: {COLORSCHEME["green"]};
                            color: white;
                            border-color: white;
                        }}
                        """,
        ):
            st.download_button(
                label="Download Report",
                data=html_data,
                file_name=html_filename,
                mime="text/html",
            )

            return "success"
    else:
        ## error message
        print("Generated file found not in filesystem")
        try:
            print(f"Report failed to generate\n\n_{result}_")
        except UnboundLocalError:
            print("Report failed to generate")

        st.button(label="Error Generating Downloadable Report", disabled=True)

        st.warning("""It has not been possible to generate a downloadable copy of the simulation outputs.
                Please speak to a developer""")

        return "failure"


def summary_sidebar(quarto_string):
    with stylable_container(
        css_styles="""
hr {
    border-color: #a6093d;
    background-color: #a6093d;
    color: #a6093d;
    height: 1px;
  }
""",
        key="hr",
    ):
        st.divider()
    if "number_of_runs_input" in st.session_state:
        with stylable_container(
            key="green_buttons",
            css_styles=f"""
                    button {{
                            background-color: {COLORSCHEME["teal"]};
                            color: white;
                            border-color: white;
                        }}
                        """,
        ):
            if st.button(
                "Want to change some parameters? Click here.",
                type="primary",
                icon=":material/display_settings:",
            ):
                st.switch_page("setup.py")
        st.subheader("Model Input Summary")
        quarto_string += "## Model Input Summary\n\n"

        rota_start_end_months = pd.read_csv("actual_data/rota_start_end_months.csv")

        (
            start_month_num,
            end_month_num,
            summer_start_date,
            summer_end_date,
            summer_end_day,
            winter_start_date,
            winter_end_date,
            winter_end_day,
        ) = get_rota_month_strings(
            start_month=rota_start_end_months[
                rota_start_end_months["what"] == "summer_start_month_string"
            ]["month"].values[0],
            end_month=rota_start_end_months[
                rota_start_end_months["what"] == "summer_end_month_string"
            ]["month"].values[0],
        )

        summer_string = f"☀️ Summer rota runs from {summer_start_date} to {summer_end_date} (inclusive)"
        winter_string = f"❄️ Winter rota runs from {winter_start_date} to {winter_end_date} (inclusive)"

        st.write(summer_string)
        st.write(winter_string)

        quarto_string += "\n\n"
        quarto_string += summer_string
        quarto_string += "\n"
        quarto_string += winter_string
        quarto_string += "\n\n"

        num_helos_string = f"Number of Helicopters: {st.session_state.num_helicopters}"
        quarto_string += "### "
        quarto_string += num_helos_string
        quarto_string += "\n\n"
        st.write(f"### {num_helos_string}")

        rota = (
            pd.read_csv("actual_data/HEMS_ROTA.csv")
            .merge(
                pd.read_csv("actual_data/callsign_registration_lookup.csv"),
                on="callsign",
                how="left",
            )
            .merge(
                pd.read_csv("actual_data/service_schedules_by_model.csv"),
                on=["model", "vehicle_type"],
                how="left",
            )
        )

        # Group by helicopter resources
        helicopters = rota[rota["vehicle_type"] == "helicopter"]
        grouped_heli = helicopters.groupby("callsign")

        quarto_string = ""

        for callsign, group in grouped_heli:
            model = group.iloc[0]["model"]
            header = f"#### {callsign} is an {model} and\n"
            body = ""
            for _, row in group.iterrows():
                summer = f"\n- runs a {row['category']} service from {to_military_time(row['summer_start'])} to {to_military_time(row['summer_end'])} in summer"
                winter = f"\n- runs a {row['category']} service from {to_military_time(row['winter_start'])} to {to_military_time(row['winter_end'])} in winter"
                body += f"    {summer}\n    {winter}\n\n"
            result = header + body + "\n"
            quarto_string += result
            st.caption(result)

        # Grouping callsign groups
        callsign_group_counts = rota["callsign_group"].value_counts().reset_index()
        callsign_group_counts.columns = ["callsign_group", "count"]

        extra_cars_only = list(
            callsign_group_counts[callsign_group_counts["count"] == 1][
                "callsign_group"
            ].values
        )
        backup_cars_only = list(
            callsign_group_counts[callsign_group_counts["count"] > 1][
                "callsign_group"
            ].values
        )

        # Backup cars
        backup_cars = rota[
            rota["callsign_group"].isin(backup_cars_only)
            & (rota["vehicle_type"] != "helicopter")
        ]
        grouped_backup = backup_cars.groupby("callsign")

        quarto_string += "\n\n### Backup Cars\n\n"

        for callsign, car_group in grouped_backup:
            model = car_group.iloc[0]["model"]
            group_id = car_group.iloc[0]["callsign_group"]

            heli_group = helicopters[helicopters["callsign_group"] == group_id]

            # Compare car and heli rotas for group
            identical = (
                car_group[
                    [
                        "summer_start",
                        "summer_end",
                        "winter_start",
                        "winter_end",
                        "category",
                    ]
                ]
                .reset_index(drop=True)
                .equals(
                    heli_group[
                        [
                            "summer_start",
                            "summer_end",
                            "winter_start",
                            "winter_end",
                            "category",
                        ]
                    ].reset_index(drop=True)
                )
            )

            if identical:
                message = f"The backup car {callsign} in group {group_id} has the same rota as the helicopter.\n\n"
                quarto_string += message
                st.caption(message)
            else:
                message = f"The backup car {callsign} in group {group_id} has a different rota to the helicopter.\n\n"
                quarto_string += message
                st.caption(message)
                header = f"#### {callsign} is a {model} and\n"
                body = ""
                for _, row in car_group.iterrows():
                    summer = f"\n- runs a {row['category']} service from {to_military_time(row['summer_start'])} to {to_military_time(row['summer_end'])} in summer"
                    winter = f"\n- runs a {row['category']} service from {to_military_time(row['winter_start'])} to {to_military_time(row['winter_end'])} in winter"
                    body += f"    {summer}\n    {winter}\n\n"
                result = header + body + "\n"
                quarto_string += result
                st.caption(result)

        # Extra (non-backup) cars
        extra_cars = rota[
            rota["callsign_group"].isin(extra_cars_only)
            & (rota["vehicle_type"] != "helicopter")
        ]
        grouped_extra = extra_cars.groupby("callsign")

        num_cars_string = (
            f"Number of **Extra** (non-backup) Cars: {st.session_state.num_cars}"
        )
        quarto_string += "\n\n### " + num_cars_string + "\n\n"
        st.write(f"### {num_cars_string}")

        for callsign, group in grouped_extra:
            model = group.iloc[0]["model"]
            header = f"#### {callsign} is a {model} and\n"
            body = ""
            for _, row in group.iterrows():
                summer = f"\n- runs a {row['category']} service from {to_military_time(row['summer_start'])} to {to_military_time(row['summer_end'])} in summer"
                winter = f"\n- runs a {row['category']} service from {to_military_time(row['winter_start'])} to {to_military_time(row['winter_end'])} in winter"
                body += f"    {summer}\n    {winter}\n\n"
            result = header + body + "\n"
            quarto_string += result
            st.caption(result)

        if st.session_state.demand_adjust_type == "Overall Demand Adjustment":
            if st.session_state.overall_demand_mult == 100:
                demand_adjustment_string = "Demand is based on historically observed demand with no adjustments."
            elif st.session_state.overall_demand_mult < 100:
                demand_adjustment_string = f"Modelled demand is {100 - st.session_state.overall_demand_mult}% less than historically observed demand."
            elif st.session_state.overall_demand_mult > 100:
                demand_adjustment_string = f"Modelled demand is {st.session_state.overall_demand_mult - 100}% more than historically observed demand."

            st.write(demand_adjustment_string)

            quarto_string += "\n\n### Simulation Parameters\n\n"
            quarto_string += demand_adjustment_string
            quarto_string += "\n\n"

        # TODO: Add this in if we decide seasonal demand adjustment is a thing that's wanted
        elif st.session_state.demand_adjust_type == "Per Season Demand Adjustment":
            pass

        elif st.session_state.demand_adjust_type == "Per AMPDS Code Demand Adjustment":
            pass

        else:
            st.error(
                "TELL A DEVELOPER: Check Conditional Code for demand modifier in model.py"
            )

        with stylable_container(
            css_styles="""
hr {
    border-color: #a6093d;
    background-color: #a6093d;
    color: #a6093d;
    height: 1px;
  }
""",
            key="hr",
        ):
            st.divider()

        replication_string = f"The model will run {st.session_state.number_of_runs_input} replications of {st.session_state.sim_duration_input} days, starting from {datetime.strptime(st.session_state.sim_start_date_input, '%Y-%m-%d').strftime('%A %d %B %Y')}."

        st.write(replication_string)
        quarto_string += replication_string.replace("will run", "ran")
        quarto_string += "\n\n"

        quarto_string += f"Activity durations are modified by a factor of {st.session_state.activity_duration_multiplier}\n\n"

        if st.session_state.create_animation_input:
            st.write("An animated output will be created.")
            st.info("Turn off this option if the model is running very slowly!")
        else:
            st.write("No animated output will be created.")

        if st.session_state.amb_data:
            st.write("SWAST Ambulance Activity will be modelled.")
        else:
            st.write("SWAST Ambulance Activity will not be modelled.")
****************************************

****************************************
app\_state_control.py
****************************************
import streamlit as st
from datetime import datetime, date
import pandas as pd
import platform
# Note: following
# Dmitri's approach here to avoid issues with session state setting
# https://discuss.streamlit.io/t/mini-tutorial-initializing-widget-values-and-getting-them-to-stick-without-double-presses/31391/6

DEFAULT_INPUTS = {
    "num_helicopters": 2,
    "num_cars": 1,
    "demand_adjust_type": "Overall Demand Adjustment",
    # "overall_demand_mult": 100,
    "overall_demand_mult": 100,
    "spring_demand_mult": 100,
    "summer_demand_mult": 100,
    "autumn_demand_mult": 100,
    "winter_demand_mult": 100,
    "amb_data": False,
    "sim_duration_input": 365,
    "warm_up_duration": 0,
    "number_of_runs_input": 10,
    "create_animation_input": False,
    # "sim_start_date_input": date.today().strftime('%Y-%m-%d'),
    "sim_start_date_input": "2023-01-01",
    "sim_start_time_input": "08:00",
    "scenario_1_set": False,
    "scenario_2_set": False,
    "rota_initialised": False,
    # "activity_duration_multiplier": 1.0
    "activity_duration_multiplier": 1.0,
    "master_seed": 42,
    "debugging_messages_to_log": False,
    "summer_start_month_index": 3,
    "summer_end_month_index": 9,
}

# Adjust some parameters depending on whether it is running
# locally on a users computer (in which case parallel processing
# can be invoked) or on the Streamlit community cloud platform

# This check is a way to guess whether it's running on
# Streamlit community cloud
if platform.processor() == "":
    ADDITIONAL_INPUTS = {"sim_duration_input": 365 * 2, "number_of_runs_input": 5}

else:
    ADDITIONAL_INPUTS = {"sim_duration_input": 365 * 2, "number_of_runs_input": 12}

DEFAULT_INPUTS.update(ADDITIONAL_INPUTS)


# def setup_state():
#     for session_state_key, session_state_default_value in DEFAULT_INPUTS.items():
#         if session_state_key in st.session_state:
#             st.session_state[session_state_key] = st.session_state[session_state_key]
#         # else:
#         #     st.session_state[session_state_key] = session_state_default_value


def setup_state():
    if "rota_initialised" not in st.session_state:
        # Set the rota back to defaults, overwriting any changes made
        # the last time the app was run
        base_rota = pd.read_csv("actual_data/HEMS_ROTA_DEFAULT.csv")
        base_rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)
        st.session_state.rota_initialised = True

    for session_state_key, session_state_default_value in DEFAULT_INPUTS.items():
        if session_state_key not in st.session_state:
            st.session_state[session_state_key] = session_state_default_value


def reset_to_defaults(reset_session_state=True, reset_csvs=True, notify=True):
    if reset_session_state:
        for session_state_key, session_state_default_value in DEFAULT_INPUTS.items():
            st.session_state[session_state_key] = session_state_default_value

    if reset_csvs:
        callsign_registration_lookup = pd.read_csv(
            "actual_data/callsign_registration_lookup_DEFAULT.csv"
        )
        callsign_registration_lookup.to_csv(
            "actual_data/callsign_registration_lookup.csv", index=False
        )

        models = pd.read_csv("actual_data/service_schedules_by_model_DEFAULT.csv")
        models.to_csv("actual_data/service_schedules_by_model.csv", index=False)

        base_rota = pd.read_csv("actual_data/HEMS_ROTA_DEFAULT.csv")
        base_rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        rota_start_end_months = pd.read_csv(
            "actual_data/rota_start_end_months_DEFAULT.csv"
        )
        rota_start_end_months.to_csv(
            "actual_data/rota_start_end_months.csv", index=False
        )

        service_history = pd.read_csv("actual_data/service_history_DEFAULT.csv")
        service_history.to_csv("actual_data/service_history.csv", index=False)

    if notify:
        st.toast(
            "All parameters have been reset to the default values",
            icon=":material/history:",
        )


# TODO: Implement action
def set_scenario_1_params():
    st.toast(
        "Scenario 1 has been set up to use the current parameters",
        icon=":material/looks_one:",
    )

    # TODO: Implement action

    st.session_state.scenario_1_set = True


# TODO: Implement action
def set_scenario_2_params():
    st.toast(
        "Scenario 2 has been set up to use the current parameters",
        icon=":material/looks_two:",
    )

    # TODO: Implement action

    st.session_state.scenario_2_set = True
****************************************

****************************************
app\assets\glossary.csv
****************************************
Term,Definition
Discrete Event Simulation,"Discrete Event Simulation (DES) is a branch of computer simulation that allows us to explore resourcing and waits in complex systems. <br/><br/>By defining our resources - the helicopters and cars operated by the service - and generating representative calls based on historical data, a computer representation of the system can be generated.<br/><br/> Discrete Event Simulation (DES) is a branch of simulation particularly well suited to healthcare systems where we are interested in being able to explore the impact of changes in demand and resourcing - such as additional vehicles or changes to rotas. The name simply refers to how the activities individuals within the simulation undertake - the <b>events</b> - are processed by the computer."
Parameter,"A parameter is one of the things we can change within the model.<br/><br/>The model supports changing a range of parameters, such as the rotas used by vehicles, the model of helicopters operated, and so on."
Run,"A run is a single iteration of the simulation, lasting for the number of days defined in the inputs and using the parameters that have been selected by the user, or the default parameters. One run of the simulation can be thought of a single version of how the future may pan out."
Trial,"A trial referes to two or more - and usually ten or more! - runs of the simulation, which are executed with the same parameters, but with minor variations in areas that can be affected by random chance, such as the precise time between calls requiring HEMS intervention, the proportion of jobs stood down, how long travel time and on scene time is, and so on.<br/><br/>By having multiple runs within a trial, we get to see many versions of how the future may be likely to pan out, giving us a better idea of whether the resourcing and rotas selected will lead to the service being able to meet the demand on it."
****************************************

****************************************
app\assets\minify.py
****************************************
from scour.scour import start as scour, parse_args as scour_args, getInOut as scour_io

def scour_svg(infilename,outfilename):
    options = scour_args()
    options.infilename = infilename
    options.outfilename = outfilename
    (input, output) = scour_io(options)
    scour(options, input, output)

if __name__ == '__main__':
    infilename = 'app/assets/daa-logo.svg'
    outfilename = 'app/assets/daa-logo_scoured.svg'
    scour_svg(infilename,outfilename)
****************************************

****************************************
app\assets\svg_to_data_url.py
****************************************
import urllib.parse

def svg_to_data_url(svg_path):
    with open(svg_path, "r", encoding="utf-8") as file:
        svg_content = file.read()
    encoded_svg = urllib.parse.quote(svg_content)
    return f"data:image/svg+xml,{encoded_svg}"

print(svg_to_data_url("app/assets/daa-logo_scoured.svg"))
****************************************

****************************************
app\fig_outputs\quarto_text.txt
****************************************
# Key Metrics

*All Metrics are averaged across 5 simulation runs*

## Calls Not Attended

Across these runs of the simulation, on average a DAAT Resource was unable to attend 115 of 840 (13.7%) calls

These are the 'missed' calls where no DAAT resource was available. This could be due to no resource being on shift, or all resources being tasked to other jobs at the time of the call.## Missed Jobs


    The simulation estimates that, with the proposed conditions, there would be - on average, per year - roughly

    - **17 critical care** jobs that would be missed due to no resource being available  (***:green[-1]** from historical*), with an estimated range of 12 to 22

    - **33 enhanced care** jobs that would be missed due to no resource being available (***:green[-3]** from historical*) with an estimated range of 27 to 42

    - **299 jobs with no predicted CC or EC intervention** that would be missed due to no resource being available (***:red[+6]** from historical*) with an estimated range of 253 to 336

        - of these missed regular jobs, **51** may have benefitted from the attendance of a helicopter (***:green[-4]** from historical*)
                            ### Historical Missed Jobs


    As CC, EC and helicopter benefit can only be determined for attended jobs, we cannot estimate the ratio for previously missed jobs.
    However, the simulation estimates that, with historical rotas and vehicles, there would be - on average, per year - roughly

    - 18 critical care jobs that would be missed due to no resource being available *(estimated range of 12 to 22)*
    - 36 enhanced care jobs that would be missed due to no resource being available *(estimated range of 27 to 42)*
    - 293 jobs with no predicted CC or EC intervention that would be missed due to no resource being available *(estimated range of 253 to 336)*
        - of these missed regular jobs, 55 may have benefitted from the attendance of a helicopter *(estimated range of 45 to 68)*
                            ## Suboptimal Resource Allocation to Jobs


                The simulation estimates that, with the proposed conditions, there would be - on average, per year - roughly

                - **41 critical care (CC)** jobs that would be sent an enhanced care (EC) resource (***:green[-13]** from historical*), with an estimated range of 27 to 55

                - **69 jobs that would benefit from a helicopter** that would be sent a car (***:red[+4]** from historical*) with an estimated range of 46 to 85
                ## Suboptimal Resource Allocation to Jobs - Historical Comparison


                As CC, EC and helicopter benefit can only be determined for attended jobs, we cannot estimate the ratio for previously missed jobs.
                However, the simulation estimates that, with historical rotas and vehicles, there would be - on average, per year - roughly

                - **54 critical care (CC)** jobs that would be sent an enhanced care (EC) resource, with an estimated range of 46 to 65

                - **66 jobs that would benefit from a helicopter** that would be sent a car, with an estimated range of 55 to 76
                

## Resource Utilisation

Average simulated H70 Utilisation was 19.5%

*The historical average utilisation of H70 was 18.0%*



---



Average simulated H71 Utilisation was 13.0%

*The historical average utilisation of H71 was 9.8%*



---



Average simulated CC70 Utilisation was 5.6%

*The historical average utilisation of CC70 was 6.7%*



---



Average simulated CC71 Utilisation was 3.4%

*The historical average utilisation of CC71 was 3.1%*



---



Average simulated CC72 Utilisation was 10.4%

*The historical average utilisation of CC72 was 9.5%*



---
****************************************

****************************************
app\inputs\README.md
****************************************
This file is currently not in use.
****************************************

****************************************
assets\style.css
****************************************
body {
  font-family: Helvetica, Arial, sans-serif;
  font-size: 12px;
  /* do not increase min-width as some may use split screens */
  min-width: 800px;
  color: #999;
}

h1 {
  font-size: 24px;
  color: black;
}

h2 {
  font-size: 16px;
  color: black;
}

p {
  color: black;
}

a {
  color: #999;
}

table {
  border-collapse: collapse;
}

/******************************
 * SUMMARY INFORMATION
 ******************************/
#environment td {
  padding: 5px;
  border: 1px solid #e6e6e6;
  vertical-align: top;
}
#environment tr:nth-child(odd) {
  background-color: #f6f6f6;
}
#environment ul {
  margin: 0;
  padding: 0 20px;
}

/******************************
 * TEST RESULT COLORS
 ******************************/
span.passed,
.passed .col-result {
  color: green;
}

span.skipped,
span.xfailed,
span.rerun,
.skipped .col-result,
.xfailed .col-result,
.rerun .col-result {
  color: orange;
}

span.error,
span.failed,
span.xpassed,
.error .col-result,
.failed .col-result,
.xpassed .col-result {
  color: red;
}

.col-links__extra {
  margin-right: 3px;
}

/******************************
 * RESULTS TABLE
 *
 * 1. Table Layout
 * 2. Extra
 * 3. Sorting items
 *
 ******************************/
/*------------------
 * 1. Table Layout
 *------------------*/
#results-table {
  border: 1px solid #e6e6e6;
  color: #999;
  font-size: 12px;
  width: 100%;
}
#results-table th,
#results-table td {
  padding: 5px;
  border: 1px solid #e6e6e6;
  text-align: left;
}
#results-table th {
  font-weight: bold;
}

/*------------------
 * 2. Extra
 *------------------*/
.logwrapper {
  max-height: 230px;
  overflow-y: scroll;
  background-color: #e6e6e6;
}
.logwrapper.expanded {
  max-height: none;
}
.logwrapper.expanded .logexpander:after {
  content: "collapse [-]";
}
.logwrapper .logexpander {
  z-index: 1;
  position: sticky;
  top: 10px;
  width: max-content;
  border: 1px solid;
  border-radius: 3px;
  padding: 5px 7px;
  margin: 10px 0 10px calc(100% - 80px);
  cursor: pointer;
  background-color: #e6e6e6;
}
.logwrapper .logexpander:after {
  content: "expand [+]";
}
.logwrapper .logexpander:hover {
  color: #000;
  border-color: #000;
}
.logwrapper .log {
  min-height: 40px;
  position: relative;
  top: -50px;
  height: calc(100% + 50px);
  border: 1px solid #e6e6e6;
  color: black;
  display: block;
  font-family: "Courier New", Courier, monospace;
  padding: 5px;
  padding-right: 80px;
  white-space: pre-wrap;
}

div.media {
  border: 1px solid #e6e6e6;
  float: right;
  height: 240px;
  margin: 0 5px;
  overflow: hidden;
  width: 320px;
}

.media-container {
  display: grid;
  grid-template-columns: 25px auto 25px;
  align-items: center;
  flex: 1 1;
  overflow: hidden;
  height: 200px;
}

.media-container--fullscreen {
  grid-template-columns: 0px auto 0px;
}

.media-container__nav--right,
.media-container__nav--left {
  text-align: center;
  cursor: pointer;
}

.media-container__viewport {
  cursor: pointer;
  text-align: center;
  height: inherit;
}
.media-container__viewport img,
.media-container__viewport video {
  object-fit: cover;
  width: 100%;
  max-height: 100%;
}

.media__name,
.media__counter {
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  flex: 0 0 25px;
  align-items: center;
}

.collapsible td:not(.col-links) {
  cursor: pointer;
}
.collapsible td:not(.col-links):hover::after {
  color: #bbb;
  font-style: italic;
  cursor: pointer;
}

.col-result {
  width: 130px;
}
.col-result:hover::after {
  content: " (hide details)";
}

.col-result.collapsed:hover::after {
  content: " (show details)";
}

#environment-header h2:hover::after {
  content: " (hide details)";
  color: #bbb;
  font-style: italic;
  cursor: pointer;
  font-size: 12px;
}

#environment-header.collapsed h2:hover::after {
  content: " (show details)";
  color: #bbb;
  font-style: italic;
  cursor: pointer;
  font-size: 12px;
}

/*------------------
 * 3. Sorting items
 *------------------*/
.sortable {
  cursor: pointer;
}
.sortable.desc:after {
  content: " ";
  position: relative;
  left: 5px;
  bottom: -12.5px;
  border: 10px solid #4caf50;
  border-bottom: 0;
  border-left-color: transparent;
  border-right-color: transparent;
}
.sortable.asc:after {
  content: " ";
  position: relative;
  left: 5px;
  bottom: 12.5px;
  border: 10px solid #4caf50;
  border-top: 0;
  border-left-color: transparent;
  border-right-color: transparent;
}

.hidden, .summary__reload__button.hidden {
  display: none;
}

.summary__data {
  flex: 0 0 550px;
}
.summary__reload {
  flex: 1 1;
  display: flex;
  justify-content: center;
}
.summary__reload__button {
  flex: 0 0 300px;
  display: flex;
  color: white;
  font-weight: bold;
  background-color: #4caf50;
  text-align: center;
  justify-content: center;
  align-items: center;
  border-radius: 3px;
  cursor: pointer;
}
.summary__reload__button:hover {
  background-color: #46a049;
}
.summary__spacer {
  flex: 0 0 550px;
}

.controls {
  display: flex;
  justify-content: space-between;
}

.filters,
.collapse {
  display: flex;
  align-items: center;
}
.filters button,
.collapse button {
  color: #999;
  border: none;
  background: none;
  cursor: pointer;
  text-decoration: underline;
}
.filters button:hover,
.collapse button:hover {
  color: #ccc;
}

.filter__label {
  margin-right: 10px;
}
****************************************

****************************************
checklists\README.md
****************************************

****************************************

****************************************
checklists\STARS\STARS.qmd
****************************************
---
title: STARS
toc: true
---

## Essential Components


| Requirement            | Requirement Information (Source: <https://des.hsma.co.uk/stars.html>)                                                                                                                                                                                                                                                                                                                                                                                                         | Details                                                                                                                                                                                                                                                  |

| Open licence           | Before sharing code, it’s important to choose an appropriate open-source licence. **A licence tells others how they can use, modify or share your work**. Without a licence, you retain exclusive copyright, and others would not be able to legally reuse the model.                                                                                                                                                                                                         | The code is licenced under the GNU General Plublic License V3.0.                                                                                                                                                                                         |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | This copyleft licence confers permissions including but not limited to commercial use, modification and distribution.                                                                                                                                    |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | The licence file is available in the repository here: <https://github.com/RichardPilbery/DAA_DES/blob/main/LICENSE>                                                                                                                                      |

| Dependency management  | To make sure your code runs correctly for others (or for yourself in the future), you need to list the **required software and versions**. Without this, users may face errors due to missing dependencies.                                                                                                                                                                                                                                                                   | A requirements.txt file is provided at <https://github.com/RichardPilbery/DAA_DES/blob/main/requirements.txt>                                                                                                                                            |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | In Python, common tools for managing this are:                                                                                                                                                                                                                                                                                                                                                                                                                                | Additional requirements, such as the recommended/tested versions of Quarto and R, are detailed in the README.md.                                                                                                                                         |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | -   **Pip virtual environments** with a `requirements.txt` file.                                                                                                                                                                                                                                                                                                                                                                                                              |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | -   **Conda environments** with a `environment.yaml/yml` file.                                                                                                                                                                                                                                                                                                                                                                                                                |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | -   **Poetry** with a `pyproject.toml` file.                                                                                                                                                                                                                                                                                                                                                                                                                                  |                                                                                                                                                                                                                                                          |

| Use FOSS languages     | FOSS provides *freedom*: it grants users the rights to adapt and share copies of their model however they choose. Python is an example of a FOSS language.                                                                                                                                                                                                                                                                                                                    | The model is written in Python.                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | Some wrangling code is written in R.                                                                                                                                                                                                                     |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | Some Microsoft Excel xlsx files are used for compatibility reasons and ease of use, with no FOSS alternative being able to fulfil the role in this instance. These can be opened with FOSS software such as [LibreOffice](https://www.libreoffice.org/). |

| Minimum documentation  | At a minimum, you should include some documentation alongside your model that describes:                                                                                                                                                                                                                                                                                                                                                                                      | A model README is provided here: <https://github.com/RichardPilbery/DAA_DES/blob/main/README.md>                                                                                                                                                         |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | 1.  What the model does.                                                                                                                                                                                                                                                                                                                                                                                                                                                      |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | 2.  How to install and run the model to obtain results.                                                                                                                                                                                                                                                                                                                                                                                                                       |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | 3.  How to vary parameters to run new experiments.                                                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | This can be done easily using a `README.md` file. This is a markdown file stored in the root of your repository.                                                                                                                                                                                                                                                                                                                                                              |                                                                                                                                                                                                                                                          |

| ORCID                  | An **ORCID** is a free, unique, persistent ID that identifies and links authors to their research. It ensures that any outputs and publications are correctly attributed to you.                                                                                                                                                                                                                                                                                              | Contributor ORCIDs are provided in <https://github.com/RichardPilbery/DAA_DES/tree/main?tab=readme-ov-file#contributors>                                                                                                                                 |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | It is recommended to include your ORCID in the `README.md`                                                                                                                                                                                                                                                                                                                                                                                                                    |                                                                                                                                                                                                                                                          |

| Citation information   | Including citation instructions makes it easier for others to reference and give credit to your model. Platforms like GitHub support `CITATION.cff`, which are files that contain details like author names, version, and links to the original work.                                                                                                                                                                                                                         | A citation file is provided at <https://github.com/RichardPilbery/DAA_DES/blob/main/CITATION.cff>                                                                                                                                                        |

| Remote code repository | Remote code repositories like **GitHub, GitLab, and Bitbucket** help manage and share code.                                                                                                                                                                                                                                                                                                                                                                                   | The core repository is hosted here: <https://github.com/RichardPilbery/DAA_DES>                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | -   They provide **version control**, allowing developers to track changes, revert to previous versions, and collaborate through branching.                                                                                                                                                                                                                                                                                                                                   | There is also a fork here, which is the current source for the hosted web app and may be used for some development work: <https://github.com/Bergam0t/DAA_DES>                                                                                           |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | -   Users can **clone** a repository to use a model and pull updates as improvements are made.                                                                                                                                                                                                                                                                                                                                                                                |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        | -   Features like **issues** (for discussion and bug tracking) and **releases** (for tagging stable versions) make collaboration easier.                                                                                                                                                                                                                                                                                                                                      |                                                                                                                                                                                                                                                          |

| Open science archive   | To ensure simulation models remain accessible over time, they should be stored in open science archives like [Zenodo](https://zenodo.org/), [Figshare](https://figshare.com/), and the [Open Science Framework](https://osf.io/). These platforms provide **DOIs (Digital Object Identifiers)** for citation and follow principles that guarantee long-term storage and discoverability. Unlike GitHub, which can change or be deleted, archives preserve models permanently. | An Open science archive is currently available here, though note that this currently points towards the fork, not the original repository <https://doi.org/10.5281/zenodo.15555520>                                                                      |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                          |
|                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | These details will be updated with the DOI for the version of the model relevant to any publications.                                                                                                                                                    |


## Optional Components


| Requirement               | Requirement Information (Source: <https://des.hsma.co.uk/stars.html>)                                                                                                                                                                                                                                                                                                                      | Details                                                                                                                                                                                                                                                                                                                        |

| Enhanced Documentation    | Going beyond the minimum documentation requirements, good documentation should include:                                                                                                                                                                                                                                                                                                    | Enhanced documentation is published at <https://bergam0t.quarto.pub/air-ambulance-simulation/>, containing some of the following:                                                                                                                                                                                              |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   A plain-language summary of the project context and model.                                                                                                                                                                                                                                                                                                                             | \[ \] A plain-language summary of the project context and model.                                                                                                                                                                                                                                                               |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   Licence and citation details.                                                                                                                                                                                                                                                                                                                                                          | \[x\] Licence and citation details.                                                                                                                                                                                                                                                                                            |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   Contribution instructions.                                                                                                                                                                                                                                                                                                                                                             | \[ \] Contribution instructions.                                                                                                                                                                                                                                                                                               |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   Installation instructions.                                                                                                                                                                                                                                                                                                                                                             | \[ \] Installation instructions.                                                                                                                                                                                                                                                                                               |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   A structured code walk through of the model.                                                                                                                                                                                                                                                                                                                                           | \[ \] A structured code walk through of the model.                                                                                                                                                                                                                                                                             |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   Documentation of the modelling cycle using TRAnsparent and Comprehensive model Evaluation (TRACE) ([Ayllón et al. (2021)](https://doi.org/10.1016/j.envsoft.2020.104932)).                                                                                                                                                                                                             | \[ \] Documentation of the modelling cycle using TRAnsparent and Comprehensive model Evaluation (TRACE) ([Ayllón et al. (2021)](https://doi.org/10.1016/j.envsoft.2020.104932)).                                                                                                                                               |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   Annotated simulation reporting guidelines (e.g. [STRESS-DES](https://des.hsma.co.uk/stress_des.html)).                                                                                                                                                                                                                                                                                 | \[ \] Annotated simulation reporting guidelines (e.g. [STRESS-DES](https://des.hsma.co.uk/stress_des.html)).                                                                                                                                                                                                                   |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   Clear description of model validation including its intended purpose.                                                                                                                                                                                                                                                                                                                  | \[ \] Clear description of model validation including its intended purpose.                                                                                                                                                                                                                                                    |

| Documentation Hosting     | Services like **GitHub Pages, GitLab Pages, BitBucket Cloud, and Quarto Pub** can host documentation websites for free.                                                                                                                                                                                                                                                                    | Basic documentation is hosted at <https://richardpilbery.github.io/DAA_DES/>.                                                                                                                                                                                                                                                  |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            | Enhanced documentation is hosted at <https://bergam0t.quarto.pub/air-ambulance-simulation/>                                                                                                                                                                                                                                    |

| Online Coding Environment | There are tools which enable users to run code online without any installation or downloads. A FOSS example for jupyter notebooks is **BinderHub** ([https://mybinder.org](https://mybinder.org/)) which creates an online Jupyter environment from a public GitHub or GitLab repository. It packages the code and any dependencies into a container, from which the notebooks can be run. | A devcontainer.json file has been provided in the .devcontainer folder. This enables opening up the development environment in Github Codespaces. To access this, ensure you are logged into GitHub, then look for the green 'Code' button at the top of this repository. Click on this and select 'Create codespace on main'. |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            | You can find out more about codespaces at [github.com/features/codespaces](https://github.com/features/codespaces).                                                                                                                                                                                                            |

| Model Interface           | Turning your model into an **application** will make it more accessible to non-technical users who may be unfamiliar with coding. Python options include:                                                                                                                                                                                                                                  | A model interface is provided using Streamlit.                                                                                                                                                                                                                                                                                 |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   **Streamlit** (<https://streamlit.io/>).                                                                                                                                                                                                                                                                                                                                               | The web app can be run using the command                                                                                                                                                                                                                                                                                       |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   **Shiny for Python** (<https://shiny.posit.co/py/>).                                                                                                                                                                                                                                                                                                                                   | `streamlit run app/app.py`                                                                                                                                                                                                                                                                                                     |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           | -   **Plotly Dash** (<https://dash.plotly.com/>).                                                                                                                                                                                                                                                                                                                                          |                                                                                                                                                                                                                                                                                                                                |

| Web App Hosting           | Services like **Streamlit Community Cloud** and **ShinyApps** offer free hosting tiers which can be used to deploy your **web app**, making it freely accessible via a website link.                                                                                                                                                                                                       | The web app can also be accessed without needing to install anything at [daa-des-demo.streamlit.app/](https://daa-des-demo.streamlit.app/).                                                                                                                                                                                    |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                |
|                           |                                                                                                                                                                                                                                                                                                                                                                                            | However, not that this will run more slowly and will complete fewer runs by default due to limitations of the hosting platform; it is recommended to download the app and run it locally if you are not just looking to get an idea of the app's capabilities.                                                                 |

****************************************

****************************************
checklists\STRESS-DES\STRESS_DES.qmd
****************************************
---
title: STRESS-DES
toc: true
---

Coming soon!
****************************************

****************************************
distribution_data\activity_time_distributions.txt
****************************************
[{"vehicle_type": "helicopter", "time_type": "time_allocation", "best_fit": {"cauchy": {"loc": 7.268071565898762, "scale": 3.741500833412361}}, "hems_result": "Patient Treated but not conveyed by HEMS", "n": 689}, {"vehicle_type": "car", "time_type": "time_allocation", "best_fit": {"cauchy": {"loc": 6.3636433068749305, "scale": 3.6854054978956032}}, "hems_result": "Patient Treated but not conveyed by HEMS", "n": 571}, {"vehicle_type": "helicopter", "time_type": "time_mobile", "best_fit": {"cauchy": {"loc": 4.9301534079518206, "scale": 1.2369041076098695}}, "hems_result": "Patient Treated but not conveyed by HEMS", "n": 696}, {"vehicle_type": "car", "time_type": "time_mobile", "best_fit": {"gamma": {"a": 0.3427603409704766, "loc": -2.7965109416445944e-28, "scale": 1.5408578212660908}}, "hems_result": "Patient Treated but not conveyed by HEMS", "n": 575}, {"vehicle_type": "helicopter", "time_type": "time_to_scene", "best_fit": {"pearson3": {"skew": 0.8861205526401765, "loc": 19.248267251995635, "scale": 7.759803178441663}}, "hems_result": "Patient Treated but not conveyed by HEMS", "n": 688}, {"vehicle_type": "car", "time_type": "time_to_scene", "best_fit": {"chi2": {"df": 7.317927002242668, "loc": -1.3702913268737775, "scale": 2.7199533186104934}}, "hems_result": "Patient Treated but not conveyed by HEMS", "n": 571}, {"vehicle_type": "helicopter", "time_type": "time_on_scene", "best_fit": {"pearson3": {"skew": 1.0990665001060855, "loc": 30.464793631421756, "scale": 17.726457662792853}}, "hems_result": "Patient Treated but not conveyed by HEMS", "n": 908}, {"vehicle_type": "car", "time_type": "time_on_scene", "best_fit": {"weibull_min": {"c": 1.4057076981802024, "loc": 1.3244164547151493, "scale": 29.321828782347232}}, "hems_result": "Patient Treated but not conveyed by HEMS", "n": 427}, {"vehicle_type": "helicopter", "time_type": "time_to_clear", "best_fit": {"lognorm": {"s": 0.20080578552267198, "loc": -54.082977606953136, "scale": 90.91021776013201}}, "hems_result": "Patient Treated but not conveyed by HEMS", "n": 515}, {"vehicle_type": "car", "time_type": "time_to_clear", "best_fit": {"triang": {"c": 0.33597176971164044, "loc": -0.7912529261206238, "scale": 91.64833399937963}}, "hems_result": "Patient Treated but not conveyed by HEMS", "n": 406}, {"vehicle_type": "helicopter", "time_type": "time_allocation", "best_fit": {"cauchy": {"loc": 8.910337117202229, "scale": 6.728551243622893}}, "hems_result": "Patient Conveyed by HEMS", "n": 431}, {"vehicle_type": "car", "time_type": "time_allocation", "best_fit": {"cauchy": {"loc": 7.037164102048984, "scale": 3.4415999406846303}}, "hems_result": "Patient Conveyed by HEMS", "n": 18}, {"vehicle_type": "helicopter", "time_type": "time_mobile", "best_fit": {"cauchy": {"loc": 4.810262127807746, "scale": 1.4197743125472377}}, "hems_result": "Patient Conveyed by HEMS", "n": 441}, {"vehicle_type": "car", "time_type": "time_mobile", "best_fit": {"exponpow": {"b": 0.4633160055245228, "loc": -1.950500014325854e-29, "scale": 8.226665838276254}}, "hems_result": "Patient Conveyed by HEMS", "n": 17}, {"vehicle_type": "helicopter", "time_type": "time_to_scene", "best_fit": {"lognorm": {"s": 0.2563017573779538, "loc": -11.473062391720703, "scale": 31.031210036175118}}, "hems_result": "Patient Conveyed by HEMS", "n": 445}, {"vehicle_type": "car", "time_type": "time_to_scene", "best_fit": {"cauchy": {"loc": 24.519894861030366, "scale": 6.466707007144841}}, "hems_result": "Patient Conveyed by HEMS", "n": 16}, {"vehicle_type": "helicopter", "time_type": "time_on_scene", "best_fit": {"pearson3": {"skew": 1.0990665001060855, "loc": 30.464793631421756, "scale": 17.726457662792853}}, "hems_result": "Patient Conveyed by HEMS", "n": 908}, {"vehicle_type": "car", "time_type": "time_on_scene", "best_fit": {"weibull_min": {"c": 1.4057076981802024, "loc": 1.3244164547151493, "scale": 29.321828782347232}}, "hems_result": "Patient Conveyed by HEMS", "n": 427}, {"vehicle_type": "helicopter", "time_type": "time_to_hospital", "best_fit": {"lognorm": {"s": 0.30823351274996064, "loc": -8.531617695005865, "scale": 42.024042229102676}}, "hems_result": "Patient Conveyed by HEMS", "n": 445}, {"vehicle_type": "car", "time_type": "time_to_hospital", "best_fit": {"uniform": {"loc": 9.0, "scale": 59.0}}, "hems_result": "Patient Conveyed by HEMS", "n": 18}, {"vehicle_type": "helicopter", "time_type": "time_to_clear", "best_fit": {"lognorm": {"s": 0.3375265362387245, "loc": -9.386550969017758, "scale": 34.799487833487774}}, "hems_result": "Patient Conveyed by HEMS", "n": 429}, {"vehicle_type": "car", "time_type": "time_to_clear", "best_fit": {"cauchy": {"loc": 24.90161564126131, "scale": 8.249651339372898}}, "hems_result": "Patient Conveyed by HEMS", "n": 16}, {"vehicle_type": "helicopter", "time_type": "time_allocation", "best_fit": {"lognorm": {"s": 0.9726063975549816, "loc": -0.274265270075736, "scale": 12.231606903129014}}, "hems_result": "Patient Conveyed by land with HEMS", "n": 372}, {"vehicle_type": "car", "time_type": "time_allocation", "best_fit": {"cauchy": {"loc": 6.470141334812227, "scale": 4.5496620668610745}}, "hems_result": "Patient Conveyed by land with HEMS", "n": 388}, {"vehicle_type": "helicopter", "time_type": "time_mobile", "best_fit": {"cauchy": {"loc": 5.068671238555808, "scale": 1.4372354526240785}}, "hems_result": "Patient Conveyed by land with HEMS", "n": 380}, {"vehicle_type": "car", "time_type": "time_mobile", "best_fit": {"pearson3": {"skew": 2.524568377627104, "loc": 1.4984578744798474, "scale": 1.8914796825590738}}, "hems_result": "Patient Conveyed by land with HEMS", "n": 392}, {"vehicle_type": "helicopter", "time_type": "time_to_scene", "best_fit": {"weibull_min": {"c": 2.264331432571823, "loc": 4.834290619166352, "scale": 17.707570203429093}}, "hems_result": "Patient Conveyed by land with HEMS", "n": 381}, {"vehicle_type": "car", "time_type": "time_to_scene", "best_fit": {"lognorm": {"s": 0.4139563771034286, "loc": -6.659649004788997, "scale": 23.890736039876497}}, "hems_result": "Patient Conveyed by land with HEMS", "n": 387}, {"vehicle_type": "helicopter", "time_type": "time_on_scene", "best_fit": {"pearson3": {"skew": 1.0990665001060855, "loc": 30.464793631421756, "scale": 17.726457662792853}}, "hems_result": "Patient Conveyed by land with HEMS", "n": 908}, {"vehicle_type": "car", "time_type": "time_on_scene", "best_fit": {"weibull_min": {"c": 1.4057076981802024, "loc": 1.3244164547151493, "scale": 29.321828782347232}}, "hems_result": "Patient Conveyed by land with HEMS", "n": 427}, {"vehicle_type": "helicopter", "time_type": "time_to_hospital", "best_fit": {"lognorm": {"s": 0.518277740597528, "loc": -1.5485267683463038, "scale": 26.584442456285682}}, "hems_result": "Patient Conveyed by land with HEMS", "n": 379}, {"vehicle_type": "car", "time_type": "time_to_hospital", "best_fit": {"lognorm": {"s": 0.6614350102683649, "loc": -0.8796069627190474, "scale": 19.198631938539545}}, "hems_result": "Patient Conveyed by land with HEMS", "n": 391}, {"vehicle_type": "helicopter", "time_type": "time_to_clear", "best_fit": {"chi2": {"df": 11.6605442381242, "loc": -6.613677442671396, "scale": 3.1406598247754935}}, "hems_result": "Patient Conveyed by land with HEMS", "n": 369}, {"vehicle_type": "car", "time_type": "time_to_clear", "best_fit": {"gamma": {"a": 2.99866753220637, "loc": -1.6397616969107545, "scale": 10.741323480089951}}, "hems_result": "Patient Conveyed by land with HEMS", "n": 365}, {"vehicle_type": "helicopter", "time_type": "time_allocation", "best_fit": {"cauchy": {"loc": 6.938064046567948, "scale": 3.0975741457054067}}, "hems_result": "Stand Down", "n": 806}, {"vehicle_type": "car", "time_type": "time_allocation", "best_fit": {"cauchy": {"loc": 6.618189586709235, "scale": 3.4810512993200717}}, "hems_result": "Stand Down", "n": 621}, {"vehicle_type": "helicopter", "time_type": "time_mobile", "best_fit": {"cauchy": {"loc": 4.994230790344773, "scale": 1.5175913313524236}}, "hems_result": "Stand Down", "n": 798}, {"vehicle_type": "car", "time_type": "time_mobile", "best_fit": {"gamma": {"a": 0.3844987918352426, "loc": -1.770019680741755e-29, "scale": 1.5408578287463737}}, "hems_result": "Stand Down", "n": 614}, {"vehicle_type": "helicopter", "time_type": "time_to_clear", "best_fit": {"lognorm": {"s": 0.7347640527648046, "loc": -0.5843097436849052, "scale": 9.815625116274783}}, "hems_result": "Stand Down", "n": 637}, {"vehicle_type": "car", "time_type": "time_to_clear", "best_fit": {"lognorm": {"s": 0.7029763104426222, "loc": -1.6202870142823451, "scale": 15.191078320186584}}, "hems_result": "Stand Down", "n": 429}, {"vehicle_type": "helicopter", "time_type": "time_allocation", "best_fit": {"cauchy": {"loc": 7.628574825798068, "scale": 3.495059401236275}}, "hems_result": "Landed but no patient contact", "n": 190}, {"vehicle_type": "car", "time_type": "time_allocation", "best_fit": {"cauchy": {"loc": 6.301131615099529, "scale": 3.245651481127477}}, "hems_result": "Landed but no patient contact", "n": 227}, {"vehicle_type": "helicopter", "time_type": "time_mobile", "best_fit": {"cauchy": {"loc": 4.744936608157378, "scale": 1.5953076776296302}}, "hems_result": "Landed but no patient contact", "n": 192}, {"vehicle_type": "car", "time_type": "time_mobile", "best_fit": {"gamma": {"a": 0.2523816019888703, "loc": -4.4254145038535574e-30, "scale": 1.5408575664264244}}, "hems_result": "Landed but no patient contact", "n": 234}, {"vehicle_type": "helicopter", "time_type": "time_to_scene", "best_fit": {"lognorm": {"s": 0.540155706779175, "loc": 4.812285078544329, "scale": 12.507874035611984}}, "hems_result": "Landed but no patient contact", "n": 42}, {"vehicle_type": "car", "time_type": "time_to_scene", "best_fit": {"triang": {"c": 0.17878067570857964, "loc": -0.9861855070936698, "scale": 55.857186261919225}}, "hems_result": "Landed but no patient contact", "n": 65}, {"vehicle_type": "helicopter", "time_type": "time_on_scene", "best_fit": {"pearson3": {"skew": 1.0990665001060855, "loc": 30.464793631421756, "scale": 17.726457662792853}}, "hems_result": "Landed but no patient contact", "n": 908}, {"vehicle_type": "car", "time_type": "time_on_scene", "best_fit": {"weibull_min": {"c": 1.4057076981802024, "loc": 1.3244164547151493, "scale": 29.321828782347232}}, "hems_result": "Landed but no patient contact", "n": 427}, {"vehicle_type": "helicopter", "time_type": "time_to_clear", "best_fit": {"lognorm": {"s": 0.40160059716052166, "loc": -14.917075218946303, "scale": 37.84430312797556}}, "hems_result": "Landed but no patient contact", "n": 145}, {"vehicle_type": "car", "time_type": "time_to_clear", "best_fit": {"pearson3": {"skew": 1.4638581921298608, "loc": 23.423291551430488, "scale": 17.04667302235206}}, "hems_result": "Landed but no patient contact", "n": 163}]
****************************************

****************************************
distribution_data\ad_hoc_unavailability.csv
****************************************
registration,six_hour_bin,quarter,reason,probability
g-daan,00-05,1,aircraft,
g-daan,00-05,1,available,
g-daan,00-05,1,crew,
g-daan,00-05,1,weather,
g-daas,00-05,1,aircraft,0.0
g-daas,00-05,1,available,0.97997
g-daas,00-05,1,crew,0.0
g-daas,00-05,1,weather,0.02003
g-daan,06-11,1,aircraft,0.00203
g-daan,06-11,1,available,0.81891
g-daan,06-11,1,crew,0.00654
g-daan,06-11,1,weather,0.17252
g-daas,06-11,1,aircraft,0.00709
g-daas,06-11,1,available,0.89983
g-daas,06-11,1,crew,0.05081
g-daas,06-11,1,weather,0.04227
g-daan,12-17,1,aircraft,0.00525
g-daan,12-17,1,available,0.96289
g-daan,12-17,1,crew,0.0058
g-daan,12-17,1,weather,0.02606
g-daas,12-17,1,aircraft,0.0
g-daas,12-17,1,available,0.91338
g-daas,12-17,1,crew,0.02548
g-daas,12-17,1,weather,0.06114
g-daan,18-23,1,aircraft,
g-daan,18-23,1,available,
g-daan,18-23,1,crew,
g-daan,18-23,1,weather,
g-daas,18-23,1,aircraft,0.00069
g-daas,18-23,1,available,0.95035
g-daas,18-23,1,crew,0.00982
g-daas,18-23,1,weather,0.03913
g-daan,00-05,2,aircraft,
g-daan,00-05,2,available,
g-daan,00-05,2,crew,
g-daan,00-05,2,weather,
g-daas,00-05,2,aircraft,0.0
g-daas,00-05,2,available,0.98214
g-daas,00-05,2,crew,0.00549
g-daas,00-05,2,weather,0.01236
g-daan,06-11,2,aircraft,0.00192
g-daan,06-11,2,available,0.92656
g-daan,06-11,2,crew,0.01016
g-daan,06-11,2,weather,0.06136
g-daas,06-11,2,aircraft,0.06099
g-daas,06-11,2,available,0.88159
g-daas,06-11,2,crew,0.02445
g-daas,06-11,2,weather,0.03297
g-daan,12-17,2,aircraft,0.0
g-daan,12-17,2,available,0.9852
g-daan,12-17,2,crew,0.0
g-daan,12-17,2,weather,0.0148
g-daas,12-17,2,aircraft,0.02198
g-daas,12-17,2,available,0.97527
g-daas,12-17,2,crew,0.00275
g-daas,12-17,2,weather,0.0
g-daan,18-23,2,aircraft,0.0
g-daan,18-23,2,available,1.0
g-daan,18-23,2,crew,0.0
g-daan,18-23,2,weather,0.0
g-daas,18-23,2,aircraft,0.01458
g-daas,18-23,2,available,0.94727
g-daas,18-23,2,crew,0.00229
g-daas,18-23,2,weather,0.03587
g-daan,00-05,3,aircraft,
g-daan,00-05,3,available,
g-daan,00-05,3,crew,
g-daan,00-05,3,weather,
g-daas,00-05,3,aircraft,0.0
g-daas,00-05,3,available,0.99317
g-daas,00-05,3,crew,0.00273
g-daas,00-05,3,weather,0.0041
g-daan,06-11,3,aircraft,0.00888
g-daan,06-11,3,available,0.86603
g-daan,06-11,3,crew,0.01875
g-daan,06-11,3,weather,0.10634
g-daas,06-11,3,aircraft,0.06313
g-daas,06-11,3,available,0.87953
g-daas,06-11,3,crew,0.025
g-daas,06-11,3,weather,0.03234
g-daan,12-17,3,aircraft,0.00264
g-daan,12-17,3,available,0.97622
g-daan,12-17,3,crew,0.00408
g-daan,12-17,3,weather,0.01706
g-daas,12-17,3,aircraft,0.00679
g-daas,12-17,3,available,0.95018
g-daas,12-17,3,crew,0.02536
g-daas,12-17,3,weather,0.01766
g-daan,18-23,3,aircraft,0.0
g-daan,18-23,3,available,0.97826
g-daan,18-23,3,crew,0.0163
g-daan,18-23,3,weather,0.00543
g-daas,18-23,3,aircraft,0.05503
g-daas,18-23,3,available,0.87015
g-daas,18-23,3,crew,0.00725
g-daas,18-23,3,weather,0.06757
g-daan,00-05,4,aircraft,
g-daan,00-05,4,available,
g-daan,00-05,4,crew,
g-daan,00-05,4,weather,
g-daas,00-05,4,aircraft,0.0
g-daas,00-05,4,available,0.97622
g-daas,00-05,4,crew,0.00543
g-daas,00-05,4,weather,0.01834
g-daan,06-11,4,aircraft,0.01031
g-daan,06-11,4,available,0.81444
g-daan,06-11,4,crew,0.0231
g-daan,06-11,4,weather,0.15216
g-daas,06-11,4,aircraft,0.0317
g-daas,06-11,4,available,0.89475
g-daas,06-11,4,crew,0.0038
g-daas,06-11,4,weather,0.06975
g-daan,12-17,4,aircraft,0.01033
g-daan,12-17,4,available,0.97473
g-daan,12-17,4,crew,0.0
g-daan,12-17,4,weather,0.01495
g-daas,12-17,4,aircraft,0.00498
g-daas,12-17,4,available,0.94479
g-daas,12-17,4,crew,0.01585
g-daas,12-17,4,weather,0.03438
g-daan,18-23,4,aircraft,
g-daan,18-23,4,available,
g-daan,18-23,4,crew,
g-daan,18-23,4,weather,
g-daas,18-23,4,aircraft,0.00294
g-daas,18-23,4,available,0.93361
g-daas,18-23,4,crew,0.00408
g-daas,18-23,4,weather,0.05938
****************************************

****************************************
distribution_data\age_distributions.txt
****************************************
[{"ampds_card": "06", "best_fit": {"triang": {"c": 0.9999999999973972, "loc": -15.266374137322899, "scale": 103.26653978949412}}, "n": 91}, {"ampds_card": "09", "best_fit": {"pearson3": {"skew": -0.8425876607595288, "loc": 60.96705429283267, "scale": 17.514409208756398}}, "n": 680}, {"ampds_card": "31", "best_fit": {"triang": {"c": 0.851412656865018, "loc": -12.739321784145215, "scale": 107.67554492948855}}, "n": 130}, {"ampds_card": "25", "best_fit": {"cauchy": {"loc": 33.94741878275828, "scale": 7.5586115730936365}}, "n": 28}, {"ampds_card": "30", "best_fit": {"triang": {"c": 0.1187220016240953, "loc": -1.6283406035635406, "scale": 123.23782005486575}}, "n": 247}, {"ampds_card": "Other", "best_fit": {"triang": {"c": 0.7011941301691216, "loc": -9.062122809818618, "scale": 107.20486598839034}}, "n": 312}, {"ampds_card": "10", "best_fit": {"cauchy": {"loc": 67.57602152391331, "scale": 7.445970755715811}}, "n": 88}, {"ampds_card": "17", "best_fit": {"weibull_min": {"c": 9.154357147795519, "loc": -125.58264227072902, "scale": 191.6195884262797}}, "n": 394}, {"ampds_card": "27", "best_fit": {"triang": {"c": 0.9999999933878193, "loc": -6.219865184484741, "scale": 70.41656789904678}}, "n": 35}, {"ampds_card": "29", "best_fit": {"triang": {"c": 0.2819837118292948, "loc": -2.7318274436085, "scale": 105.43810222290756}}, "n": 354}, {"ampds_card": "12", "best_fit": {"powerlaw": {"a": 0.6741760302029549, "loc": 0.9166999999999998, "scale": 86.08330000000001}}, "n": 172}, {"ampds_card": "23", "best_fit": {"triang": {"c": 0.41696081921609696, "loc": 9.458188498345638, "scale": 71.62522261667687}}, "n": 52}]
****************************************

****************************************
distribution_data\callsign_group_probs.csv
****************************************
callsign_group,count,proportion
70,1963,0.7314
71,391,0.1457
72,330,0.123
****************************************

****************************************
distribution_data\enhanced_or_critical_care_by_ampds_card_probs.csv
****************************************
ampds_card,care_category,count,proportion
06,CC,10,0.051
06,EC,28,0.144
06,REG,157,0.805
09,CC,94,0.074
09,EC,213,0.168
09,REG,958,0.757
10,CC,3,0.022
10,EC,3,0.022
10,REG,128,0.955
12,CC,11,0.032
12,EC,56,0.163
12,REG,276,0.805
17,CC,31,0.045
17,EC,72,0.104
17,REG,588,0.851
23,CC,1,0.009
23,EC,6,0.055
23,REG,103,0.936
25,CC,2,0.021
25,EC,9,0.096
25,REG,83,0.883
27,CC,3,0.015
27,EC,6,0.03
27,REG,192,0.955
29,CC,51,0.07
29,EC,66,0.09
29,REG,613,0.84
30,CC,17,0.04
30,EC,43,0.101
30,REG,365,0.859
31,CC,12,0.04
31,EC,10,0.033
31,REG,278,0.927
Other,CC,38,0.053
Other,EC,42,0.058
Other,REG,640,0.889
****************************************

****************************************
distribution_data\hems_results_by_patient_outcome_and_time_of_day_and_quarter_and_vehicle_type_and_callsign_group_probs.csv
****************************************
hems_result,pt_outcome,vehicle_type,callsign_group,quarter,time_of_day,count,proportion
Landed but no patient contact,Unknown,car,70,1,day,20,0.351
Landed but no patient contact,Unknown,car,70,1,night,15,0.231
Landed but no patient contact,Unknown,car,70,2,day,7,0.184
Landed but no patient contact,Unknown,car,70,2,night,5,0.147
Landed but no patient contact,Unknown,car,70,3,day,13,0.217
Landed but no patient contact,Unknown,car,70,3,night,16,0.267
Landed but no patient contact,Unknown,car,70,4,day,18,0.265
Landed but no patient contact,Unknown,car,70,4,night,13,0.188
Landed but no patient contact,Unknown,car,71,1,day,5,0.179
Landed but no patient contact,Unknown,car,71,2,day,3,0.12
Landed but no patient contact,Unknown,car,71,3,day,7,0.269
Landed but no patient contact,Unknown,car,71,4,day,3,0.097
Landed but no patient contact,Unknown,car,72,1,day,29,0.397
Landed but no patient contact,Unknown,car,72,1,night,1,0.5
Landed but no patient contact,Unknown,car,72,2,day,30,0.375
Landed but no patient contact,Unknown,car,72,2,night,3,1.0
Landed but no patient contact,Unknown,car,72,3,day,29,0.367
Landed but no patient contact,Unknown,car,72,4,day,21,0.328
Landed but no patient contact,Unknown,helicopter,70,1,day,24,0.19
Landed but no patient contact,Unknown,helicopter,70,1,night,5,0.119
Landed but no patient contact,Unknown,helicopter,70,2,day,28,0.152
Landed but no patient contact,Unknown,helicopter,70,2,night,8,0.119
Landed but no patient contact,Unknown,helicopter,70,3,day,41,0.217
Landed but no patient contact,Unknown,helicopter,70,3,night,12,0.188
Landed but no patient contact,Unknown,helicopter,70,4,day,29,0.201
Landed but no patient contact,Unknown,helicopter,70,4,night,7,0.226
Landed but no patient contact,Unknown,helicopter,71,1,day,6,0.188
Landed but no patient contact,Unknown,helicopter,71,2,day,11,0.229
Landed but no patient contact,Unknown,helicopter,71,3,day,14,0.255
Landed but no patient contact,Unknown,helicopter,71,4,day,8,0.25
Patient Conveyed by HEMS,Conveyed,car,70,1,day,2,0.036
Patient Conveyed by HEMS,Conveyed,car,70,1,night,1,0.021
Patient Conveyed by HEMS,Conveyed,car,70,2,day,3,0.081
Patient Conveyed by HEMS,Conveyed,car,70,2,night,2,0.074
Patient Conveyed by HEMS,Conveyed,car,70,3,day,2,0.054
Patient Conveyed by HEMS,Conveyed,car,70,4,day,3,0.051
Patient Conveyed by HEMS,Conveyed,car,71,4,day,1,0.029
Patient Conveyed by HEMS,Conveyed,car,72,2,day,1,0.01
Patient Conveyed by HEMS,Conveyed,car,72,4,day,1,0.016
Patient Conveyed by HEMS,Conveyed,car,72,4,night,2,1.0
Patient Conveyed by HEMS,Conveyed,helicopter,70,1,day,53,0.335
Patient Conveyed by HEMS,Conveyed,helicopter,70,1,night,7,0.269
Patient Conveyed by HEMS,Conveyed,helicopter,70,2,day,72,0.316
Patient Conveyed by HEMS,Conveyed,helicopter,70,2,night,15,0.214
Patient Conveyed by HEMS,Conveyed,helicopter,70,3,day,79,0.38
Patient Conveyed by HEMS,Conveyed,helicopter,70,3,night,16,0.296
Patient Conveyed by HEMS,Conveyed,helicopter,70,4,day,47,0.32
Patient Conveyed by HEMS,Conveyed,helicopter,70,4,night,7,0.269
Patient Conveyed by HEMS,Conveyed,helicopter,71,1,day,37,0.529
Patient Conveyed by HEMS,Conveyed,helicopter,71,2,day,34,0.366
Patient Conveyed by HEMS,Conveyed,helicopter,71,3,day,56,0.444
Patient Conveyed by HEMS,Conveyed,helicopter,71,4,day,25,0.5
Patient Conveyed by land with HEMS,Conveyed,car,70,1,day,34,0.618
Patient Conveyed by land with HEMS,Conveyed,car,70,1,night,36,0.75
Patient Conveyed by land with HEMS,Conveyed,car,70,2,day,20,0.541
Patient Conveyed by land with HEMS,Conveyed,car,70,2,night,16,0.593
Patient Conveyed by land with HEMS,Conveyed,car,70,3,day,26,0.703
Patient Conveyed by land with HEMS,Conveyed,car,70,3,night,19,0.76
Patient Conveyed by land with HEMS,Conveyed,car,70,4,day,41,0.695
Patient Conveyed by land with HEMS,Conveyed,car,70,4,night,30,0.566
Patient Conveyed by land with HEMS,Conveyed,car,71,1,day,9,0.36
Patient Conveyed by land with HEMS,Conveyed,car,71,2,day,8,0.276
Patient Conveyed by land with HEMS,Conveyed,car,71,3,day,5,0.227
Patient Conveyed by land with HEMS,Conveyed,car,71,4,day,17,0.5
Patient Conveyed by land with HEMS,Conveyed,car,72,1,day,29,0.296
Patient Conveyed by land with HEMS,Conveyed,car,72,1,night,1,0.333
Patient Conveyed by land with HEMS,Conveyed,car,72,2,day,43,0.417
Patient Conveyed by land with HEMS,Conveyed,car,72,2,night,3,0.5
Patient Conveyed by land with HEMS,Conveyed,car,72,3,day,30,0.38
Patient Conveyed by land with HEMS,Conveyed,car,72,4,day,27,0.422
Patient Conveyed by land with HEMS,Conveyed,helicopter,70,1,day,59,0.373
Patient Conveyed by land with HEMS,Conveyed,helicopter,70,1,night,10,0.385
Patient Conveyed by land with HEMS,Conveyed,helicopter,70,2,day,69,0.303
Patient Conveyed by land with HEMS,Conveyed,helicopter,70,2,night,34,0.486
Patient Conveyed by land with HEMS,Conveyed,helicopter,70,3,day,74,0.356
Patient Conveyed by land with HEMS,Conveyed,helicopter,70,3,night,21,0.389
Patient Conveyed by land with HEMS,Conveyed,helicopter,70,4,day,49,0.333
Patient Conveyed by land with HEMS,Conveyed,helicopter,70,4,night,11,0.423
Patient Conveyed by land with HEMS,Conveyed,helicopter,71,1,day,10,0.143
Patient Conveyed by land with HEMS,Conveyed,helicopter,71,2,day,21,0.226
Patient Conveyed by land with HEMS,Conveyed,helicopter,71,3,day,17,0.135
Patient Conveyed by land with HEMS,Conveyed,helicopter,71,3,night,1,1.0
Patient Conveyed by land with HEMS,Conveyed,helicopter,71,4,day,8,0.16
Patient Treated but not conveyed by HEMS,Conveyed,car,70,1,day,19,0.345
Patient Treated but not conveyed by HEMS,Conveyed,car,70,1,night,11,0.229
Patient Treated but not conveyed by HEMS,Conveyed,car,70,2,day,14,0.378
Patient Treated but not conveyed by HEMS,Conveyed,car,70,2,night,9,0.333
Patient Treated but not conveyed by HEMS,Conveyed,car,70,3,day,9,0.243
Patient Treated but not conveyed by HEMS,Conveyed,car,70,3,night,6,0.24
Patient Treated but not conveyed by HEMS,Conveyed,car,70,4,day,15,0.254
Patient Treated but not conveyed by HEMS,Conveyed,car,70,4,night,23,0.434
Patient Treated but not conveyed by HEMS,Conveyed,car,71,1,day,16,0.64
Patient Treated but not conveyed by HEMS,Conveyed,car,71,2,day,21,0.724
Patient Treated but not conveyed by HEMS,Conveyed,car,71,3,day,17,0.773
Patient Treated but not conveyed by HEMS,Conveyed,car,71,4,day,16,0.471
Patient Treated but not conveyed by HEMS,Conveyed,car,71,4,night,1,1.0
Patient Treated but not conveyed by HEMS,Conveyed,car,72,1,day,69,0.704
Patient Treated but not conveyed by HEMS,Conveyed,car,72,1,night,2,0.667
Patient Treated but not conveyed by HEMS,Conveyed,car,72,2,day,59,0.573
Patient Treated but not conveyed by HEMS,Conveyed,car,72,2,night,3,0.5
Patient Treated but not conveyed by HEMS,Conveyed,car,72,3,day,49,0.62
Patient Treated but not conveyed by HEMS,Conveyed,car,72,3,night,1,1.0
Patient Treated but not conveyed by HEMS,Conveyed,car,72,4,day,36,0.562
Patient Treated but not conveyed by HEMS,Conveyed,helicopter,70,1,day,46,0.291
Patient Treated but not conveyed by HEMS,Conveyed,helicopter,70,1,night,9,0.346
Patient Treated but not conveyed by HEMS,Conveyed,helicopter,70,2,day,87,0.382
Patient Treated but not conveyed by HEMS,Conveyed,helicopter,70,2,night,21,0.3
Patient Treated but not conveyed by HEMS,Conveyed,helicopter,70,3,day,55,0.264
Patient Treated but not conveyed by HEMS,Conveyed,helicopter,70,3,night,17,0.315
Patient Treated but not conveyed by HEMS,Conveyed,helicopter,70,4,day,51,0.347
Patient Treated but not conveyed by HEMS,Conveyed,helicopter,70,4,night,8,0.308
Patient Treated but not conveyed by HEMS,Conveyed,helicopter,71,1,day,23,0.329
Patient Treated but not conveyed by HEMS,Conveyed,helicopter,71,2,day,38,0.409
Patient Treated but not conveyed by HEMS,Conveyed,helicopter,71,3,day,53,0.421
Patient Treated but not conveyed by HEMS,Conveyed,helicopter,71,4,day,17,0.34
Patient Treated but not conveyed by HEMS,Deceased,car,70,1,day,22,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,70,1,night,16,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,70,2,day,10,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,70,2,night,7,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,70,3,day,12,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,70,3,night,12,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,70,4,day,16,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,70,4,night,10,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,71,1,day,3,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,71,1,night,1,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,71,2,day,10,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,71,3,day,4,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,71,4,day,9,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,72,1,day,22,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,72,1,night,1,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,72,2,day,9,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,72,2,night,1,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,72,3,day,12,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,72,4,day,13,1.0
Patient Treated but not conveyed by HEMS,Deceased,car,72,4,night,1,1.0
Patient Treated but not conveyed by HEMS,Deceased,helicopter,70,1,day,40,1.0
Patient Treated but not conveyed by HEMS,Deceased,helicopter,70,1,night,11,1.0
Patient Treated but not conveyed by HEMS,Deceased,helicopter,70,2,day,45,1.0
Patient Treated but not conveyed by HEMS,Deceased,helicopter,70,2,night,14,1.0
Patient Treated but not conveyed by HEMS,Deceased,helicopter,70,3,day,55,1.0
Patient Treated but not conveyed by HEMS,Deceased,helicopter,70,3,night,8,1.0
Patient Treated but not conveyed by HEMS,Deceased,helicopter,70,4,day,41,1.0
Patient Treated but not conveyed by HEMS,Deceased,helicopter,70,4,night,8,1.0
Patient Treated but not conveyed by HEMS,Deceased,helicopter,71,1,day,17,1.0
Patient Treated but not conveyed by HEMS,Deceased,helicopter,71,2,day,8,1.0
Patient Treated but not conveyed by HEMS,Deceased,helicopter,71,3,day,19,1.0
Patient Treated but not conveyed by HEMS,Deceased,helicopter,71,4,day,11,1.0
Stand Down,Unknown,car,70,1,day,37,0.649
Stand Down,Unknown,car,70,1,night,50,0.769
Stand Down,Unknown,car,70,2,day,31,0.816
Stand Down,Unknown,car,70,2,night,29,0.853
Stand Down,Unknown,car,70,3,day,47,0.783
Stand Down,Unknown,car,70,3,night,44,0.733
Stand Down,Unknown,car,70,4,day,50,0.735
Stand Down,Unknown,car,70,4,night,56,0.812
Stand Down,Unknown,car,71,1,day,23,0.821
Stand Down,Unknown,car,71,2,day,22,0.88
Stand Down,Unknown,car,71,3,day,19,0.731
Stand Down,Unknown,car,71,3,night,1,1.0
Stand Down,Unknown,car,71,4,day,28,0.903
Stand Down,Unknown,car,72,1,day,44,0.603
Stand Down,Unknown,car,72,1,night,1,0.5
Stand Down,Unknown,car,72,2,day,50,0.625
Stand Down,Unknown,car,72,3,day,50,0.633
Stand Down,Unknown,car,72,3,night,3,1.0
Stand Down,Unknown,car,72,4,day,43,0.672
Stand Down,Unknown,car,72,4,night,1,1.0
Stand Down,Unknown,helicopter,70,1,day,102,0.81
Stand Down,Unknown,helicopter,70,1,night,37,0.881
Stand Down,Unknown,helicopter,70,2,day,156,0.848
Stand Down,Unknown,helicopter,70,2,night,59,0.881
Stand Down,Unknown,helicopter,70,3,day,148,0.783
Stand Down,Unknown,helicopter,70,3,night,52,0.812
Stand Down,Unknown,helicopter,70,4,day,115,0.799
Stand Down,Unknown,helicopter,70,4,night,24,0.774
Stand Down,Unknown,helicopter,71,1,day,26,0.812
Stand Down,Unknown,helicopter,71,2,day,37,0.771
Stand Down,Unknown,helicopter,71,3,day,41,0.745
Stand Down,Unknown,helicopter,71,4,day,24,0.75
****************************************

****************************************
distribution_data\hourly_arrival_by_qtr_probs.csv
****************************************
,hour,quarter,count,proportion
0,0,1,30,0.0245
4,1,1,13,0.0106
8,2,1,7,0.0057
12,3,1,11,0.009
16,4,1,16,0.0131
20,5,1,9,0.0073
24,6,1,18,0.0147
28,7,1,24,0.0196
32,8,1,55,0.0449
36,9,1,92,0.0751
40,10,1,102,0.0833
44,11,1,105,0.0857
48,12,1,97,0.0792
52,13,1,83,0.0678
56,14,1,95,0.0776
60,15,1,87,0.071
64,16,1,63,0.0514
68,17,1,63,0.0514
72,18,1,46,0.0376
76,19,1,55,0.0449
80,20,1,45,0.0367
84,21,1,34,0.0278
88,22,1,35,0.0286
92,23,1,40,0.0327
1,0,2,21,0.0152
5,1,2,9,0.0065
9,2,2,22,0.0159
13,3,2,14,0.0101
17,4,2,12,0.0087
21,5,2,12,0.0087
25,6,2,21,0.0152
29,7,2,42,0.0304
33,8,2,58,0.042
37,9,2,60,0.0434
41,10,2,108,0.0781
45,11,2,108,0.0781
49,12,2,111,0.0803
53,13,2,104,0.0753
57,14,2,85,0.0615
61,15,2,90,0.0651
65,16,2,95,0.0687
69,17,2,100,0.0724
73,18,2,64,0.0463
77,19,2,63,0.0456
81,20,2,58,0.042
85,21,2,56,0.0405
89,22,2,41,0.0297
93,23,2,28,0.0203
2,0,3,26,0.0185
6,1,3,15,0.0107
10,2,3,16,0.0114
14,3,3,16,0.0114
18,4,3,6,0.0043
22,5,3,14,0.01
26,6,3,6,0.0043
30,7,3,35,0.0249
34,8,3,53,0.0378
38,9,3,71,0.0506
42,10,3,118,0.0841
46,11,3,99,0.0706
50,12,3,96,0.0684
54,13,3,111,0.0791
58,14,3,104,0.0741
62,15,3,133,0.0948
66,16,3,86,0.0613
70,17,3,81,0.0577
74,18,3,78,0.0556
78,19,3,65,0.0463
82,20,3,61,0.0435
86,21,3,35,0.0249
90,22,3,44,0.0314
94,23,3,34,0.0242
3,0,4,17,0.0142
7,1,4,16,0.0134
11,2,4,22,0.0184
15,3,4,16,0.0134
19,4,4,13,0.0109
23,5,4,22,0.0184
27,6,4,11,0.0092
31,7,4,30,0.025
35,8,4,65,0.0543
39,9,4,80,0.0668
43,10,4,76,0.0634
47,11,4,93,0.0776
51,12,4,90,0.0751
55,13,4,88,0.0735
59,14,4,95,0.0793
63,15,4,74,0.0618
67,16,4,61,0.0509
71,17,4,54,0.0451
75,18,4,66,0.0551
79,19,4,46,0.0384
83,20,4,58,0.0484
87,21,4,34,0.0284
91,22,4,41,0.0342
95,23,4,30,0.025
****************************************

****************************************
distribution_data\hour_by_ampds_card_probs.csv
****************************************
,hour,ampds_card,count,proportion
0,0,06,5,0.0532
1,0,09,25,0.266
2,0,12,5,0.0532
3,0,17,12,0.1277
4,0,23,4,0.0426
5,0,25,2,0.0213
6,0,27,14,0.1489
7,0,29,9,0.0957
8,0,30,8,0.0851
9,0,31,2,0.0213
10,0,Other,8,0.0851
11,1,06,1,0.0189
12,1,09,10,0.1887
13,1,12,2,0.0377
14,1,17,5,0.0943
15,1,25,4,0.0755
16,1,27,11,0.2075
17,1,29,6,0.1132
18,1,30,1,0.0189
19,1,31,5,0.0943
20,1,Other,8,0.1509
21,2,06,5,0.0746
22,2,09,15,0.2239
23,2,10,1,0.0149
24,2,12,5,0.0746
25,2,17,14,0.209
26,2,25,4,0.0597
27,2,27,12,0.1791
28,2,29,4,0.0597
29,2,30,2,0.0299
30,2,31,2,0.0299
31,2,Other,3,0.0448
32,3,09,13,0.2281
33,3,17,11,0.193
34,3,25,4,0.0702
35,3,27,3,0.0526
36,3,29,6,0.1053
37,3,30,5,0.0877
38,3,31,1,0.0175
39,3,Other,14,0.2456
40,4,09,18,0.383
41,4,10,1,0.0213
42,4,12,3,0.0638
43,4,17,7,0.1489
44,4,23,3,0.0638
45,4,25,2,0.0426
46,4,27,5,0.1064
47,4,29,6,0.1277
48,4,31,1,0.0213
49,4,Other,1,0.0213
50,5,06,2,0.0351
51,5,09,17,0.2982
52,5,12,6,0.1053
53,5,17,7,0.1228
54,5,25,2,0.0351
55,5,27,4,0.0702
56,5,29,12,0.2105
57,5,30,2,0.0351
58,5,31,3,0.0526
59,5,Other,2,0.0351
60,6,06,3,0.0536
61,6,09,23,0.4107
62,6,10,4,0.0714
63,6,12,2,0.0357
64,6,17,4,0.0714
65,6,23,1,0.0179
66,6,25,1,0.0179
67,6,29,7,0.125
68,6,30,2,0.0357
69,6,31,1,0.0179
70,6,Other,8,0.1429
71,7,06,5,0.0382
72,7,09,38,0.2901
73,7,10,4,0.0305
74,7,12,10,0.0763
75,7,17,10,0.0763
76,7,23,2,0.0153
77,7,25,2,0.0153
78,7,27,4,0.0305
79,7,29,15,0.1145
80,7,30,9,0.0687
81,7,31,12,0.0916
82,7,Other,20,0.1527
83,8,06,14,0.0606
84,8,09,70,0.303
85,8,10,10,0.0433
86,8,12,23,0.0996
87,8,17,27,0.1169
88,8,23,2,0.0087
89,8,25,2,0.0087
90,8,27,5,0.0216
91,8,29,31,0.1342
92,8,30,6,0.026
93,8,31,12,0.0519
94,8,Other,29,0.1255
95,9,06,11,0.0363
96,9,09,94,0.3102
97,9,10,15,0.0495
98,9,12,13,0.0429
99,9,17,44,0.1452
100,9,23,6,0.0198
101,9,25,2,0.0066
102,9,27,5,0.0165
103,9,29,36,0.1188
104,9,30,22,0.0726
105,9,31,16,0.0528
106,9,Other,39,0.1287
107,10,06,15,0.0371
108,10,09,100,0.2475
109,10,10,12,0.0297
110,10,12,32,0.0792
111,10,17,64,0.1584
112,10,23,6,0.0149
113,10,25,6,0.0149
114,10,27,9,0.0223
115,10,29,45,0.1114
116,10,30,36,0.0891
117,10,31,20,0.0495
118,10,Other,59,0.146
119,11,06,12,0.0296
120,11,09,107,0.2642
121,11,10,13,0.0321
122,11,12,28,0.0691
123,11,17,55,0.1358
124,11,23,8,0.0198
125,11,25,6,0.0148
126,11,27,3,0.0074
127,11,29,47,0.116
128,11,30,41,0.1012
129,11,31,28,0.0691
130,11,Other,57,0.1407
131,12,06,11,0.0279
132,12,09,85,0.2157
133,12,10,9,0.0228
134,12,12,28,0.0711
135,12,17,62,0.1574
136,12,23,13,0.033
137,12,25,8,0.0203
138,12,27,7,0.0178
139,12,29,63,0.1599
140,12,30,32,0.0812
141,12,31,27,0.0685
142,12,Other,49,0.1244
143,13,06,9,0.0233
144,13,09,88,0.228
145,13,10,13,0.0337
146,13,12,23,0.0596
147,13,17,55,0.1425
148,13,23,5,0.013
149,13,25,5,0.013
150,13,27,8,0.0207
151,13,29,46,0.1192
152,13,30,42,0.1088
153,13,31,17,0.044
154,13,Other,75,0.1943
155,14,06,14,0.0369
156,14,09,80,0.2111
157,14,10,9,0.0237
158,14,12,31,0.0818
159,14,17,55,0.1451
160,14,23,7,0.0185
161,14,25,4,0.0106
162,14,27,7,0.0185
163,14,29,59,0.1557
164,14,30,43,0.1135
165,14,31,23,0.0607
166,14,Other,47,0.124
167,15,06,11,0.0286
168,15,09,102,0.2656
169,15,10,10,0.026
170,15,12,20,0.0521
171,15,17,55,0.1432
172,15,23,4,0.0104
173,15,25,6,0.0156
174,15,27,3,0.0078
175,15,29,74,0.1927
176,15,30,40,0.1042
177,15,31,10,0.026
178,15,Other,49,0.1276
179,16,06,16,0.0525
180,16,09,53,0.1738
181,16,10,7,0.023
182,16,12,19,0.0623
183,16,17,40,0.1311
184,16,23,6,0.0197
185,16,25,4,0.0131
186,16,27,5,0.0164
187,16,29,64,0.2098
188,16,30,32,0.1049
189,16,31,15,0.0492
190,16,Other,44,0.1443
191,17,06,11,0.0369
192,17,09,60,0.2013
193,17,10,8,0.0268
194,17,12,17,0.057
195,17,17,35,0.1174
196,17,23,6,0.0201
197,17,25,7,0.0235
198,17,27,9,0.0302
199,17,29,45,0.151
200,17,30,21,0.0705
201,17,31,24,0.0805
202,17,Other,55,0.1846
203,18,06,8,0.0315
204,18,09,50,0.1969
205,18,10,4,0.0157
206,18,12,18,0.0709
207,18,17,28,0.1102
208,18,23,7,0.0276
209,18,25,3,0.0118
210,18,27,13,0.0512
211,18,29,38,0.1496
212,18,30,20,0.0787
213,18,31,16,0.063
214,18,Other,49,0.1929
215,19,06,9,0.0393
216,19,09,50,0.2183
217,19,10,4,0.0175
218,19,12,10,0.0437
219,19,17,20,0.0873
220,19,23,4,0.0175
221,19,25,5,0.0218
222,19,27,16,0.0699
223,19,29,35,0.1528
224,19,30,25,0.1092
225,19,31,22,0.0961
226,19,Other,29,0.1266
227,20,06,14,0.0631
228,20,09,59,0.2658
229,20,10,5,0.0225
230,20,12,13,0.0586
231,20,17,31,0.1396
232,20,23,3,0.0135
233,20,25,4,0.018
234,20,27,16,0.0721
235,20,29,22,0.0991
236,20,30,12,0.0541
237,20,31,16,0.0721
238,20,Other,27,0.1216
239,21,06,9,0.0566
240,21,09,32,0.2013
241,21,10,3,0.0189
242,21,12,11,0.0692
243,21,17,20,0.1258
244,21,23,9,0.0566
245,21,25,3,0.0189
246,21,27,10,0.0629
247,21,29,23,0.1447
248,21,30,11,0.0692
249,21,31,12,0.0755
250,21,Other,16,0.1006
251,22,06,7,0.0435
252,22,09,43,0.2671
253,22,10,1,0.0062
254,22,12,11,0.0683
255,22,17,18,0.1118
256,22,23,6,0.0373
257,22,25,5,0.0311
258,22,27,18,0.1118
259,22,29,16,0.0994
260,22,30,6,0.0373
261,22,31,11,0.0683
262,22,Other,19,0.118
263,23,06,3,0.0227
264,23,09,33,0.25
265,23,10,1,0.0076
266,23,12,13,0.0985
267,23,17,12,0.0909
268,23,23,8,0.0606
269,23,25,3,0.0227
270,23,27,14,0.1061
271,23,29,21,0.1591
272,23,30,7,0.053
273,23,31,4,0.0303
274,23,Other,13,0.0985
****************************************

****************************************
distribution_data\inc_per_day_distributions.txt
****************************************
[{"season": "winter", "best_fit": {"rayleigh": {"loc": 0.9669968905787583, "scale": 4.684795645333392}}, "min_n_per_day": 1, "max_n_per_day": 19, "mean_n_per_day": 6.912087912087912}, {"season": "summer", "best_fit": {"weibull_min": {"c": 2.1929790374696205, "loc": 1.4877904408704434, "scale": 6.993327789384987}}, "min_n_per_day": 1, "max_n_per_day": 25, "mean_n_per_day": 7.653551912568306}]
****************************************

****************************************
distribution_data\inc_per_day_qtr_distributions.txt
****************************************
[{"quarter": 1, "best_fit": {"rayleigh": {"loc": 1.2377668926438286, "scale": 4.589215739676243}}, "min_n_per_day": 2, "max_n_per_day": 19, "mean_n_per_day": 6.953744493392071}, {"quarter": 2, "best_fit": {"pearson3": {"skew": 0.8814904204458733, "loc": 7.778003492745315, "scale": 3.0285135967900505}}, "min_n_per_day": 2, "max_n_per_day": 25, "mean_n_per_day": 7.778021978021978}, {"quarter": 3, "best_fit": {"norm": {"loc": 7.530434782608696, "scale": 2.9490506626648654}}, "min_n_per_day": 1, "max_n_per_day": 18, "mean_n_per_day": 7.530434782608696}, {"quarter": 4, "best_fit": {"exponpow": {"b": 1.6680518380676816, "loc": 0.9499976566253319, "scale": 8.698267464701436}}, "min_n_per_day": 1, "max_n_per_day": 14, "mean_n_per_day": 6.870614035087719}]
****************************************

****************************************
distribution_data\inc_per_day_samples.json
****************************************
{"winter": [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], "summer": [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], "Q1": [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], "Q2": [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], "Q3": [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], "Q4": [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]}
****************************************

****************************************
distribution_data\patient_outcome_by_care_category_and_quarter_probs.csv
****************************************
pt_outcome,care_category,quarter,count,proportion
Deceased,CC,1,0,0.0
Deceased,CC,2,1,0.014
Deceased,CC,3,4,0.048
Deceased,CC,4,1,0.018
Deceased,EC,1,57,0.396
Deceased,EC,2,37,0.294
Deceased,EC,3,50,0.357
Deceased,EC,4,43,0.299
Deceased,REG,1,76,0.074
Deceased,REG,2,66,0.056
Deceased,REG,3,68,0.058
Deceased,REG,4,65,0.065
Unknown,CC,1,1,0.017
Unknown,CC,2,0,0.0
Unknown,CC,3,2,0.024
Unknown,CC,4,1,0.018
Unknown,EC,1,2,0.014
Unknown,EC,2,3,0.024
Unknown,EC,3,1,0.007
Unknown,EC,4,2,0.014
Unknown,REG,1,606,0.593
Unknown,REG,2,682,0.577
Unknown,REG,3,725,0.615
Unknown,REG,4,650,0.651
Conveyed,CC,1,58,0.983
Conveyed,CC,2,73,0.986
Conveyed,CC,3,78,0.929
Conveyed,CC,4,54,0.964
Conveyed,EC,1,85,0.59
Conveyed,EC,2,86,0.683
Conveyed,EC,3,89,0.636
Conveyed,EC,4,99,0.688
Conveyed,REG,1,340,0.333
Conveyed,REG,2,434,0.367
Conveyed,REG,3,386,0.327
Conveyed,REG,4,283,0.284
****************************************

****************************************
distribution_data\proportion_jobs_heli_benefit.txt
****************************************
0.1455
****************************************

****************************************
distribution_data\proportion_jobs_heli_benefit_cc.txt
****************************************
0.3846
****************************************

****************************************
distribution_data\proportion_jobs_heli_benefit_ec.txt
****************************************
0.0993
****************************************

****************************************
distribution_data\README.md
****************************************

****************************************

****************************************
distribution_data\sex_by_ampds_card_probs.csv
****************************************
,ampds_card,sex,count,proportion
0,06,Female,42,0.462
3,09,Female,206,0.303
6,10,Female,27,0.307
8,12,Female,83,0.483
11,17,Female,163,0.414
14,23,Female,27,0.519
16,25,Female,17,0.607
20,27,Female,4,0.114
23,29,Female,97,0.274
25,30,Female,98,0.397
29,31,Female,54,0.415
32,Other,Female,136,0.436
****************************************

****************************************
distribution_data\vehicle_type_by_quarter_probs.csv
****************************************
,callsign_group,quarter,vehicle_type,count,proportion
0,70,1,car,200,0.3431
1,70,1,helicopter,383,0.6569
2,70,2,car,121,0.1681
3,70,2,helicopter,599,0.8319
4,70,3,car,170,0.2329
5,70,3,helicopter,560,0.7671
6,70,4,car,252,0.3962
7,70,4,helicopter,384,0.6038
8,71,1,car,43,0.2829
9,71,1,helicopter,109,0.7171
10,71,2,car,53,0.269
11,71,2,helicopter,144,0.731
12,71,3,car,45,0.1883
13,71,3,helicopter,194,0.8117
14,71,4,car,67,0.4241
15,71,4,helicopter,91,0.5759
16,72,1,car,165,1.0
17,72,2,car,179,1.0
18,72,3,car,158,1.0
19,72,4,car,144,1.0
****************************************

****************************************
distribution_data\vehicle_type_probs.csv
****************************************
,callsign_group,vehicle_type,count,proportion
0,70,car,743,0.2784
1,70,helicopter,1926,0.7216
2,71,car,208,0.2788
3,71,helicopter,538,0.7212
4,72,car,646,1.0
****************************************

****************************************
docs\.gitignore
****************************************
*
!.gitignore
!.gitkeep
****************************************

****************************************
R-wrangling\0. wrangle-v2.r
****************************************
library(tidyverse)
library(lubridate)
library(readxl)

df <- read_xlsx('data/DAA_with_missing_2023-2024.xlsx', sheet='Tasked') %>%
  rename(
    inc_date = `Date Time`,
    ampds_card = `AMPDS Card (all sources)`
  )

missed_df <- read_xlsx('data/DAA_with_missing_2023-2024.xlsx', sheet='Missed') %>%
  rename(
    inc_date = `Date/time`,
    ampds_card = `AMPDS Card`
  )

dfa <- bind_rows(df, missed_df)


# 2025-05-14
# Updating patient outcome and HEMS result to be 
# more intuitive


simple_df <- dfa %>%
  filter(is.na(result) | result != 'Remote advice', inc_date > lubridate::ymd('2023-01-01')) %>% 
  transmute(
    job_id,
    inc_date,
    #ampds_card, # Won't normally be present - this can be derived from the full AMPDS code
    ampds_card = fct_lump_min(str_pad(ampds_card, 2, "left", "0"), 100),
    ampds_code = "",
    dispatch_type = case_when(
      grepl("Request", `Dispatch type`) ~ "Request",
      `Dispatch type` %in% c('Immediate', 'Interrogate') ~ `Dispatch type`,
      .default = NA_character_
    ),
    callsign,
    vehicle = tolower(Vehicle),
    vehicle_type = case_when(
      str_sub(tolower(callsign), 1, 2) == "cc" ~ "car",
      str_sub(tolower(callsign), 1, 2) == "h7" ~ "helicopter",
      .default = NA_character_
    ),
    callsign_group = case_when(
      callsign %in% c("H70","CC70") ~ "70",
      callsign %in% c("H71","CC71") ~ "71",
      callsign == "CC72" ~ "72",
      .default = "Other"
    ),
    hems_result = case_when(
      patient_result %in% c("Conveyed by land without DAA", "Deceased") ~ "Patient Treated but not conveyed by HEMS",
      result == "Patient Treated (not conveyed)" & `On scene time` > 0 ~ "Patient Treated but not conveyed by HEMS",
      result == "Patient Treated (not conveyed)" & (is.na(`On scene time`) | `On scene time` == 0) ~ "Stand Down",
      patient_result == "Conveyed by land with DAA" ~ "Patient Conveyed by land with HEMS",
      result %in% c("Airlifted", "Patient Conveyed") ~ "Patient Conveyed by HEMS",
      grepl("Stand Down", result) ~ "Stand Down",
      result == "Landed but no patient contact" ~ "Landed but no patient contact",
      .default = "Unknown"
    ),
    # sd_reason, These results look a little suss...not sure how useful it is going to be.
    pt_outcome = case_when(
      patient_result == "Deceased" ~ "Deceased",
      hems_result == "Stand Down" ~ "Unknown",
      grepl("Patient Conveyed", hems_result) ~ "Conveyed",
      grepl("Conveyed", patient_result) ~ "Conveyed",
      .default = "Unknown"
    ),
    age = Age,
    sex = Sex,
    HLIDD = if_else(is.na(`HLIDD?`), 'n', tolower(`HLIDD?`)),
    helicopter_benefit = if_else(is.na(Helicopter), "n", tolower(Helicopter)),
    cc_benefit = if_else(is.na(`Critical care`), "n", tolower(`Critical care`)),
    ec_benefit = if_else(is.na(`Enhanced care`), "n", tolower(`Enhanced care`)),
    time_allocation = if_else(Allocation > 120, NA_integer_, Allocation),
    time_mobile = if_else(Mobilisation > 30, NA, Mobilisation),
    time_to_scene = if_else(`Journey to scene` > 60 | `Journey to scene` <= 0, NA_integer_, `Journey to scene`),
    time_on_scene = if_else(`On scene time` > 120 | `On scene time` <= 0, NA_integer_, `On scene time`),
    time_to_hospital = if_else(`Journey to hospital` > 140 | `Journey to hospital` <= 0, NA_integer_, `Journey to hospital`),
    total_minus_all = `Total job duration` - `Journey to hospital` - `On scene time` - `Journey to scene` - Mobilisation,
    time_to_clear = case_when(
      total_minus_all < 0 ~ NA_integer_,
      total_minus_all > 90 ~ NA_integer_,
      .default = total_minus_all
    ), 
    call_cat = NA_character_
  ) %>% filter(is.na(callsign) | callsign %in% c("CC70", "CC71", "CC72", "H70", "H71"), 
               # Remove 10 entries where this is true
               !(hems_result == "Patient Treated but not conveyed by HEMS" & pt_outcome == "Unknown"))


saveRDS(simple_df, 'clean_daa_import_missing_2023_2024.rds')
simple_df %>% write_csv('clean_daa_import_missing_2023_2024.csv')


# simple_df %>% count(hems_result, pt_outcome) %>% print(n=30)
# 
# min(simple_df$inc_date)
# max(simple_df$inc_date)
# 
# 
library(tidyverse)
simple_df <- readRDS('clean_daa_import_missing_2023_2024.rds')
 
simple_df %>% count(hems_result)

simple_df %>% count(vehicle)

simple_df1 <- simple_df %>%
  mutate(
    helicopter_benefit = case_when(
      cc_benefit == 'y' ~ 'y',
      ec_benefit == 'y' ~ 'y',
      hems_result %in% c('Stand Down En Route', 'Landed but no patient contact', 'Stand Down Before Mobile') ~ 'n',
      .default = helicopter_benefit
    ),
    care_cat = case_when(
      cc_benefit == 'y' ~ 'CC',
      ec_benefit == 'y' ~ 'EC',
      .default = 'REG'
    ) 
  )

simple_df1 %>% glimpse()




simple_df1 %>%
  filter(care_cat == 'REG') %>%
  mutate(
    qtr = lubridate::quarter(inc_date)
  ) %>%
  count(callsign_group, vehicle_type, hems_result, qtr) %>%
  ggplot(aes(x = callsign_group, y = n, fill = vehicle_type)) +
  geom_col(position = "dodge") +
  facet_grid(rows = vars(hems_result), cols = vars(qtr), scale = "free_y")
****************************************

****************************************
R-wrangling\1.ad-hoc-unavailability-wrangle.r
****************************************
# Ad hoc unavailability

library(tidyverse)
library(readxl)
library(lubridate)

df <- read_xlsx('adhoc-unavailability.xlsx', sheet = 'AUG22-JUL24 Instances')


df1 <- df %>%
  transmute(
    aircraft = Aircraft, 
    offline = `Date time offline`,
    online = `Date time online`,
    total_offline = as.numeric(difftime(online, offline, units = "mins")),
    reason = case_when(
      tolower(Reason) %in% c("clinical crew returning on ccc", "clinician absence", "drug/alcohol testing", "pilot training", "pilot absence", "pilot duty hours issue") ~ "crew",
      tolower(Reason) == 'weather' ~ 'weather',
      tolower(Reason) %in% c("aircraft mechanical fault", "maintenance on base", "aircraft not night capable") ~ "aircraft",
      .default = "other"
    ),
    qtr = quarter(offline),
    year = year(offline),
    hour = hour(offline),
    six_hour_bin = cut(hour,
                   breaks = c(-1, 5, 11, 17, 23),
                   labels = c("00-05", "06-11", "12-17", "18-23"))
  ) %>% filter(reason != "other") # only 7 cases


df1 %>%
  group_by(qtr, reason, aircraft, year) %>%
  summarise(
    total_time = sum(total_offline)
  ) %>% #write_csv('split-by-qtr-reason')
  ungroup() %>%
  ggplot(aes(x = qtr, y=total_time, fill = reason )) +
  geom_col() +
  facet_grid(rows = vars(aircraft), cols = vars(year))


df1 %>%
  #filter(between(offline, ymd('2023-01-01'), ymd('2023-12-31'))) %>%
  group_by(hour, reason, aircraft, qtr) %>%
  summarise(
    n = n(),
    total_time = sum(total_offline)
  ) %>% #write_csv('split-by-hour.csv')
  ungroup() %>% 
  ggplot(aes(x = hour, y = total_time, fill=reason)) +
  geom_col() +
  facet_grid(rows = vars(aircraft), cols = vars(qtr))



df1 %>%
  #filter(between(offline, ymd('2023-01-01'), ymd('2023-12-31'))) %>%
  group_by(six_hour_bin, reason, aircraft, qtr) %>%
  summarise(
    n = n(),
    total_time = sum(total_offline)
  ) %>% #write_csv('split-by-hour.csv')
  ungroup() %>% 
  ggplot(aes(x = six_hour_bin, y = total_time, fill=reason)) +
  geom_col() +
  facet_grid(rows = vars(aircraft), cols = vars(qtr))
****************************************

****************************************
reference\README.md
****************************************
This folder contains diagrams describing the model.

## daa_des_model_logic

This diagram is designed to describe how the model makes 'decisions', and what historical data it is basing these decisions on.

## daa_des_model_structure

This diagram is more focussed on the underlying class structure.

> [!WARNING]
> This diagram is likely to go out of date as the code is changed, and should not be used as a source of truth for the structure and functioning of the code.
> It is primarily intended as a starting point to aid with the creation of other diagrams.
****************************************

****************************************
scenarios\README.md
****************************************
This folder contains the relevant input files for all scenarios that have been reported on, allowing easy replication of reported results.
****************************************

****************************************
tests\conftest.py
****************************************
import pandas as pd
from datetime import datetime
import gc
import os
import pytest

# Workaround to deal with relative import issues
# https://discuss.streamlit.io/t/importing-modules-in-pages/26853/2
from pathlib import Path
import sys

sys.path.append(str(Path(__file__).resolve().parent.parent))

from des_parallel_process import (
    parallelProcessJoblib,
    collateRunResults,
    runSim,
    removeExistingResults,
)
from helpers import save_logs

##############################################################################
# Fixture - single run for tests where input parameters aren't being changed #
##############################################################################
RESULTS_CSV_PATH = "data/run_results.csv"
RESULTS_CSV_PATH_OUT = "tests/run_results_fixture.csv"

SERVICE_DATES_CSV_PATH = "data/service_dates.csv"
SERVICE_DATES_CSV_PATH_OUT = "tests/service_dates_fixture.csv"


@pytest.fixture(scope="session")
def simulation_results():
    """Run the simulation only if needed and return the event dataframe."""
    if not os.path.exists(RESULTS_CSV_PATH) or not os.path.exists(RESULTS_CSV_PATH_OUT):
        # Ensure all rotas are using default values
        rota = pd.read_csv("tests/rotas_historic/HISTORIC_HEMS_ROTA.csv")
        rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        callsign_reg_lookup = pd.read_csv(
            "tests/rotas_historic/HISTORIC_callsign_registration_lookup.csv"
        )
        callsign_reg_lookup.to_csv(
            "actual_data/callsign_registration_lookup.csv", index=False
        )

        service_history = pd.read_csv(
            "tests/rotas_historic/HISTORIC_service_history.csv"
        )
        service_history.to_csv("actual_data/service_history.csv", index=False)

        service_sched = pd.read_csv(
            "tests/rotas_historic/HISTORIC_service_schedules_by_model.csv"
        )
        service_sched.to_csv("actual_data/service_schedules_by_model.csv", index=False)

        print("Generating simulation results...")
        removeExistingResults()

        parallelProcessJoblib(
            total_runs=10,
            sim_duration=60 * 24 * 7 * 52 * 4,  # 4 years
            warm_up_time=0,
            sim_start_date=datetime.strptime(
                "2023-01-01 05:00:00", "%Y-%m-%d %H:%M:%S"
            ),
            amb_data=False,
            print_debug_messages=True,
        )

        collateRunResults()

        save_logs("fixture_simulation_results_default_settings_default_rotas.txt")

        df = pd.read_csv(RESULTS_CSV_PATH)
        df.to_csv(RESULTS_CSV_PATH_OUT)

        df = pd.read_csv(SERVICE_DATES_CSV_PATH)
        df.to_csv(SERVICE_DATES_CSV_PATH_OUT)
    else:
        print("Using cached simulation results...")

    df = pd.read_csv(RESULTS_CSV_PATH_OUT)
    yield df

    del df
    gc.collect()


@pytest.fixture(scope="session", autouse=True)
def cleanup_simulation_results():
    """Automatically remove results CSV after all tests are done."""
    yield  # Wait until all tests using this session scope are finished

    # Remove generated csvs to avoid accidental usage
    for filepath in [
        RESULTS_CSV_PATH,
        RESULTS_CSV_PATH_OUT,
        SERVICE_DATES_CSV_PATH,
        SERVICE_DATES_CSV_PATH_OUT,
    ]:
        if os.path.exists(filepath):
            try:
                os.remove(filepath)
                print(f"Removed cached simulation results: {filepath}")
            except Exception as e:
                print(f"Warning: Failed to remove {filepath} — {e}")

    # Revert all rotas to defaults
    rota = pd.read_csv("actual_data/HEMS_ROTA_DEFAULT.csv")
    rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

    callsign_reg_lookup = pd.read_csv(
        "actual_data/callsign_registration_lookup_DEFAULT.csv"
    )
    callsign_reg_lookup.to_csv(
        "actual_data/callsign_registration_lookup.csv", index=False
    )

    service_history = pd.read_csv(
        "actual_data/callsign_registration_lookup_DEFAULT.csv"
    )
    service_history.to_csv("actual_data/callsign_registration_lookup.csv", index=False)

    service_sched = pd.read_csv("actual_data/service_schedules_by_model_DEFAULT.csv")
    service_sched.to_csv("actual_data/service_schedules_by_model.csv", index=False)
****************************************

****************************************
tests\helpers.py
****************************************
import textwrap
import warnings
import pytest
import numpy as np
from scipy.stats import chi2_contingency, chi2
import shutil
import os


def fail_with_message(message: str):
    """Cleanly formatted pytest failure message."""
    pytest.fail(textwrap.dedent(message))


def warn_with_message(message: str):
    """Cleanly formatted warning message."""
    warnings.warn(textwrap.dedent(message), UserWarning)


def format_sigfigs(x, sigfigs=4):
    if x == 0:
        return "0"
    else:
        from math import log10, floor

        digits = sigfigs - 1 - floor(log10(abs(x)))
        return f"{x:.{digits}f}"


def calculate_chi_squared_and_cramers(df, what, alpha=0.05):
    """
    Expects a dataframe with three columns:
    - identifier : any name
    - counts (simulated) : name must be 'count_simulated'
    - counts (historic): name must be 'count_historic'

    what = what is being tested? e.g. callsign, callsign group


    """

    # Create a table of proportions (separate from the original count table)
    df["prop_simulated"] = df["count_simulated"] / df["count_simulated"].sum()
    df["prop_historic"] = df["count_historic"] / df["count_historic"].sum()
    df["abs_diff"] = (df["prop_simulated"] - df["prop_historic"]).abs()

    df.round(5).to_csv(f"tests/test_outputs/TEST_OUTPUT_{what}_proportions.csv")

    # Create the contingency table (observed frequencies)
    # Rows: Callsigns, Columns: Data Source (Simulated, Historic)
    contingency_table = df[["count_simulated", "count_historic"]].values

    # Perform the Chi-Squared Test of Homogeneity
    chi2_stat, p_val, dof, expected_freq = chi2_contingency(contingency_table)

    # Interpretation
    alpha = alpha  # Significance level

    if p_val < alpha:
        print(f"Result: Reject the null hypothesis (H₀) for {what}.")
        print(
            "Conclusion: There is a statistically significant difference in the distribution of callsigns between the simulated and historic data."
        )
    else:
        print(f"Result: Fail to reject the null hypothesis (H₀) for {what}.")
        print(
            "Conclusion: There is no statistically significant difference in the distribution of callsigns between the simulated and historic data."
        )

    # --- Calculate Effect Size (Cramér's V) ---
    n = np.sum(contingency_table)  # Total number of observations
    min_dim = min(contingency_table.shape) - 1  # min(rows-1, cols-1)

    # Handle potential division by zero if min_dim is 0 (though unlikely here)
    if min_dim == 0:
        cramers_v = np.nan
        fail_with_message(
            "Cannot calculate Cramér's V because min(rows-1, cols-1) is 0."
        )
    else:
        cramers_v = np.sqrt(chi2_stat / (n * min_dim))
        print(f"Total Observations (n): {n}")
        print(f"Cramér's V (Effect Size): {cramers_v:.4f}")

        # Interpretation of Cramér's V
        if p_val > alpha:
            if cramers_v > 0.4:
                warn_with_message(
                    f"Some difference observed in {what} proportions, though not statistically significant. "
                    f"p_val: {p_val:.4f}, cramers_v: {cramers_v:.4f}\n\n{df}"
                )
            # else: no action (i.e. p > alpha and low V)
        elif cramers_v < 0.2:
            warn_with_message(
                f"Some difference observed in {what} proportions - be aware. "
                f"p_val: {p_val:.4f}, cramers_v: {cramers_v:.4f}\n\n{df}"
            )
        elif cramers_v < 0.3:
            warn_with_message(
                f"Moderate difference observed in {what} proportions - investigation recommended. "
                f"p_val: {p_val:.4f}, cramers_v: {cramers_v:.4f}\n\n{df}"
            )
        else:
            fail_with_message(
                f"Major difference observed in {what} proportions. "
                f"p_val: {p_val:.4f}, cramers_v: {cramers_v:.4f}\n\n{df}"
            )

    max_diff = df["abs_diff"].max()

    # Additionally assert that no single category differs too much
    if max_diff > 0.1:
        fail_with_message(
            f"{what}: One category differs in proportion by more than 10% (found {max_diff:.4f}).\n\n{df}"
        )
    elif max_diff >= 0.05:
        warn_with_message(
            f"{what}: One category differs in proportion by more than 5% (found {max_diff:.4f}).\n\n{df}"
        )
    else:
        pass


def save_logs(output_path, log_location="log.txt", output_folder="tests/test_logs/"):
    full_output_path = f"{output_folder}/LOG_{output_path}"

    if os.path.exists(full_output_path):
        try:
            os.remove(full_output_path)
            print(f"Removed previous log: {full_output_path}")
        except Exception as e:
            print(f"Warning: Failed to remove {full_output_path} — {e}")

    shutil.copyfile(log_location, full_output_path)
****************************************

****************************************
tests\test_against_condition_changes.py
****************************************
"""
Testing for the Devon Air Ambulance Discrete Event Simulation (DES) Model.

These check that the results generated by the model when parameters are changed from reality
follow logical rules.

Planned tests are listed below with a [].
Implemented tests are listed below with a [x].

## Additional Helicopters

[x] Adding an additional helicopter results in more calls being answered
[x] Removing a helicopter results in fewer calls being answered

## Additional cars

[x] Adding an additional car results in more calls being answered
[x] Removing a car results in fewer calls being answered

## Adjusting operating hours

[x] Extending operating hours results in more calls being answered
[x] Decreasing operating hours results in fewer calls being answered

## Vehicle Models

[] Changing helicopter type results in different unavailability results being generated

## Expected responses of metrics under different conditions

[] Utilisation is higher when resource is reduced but demand kept consistent
[] 'Missed' calls are higher when resource is reduced but demand kept consistent

[] Utilisation is lower when resource is reduced but demand decreases
[] 'Missed' calls are lower when resource is reduced but demand decreases

[] Utilisation is higher when resource is kept consistent but demand increases
[] 'Missed' calls are higher when resource is kept consistent but demand increases

[] Utilisation is lower when resource is kept consistent but demand decreases
[] 'Missed' calls are lower when resource is kept consistent but demand decreases

"""

import pandas as pd
import pytest
from datetime import datetime
import os
import gc

# Workaround to deal with relative import issues
# https://discuss.streamlit.io/t/importing-modules-in-pages/26853/2
from pathlib import Path
import sys

sys.path.append(str(Path(__file__).resolve().parent.parent))

from des_parallel_process import (
    parallelProcessJoblib,
    collateRunResults,
    runSim,
    removeExistingResults,
)
from helpers import save_logs


@pytest.mark.performance
def test_reducing_helo_resource():
    TOTAL_RUNS = 10
    SIM_DURATION = 60 * 24 * 7 * 52 * 1  # 1 year(s)
    WARM_UP_TIME = 0
    SIM_START_DATE = datetime.strptime("2023-01-01 05:00:00", "%Y-%m-%d %H:%M:%S")
    AMB_DATA = False

    try:
        removeExistingResults(remove_run_results_csv=True)

        rota = pd.read_csv("tests/rotas_test/HEMS_ROTA_test.csv")

        rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        # Run the simulation with only a warm-up period and no actual simulation time
        parallelProcessJoblib(
            total_runs=TOTAL_RUNS,
            sim_duration=SIM_DURATION,
            warm_up_time=WARM_UP_TIME,
            sim_start_date=SIM_START_DATE,
            amb_data=AMB_DATA,
            master_seed=42,
            print_debug_messages=True,
        )

        collateRunResults()

        save_logs("test_reducing_helo_resource_results_base_case.txt")

        results_df_1 = pd.read_csv("data/run_results.csv")
        hems_unavailable_df_1 = (
            results_df_1[
                (results_df_1["event_type"] == "resource_preferred_outcome")
                & (results_df_1["time_type"].str.contains("No HEMS"))
            ]
            .drop_duplicates(subset=["P_ID", "run_number"])
            .groupby("run_number")[["P_ID"]]
            .count()
            .reset_index()
            .rename(columns={"P_ID": "hems_unavailable_2_helos"})
        )

        removeExistingResults(remove_run_results_csv=True)

        rota = pd.read_csv("tests/rotas_test/HEMS_ROTA_test_one_helicopter_simple.csv")

        rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        parallelProcessJoblib(
            total_runs=TOTAL_RUNS,
            sim_duration=SIM_DURATION,
            warm_up_time=WARM_UP_TIME,
            sim_start_date=SIM_START_DATE,
            amb_data=AMB_DATA,
            master_seed=42,
            print_debug_messages=True,
        )

        collateRunResults()

        results_df_2 = pd.read_csv("data/run_results.csv")

        save_logs("test_reducing_helo_resource_results_one_helicopter.txt")

        hems_unavailable_df_2 = (
            results_df_2[
                (results_df_2["event_type"] == "resource_preferred_outcome")
                & (results_df_2["time_type"].str.contains("No HEMS"))
            ]
            .drop_duplicates(subset=["P_ID", "run_number"])
            .groupby("run_number")[["P_ID"]]
            .count()
            .reset_index()
            .rename(columns={"P_ID": "hems_unavailable_1_helo"})
        )

        removeExistingResults(remove_run_results_csv=True)

        hems_unavailable = pd.merge(
            left=hems_unavailable_df_1, right=hems_unavailable_df_2
        )

        hems_unavailable["expected_result"] = (
            hems_unavailable["hems_unavailable_1_helo"]
            > hems_unavailable["hems_unavailable_2_helos"]
        )

        print(hems_unavailable)
        hems_unavailable.to_csv(
            "tests/test_outputs/TEST_OUTPUT_hems_unavailable_reducing_helo_resource.csv"
        )
        assert sum(hems_unavailable["expected_result"]) == TOTAL_RUNS, (
            "[FAIL - RESOURCE CHANGES] Removing a helicopter does not reliably reduce the number of calls responded to"
        )

    finally:
        default_rota = pd.read_csv("actual_data/HEMS_ROTA_DEFAULT.csv")
        default_rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)
        del (
            results_df_1,
            results_df_2,
            hems_unavailable_df_1,
            hems_unavailable_df_2,
            hems_unavailable,
        )
        gc.collect()


@pytest.mark.performance
def test_no_solo_car():
    TOTAL_RUNS = 10
    SIM_DURATION = 60 * 24 * 7 * 52 * 1  # 1 year(s)
    WARM_UP_TIME = 0
    SIM_START_DATE = datetime.strptime("2023-01-01 05:00:00", "%Y-%m-%d %H:%M:%S")
    AMB_DATA = False

    try:
        removeExistingResults(remove_run_results_csv=True)

        rota = pd.read_csv("tests/rotas_test/HEMS_ROTA_test.csv")

        rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        # Run the simulation with only a warm-up period and no actual simulation time
        parallelProcessJoblib(
            total_runs=TOTAL_RUNS,
            sim_duration=SIM_DURATION,
            warm_up_time=WARM_UP_TIME,
            sim_start_date=SIM_START_DATE,
            amb_data=AMB_DATA,
            master_seed=42,
            print_debug_messages=True,
        )

        collateRunResults()

        save_logs("test_no_solo_car_base_case.txt")

        results_df_1 = pd.read_csv("data/run_results.csv")
        hems_unavailable_df_1 = (
            results_df_1[
                (results_df_1["event_type"] == "resource_preferred_outcome")
                & (results_df_1["time_type"].str.contains("No HEMS"))
            ]
            .drop_duplicates(subset=["P_ID", "run_number"])
            .groupby("run_number")[["P_ID"]]
            .count()
            .reset_index()
            .rename(columns={"P_ID": "hems_unavailable_solo_car"})
        )

        removeExistingResults(remove_run_results_csv=True)

        rota = pd.read_csv(
            "tests/rotas_test/HEMS_ROTA_test_two_helicopters_no_solo_car.csv"
        )

        rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        parallelProcessJoblib(
            total_runs=TOTAL_RUNS,
            sim_duration=SIM_DURATION,
            warm_up_time=WARM_UP_TIME,
            sim_start_date=SIM_START_DATE,
            amb_data=AMB_DATA,
            master_seed=42,
            print_debug_messages=True,
        )

        collateRunResults()

        results_df_2 = pd.read_csv("data/run_results.csv")

        save_logs("test_no_solo_car_no_solo_car.txt")

        hems_unavailable_df_2 = (
            results_df_2[
                (results_df_2["event_type"] == "resource_preferred_outcome")
                & (results_df_2["time_type"].str.contains("No HEMS"))
            ]
            .drop_duplicates(subset=["P_ID", "run_number"])
            .groupby("run_number")[["P_ID"]]
            .count()
            .reset_index()
            .rename(columns={"P_ID": "hems_unavailable_no_solo_car"})
        )

        removeExistingResults(remove_run_results_csv=True)

        hems_unavailable = pd.merge(
            left=hems_unavailable_df_1, right=hems_unavailable_df_2
        )

        hems_unavailable["expected_result"] = (
            hems_unavailable["hems_unavailable_no_solo_car"]
            > hems_unavailable["hems_unavailable_solo_car"]
        )

        print(hems_unavailable)
        hems_unavailable.to_csv(
            "tests/test_outputs/TEST_OUTPUT_hems_unavailable_no_solo_car.csv"
        )
        assert sum(hems_unavailable["expected_result"]) == TOTAL_RUNS, (
            "[FAIL - RESOURCE CHANGES] Removing the solo car does not reliably reduce the number of calls responded to"
        )

    finally:
        default_rota = pd.read_csv("actual_data/HEMS_ROTA_DEFAULT.csv")
        default_rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)
        del (
            results_df_1,
            results_df_2,
            hems_unavailable_df_1,
            hems_unavailable_df_2,
            hems_unavailable,
        )
        gc.collect()


@pytest.mark.performance
def test_shorter_operating_hours():
    TOTAL_RUNS = 10
    SIM_DURATION = 60 * 24 * 7 * 52 * 1  # 1 year(s)
    WARM_UP_TIME = 0
    SIM_START_DATE = datetime.strptime("2023-01-01 05:00:00", "%Y-%m-%d %H:%M:%S")
    AMB_DATA = False

    try:
        removeExistingResults(remove_run_results_csv=True)

        rota = pd.read_csv("tests/rotas_test/HEMS_ROTA_test_two_helicopters_simple.csv")

        rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        # Run the simulation with only a warm-up period and no actual simulation time
        parallelProcessJoblib(
            total_runs=TOTAL_RUNS,
            sim_duration=SIM_DURATION,
            warm_up_time=WARM_UP_TIME,
            sim_start_date=SIM_START_DATE,
            amb_data=AMB_DATA,
            master_seed=42,
            print_debug_messages=True,
        )

        collateRunResults()

        save_logs("test_shorter_operating_hours_base_case.txt")

        results_df_1 = pd.read_csv("data/run_results.csv")
        hems_unavailable_df_1 = (
            results_df_1[
                (results_df_1["event_type"] == "resource_preferred_outcome")
                & (results_df_1["time_type"].str.contains("No HEMS"))
            ]
            .drop_duplicates(subset=["P_ID", "run_number"])
            .groupby("run_number")[["P_ID"]]
            .count()
            .reset_index()
            .rename(columns={"P_ID": "hems_unavailable_standard_hours"})
        )

        removeExistingResults(remove_run_results_csv=True)

        rota = pd.read_csv(
            "tests/rotas_test/HEMS_ROTA_test_reduced_operating_hours.csv"
        )

        rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        parallelProcessJoblib(
            total_runs=TOTAL_RUNS,
            sim_duration=SIM_DURATION,
            warm_up_time=WARM_UP_TIME,
            sim_start_date=SIM_START_DATE,
            amb_data=AMB_DATA,
            master_seed=42,
            print_debug_messages=True,
        )

        collateRunResults()

        save_logs("test_shorter_operating_hours_shorter_operating_hours.txt")

        results_df_2 = pd.read_csv("data/run_results.csv")

        hems_unavailable_df_2 = (
            results_df_2[
                (results_df_2["event_type"] == "resource_preferred_outcome")
                & (results_df_2["time_type"].str.contains("No HEMS"))
            ]
            .drop_duplicates(subset=["P_ID", "run_number"])
            .groupby("run_number")[["P_ID"]]
            .count()
            .reset_index()
            .rename(columns={"P_ID": "hems_unavailable_reduced_operating_hours"})
        )

        removeExistingResults(remove_run_results_csv=True)

        hems_unavailable = pd.merge(
            left=hems_unavailable_df_1, right=hems_unavailable_df_2
        )

        hems_unavailable["expected_result"] = (
            hems_unavailable["hems_unavailable_reduced_operating_hours"]
            > hems_unavailable["hems_unavailable_standard_hours"]
        )

        print(hems_unavailable)
        hems_unavailable.to_csv(
            "tests/test_outputs/TEST_OUTPUT_hems_unavailable_shorter_operating_hours.csv"
        )
        assert sum(hems_unavailable["expected_result"]) == TOTAL_RUNS, (
            "[FAIL - RESOURCE CHANGES] Reducing the operating hours of the helicopters does not reliably reduce the number of calls responded to"
        )

    finally:
        default_rota = pd.read_csv("actual_data/HEMS_ROTA_DEFAULT.csv")
        default_rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)
        del (
            results_df_1,
            results_df_2,
            hems_unavailable_df_1,
            hems_unavailable_df_2,
            hems_unavailable,
        )
        gc.collect()


@pytest.mark.performance
def test_longer_operating_hours():
    TOTAL_RUNS = 10
    SIM_DURATION = 60 * 24 * 7 * 52 * 1  # 1 year(s)
    WARM_UP_TIME = 0
    SIM_START_DATE = datetime.strptime("2023-01-01 05:00:00", "%Y-%m-%d %H:%M:%S")
    AMB_DATA = False

    try:
        removeExistingResults(remove_run_results_csv=True)

        rota = pd.read_csv("tests/rotas_test/HEMS_ROTA_test_two_helicopters_simple.csv")

        rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        # Run the simulation with only a warm-up period and no actual simulation time
        parallelProcessJoblib(
            total_runs=TOTAL_RUNS,
            sim_duration=SIM_DURATION,
            warm_up_time=WARM_UP_TIME,
            sim_start_date=SIM_START_DATE,
            amb_data=AMB_DATA,
            master_seed=42,
            print_debug_messages=True,
        )

        collateRunResults()

        save_logs("test_longer_operating_hours_base_case.txt")

        results_df_1 = pd.read_csv("data/run_results.csv")
        hems_unavailable_df_1 = (
            results_df_1[
                (results_df_1["event_type"] == "resource_preferred_outcome")
                & (results_df_1["time_type"].str.contains("No HEMS"))
            ]
            .drop_duplicates(subset=["P_ID", "run_number"])
            .groupby("run_number")[["P_ID"]]
            .count()
            .reset_index()
            .rename(columns={"P_ID": "hems_unavailable_standard_hours"})
        )

        removeExistingResults(remove_run_results_csv=True)

        rota = pd.read_csv(
            "tests/rotas_test/HEMS_ROTA_test_two_helicopters_extended_operating_hours.csv"
        )

        rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        parallelProcessJoblib(
            total_runs=TOTAL_RUNS,
            sim_duration=SIM_DURATION,
            warm_up_time=WARM_UP_TIME,
            sim_start_date=SIM_START_DATE,
            amb_data=AMB_DATA,
            master_seed=42,
            print_debug_messages=True,
        )

        collateRunResults()

        save_logs("test_longer_operating_hours_longer_operating_hours.txt")

        results_df_2 = pd.read_csv("data/run_results.csv")

        hems_unavailable_df_2 = (
            results_df_2[
                (results_df_2["event_type"] == "resource_preferred_outcome")
                & (results_df_2["time_type"].str.contains("No HEMS"))
            ]
            .drop_duplicates(subset=["P_ID", "run_number"])
            .groupby("run_number")[["P_ID"]]
            .count()
            .reset_index()
            .rename(columns={"P_ID": "hems_unavailable_extended_operating_hours"})
        )

        removeExistingResults(remove_run_results_csv=True)

        hems_unavailable = pd.merge(
            left=hems_unavailable_df_1, right=hems_unavailable_df_2
        )

        hems_unavailable["expected_result"] = (
            hems_unavailable["hems_unavailable_extended_operating_hours"]
            < hems_unavailable["hems_unavailable_standard_hours"]
        )

        print(hems_unavailable)
        hems_unavailable.to_csv(
            "tests/test_outputs/TEST_OUTPUT_hems_unavailable_longer_operating_hours.csv"
        )
        assert sum(hems_unavailable["expected_result"]) == TOTAL_RUNS, (
            "[FAIL - RESOURCE CHANGES] Increasing the operating hours of the helicopters does not reliably increase the number of calls responded to"
        )

    finally:
        default_rota = pd.read_csv("actual_data/HEMS_ROTA_DEFAULT.csv")
        default_rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)
        del (
            results_df_1,
            results_df_2,
            hems_unavailable_df_1,
            hems_unavailable_df_2,
            hems_unavailable,
        )
        gc.collect()


@pytest.mark.performance
def test_extra_solo_car():
    TOTAL_RUNS = 10
    SIM_DURATION = 60 * 24 * 7 * 52 * 1  # 1 year(s)
    WARM_UP_TIME = 0
    SIM_START_DATE = datetime.strptime("2023-01-01 05:00:00", "%Y-%m-%d %H:%M:%S")
    AMB_DATA = False

    try:
        removeExistingResults(remove_run_results_csv=True)

        rota = pd.read_csv("tests/rotas_test/HEMS_ROTA_test_one_helicopter_simple.csv")

        rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        # Run the simulation with only a warm-up period and no actual simulation time
        parallelProcessJoblib(
            total_runs=TOTAL_RUNS,
            sim_duration=SIM_DURATION,
            warm_up_time=WARM_UP_TIME,
            sim_start_date=SIM_START_DATE,
            amb_data=AMB_DATA,
            master_seed=42,
            print_debug_messages=True,
        )

        collateRunResults()

        save_logs("test_extra_solo_car_base_case.txt")

        results_df_1 = pd.read_csv("data/run_results.csv")
        hems_unavailable_df_1 = (
            results_df_1[
                (results_df_1["event_type"] == "resource_preferred_outcome")
                & (results_df_1["time_type"].str.contains("No HEMS"))
            ]
            .drop_duplicates(subset=["P_ID", "run_number"])
            .groupby("run_number")[["P_ID"]]
            .count()
            .reset_index()
            .rename(columns={"P_ID": "hems_unavailable_one_solo_car"})
        )

        removeExistingResults(remove_run_results_csv=True)

        # We need to change more of the files here to reflect the extra car

        rota = pd.read_csv(
            "tests/rotas_test/HEMS_ROTA_test_one_helicopter_two_solo_cars.csv"
        )

        rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        service_history = pd.read_csv(
            "tests/rotas_test/service_history_test_extra_solo_car.csv"
        )

        service_history.to_csv("actual_data/service_history.csv", index=False)

        callsign_registration_lookup = pd.read_csv(
            "tests/rotas_test/callsign_registration_lookup_extra_solo_car.csv"
        )

        callsign_registration_lookup.to_csv(
            "actual_data/callsign_registration_lookup.csv", index=False
        )

        parallelProcessJoblib(
            total_runs=TOTAL_RUNS,
            sim_duration=SIM_DURATION,
            warm_up_time=WARM_UP_TIME,
            sim_start_date=SIM_START_DATE,
            amb_data=AMB_DATA,
            master_seed=42,
            print_debug_messages=True,
        )

        collateRunResults()

        save_logs("test_extra_solo_car_extra_solo_car.txt")

        results_df_2 = pd.read_csv("data/run_results.csv")

        hems_unavailable_df_2 = (
            results_df_2[
                (results_df_2["event_type"] == "resource_preferred_outcome")
                & (results_df_2["time_type"].str.contains("No HEMS"))
            ]
            .drop_duplicates(subset=["P_ID", "run_number"])
            .groupby("run_number")[["P_ID"]]
            .count()
            .reset_index()
            .rename(columns={"P_ID": "hems_unavailable_two_solo_cars"})
        )

        removeExistingResults(remove_run_results_csv=True)

        hems_unavailable = pd.merge(
            left=hems_unavailable_df_1, right=hems_unavailable_df_2
        )

        hems_unavailable["expected_result"] = (
            hems_unavailable["hems_unavailable_one_solo_car"]
            > hems_unavailable["hems_unavailable_two_solo_cars"]
        )

        print(hems_unavailable)
        hems_unavailable.to_csv(
            "tests/test_outputs/TEST_OUTPUT_hems_unavailable_extra_solo_car.csv"
        )
        assert sum(hems_unavailable["expected_result"]) == TOTAL_RUNS, (
            "[FAIL - RESOURCE CHANGES] Adding an extra solo car does not reliably increase the number of calls responded to"
        )

    finally:
        default_rota = pd.read_csv("actual_data/HEMS_ROTA_DEFAULT.csv")
        default_rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        default_service_history = pd.read_csv("actual_data/service_history_DEFAULT.csv")
        default_service_history.to_csv("actual_data/service_history.csv", index=False)

        #   default_service_schedules = pd.read_csv("actual_data/service_schedules_by_model_DEFAULT.csv")
        #   default_service_schedules.to_csv("actual_data/service_schedules_by_model.csv", index=False)

        default_callsign_registration_lookup = pd.read_csv(
            "actual_data/callsign_registration_lookup_DEFAULT.csv"
        )
        default_callsign_registration_lookup.to_csv(
            "actual_data/callsign_registration_lookup.csv", index=False
        )

        del (
            results_df_1,
            results_df_2,
            hems_unavailable_df_1,
            hems_unavailable_df_2,
            hems_unavailable,
        )
        gc.collect()


@pytest.mark.performance
def test_extra_helo():
    TOTAL_RUNS = 10
    SIM_DURATION = 60 * 24 * 7 * 52 * 1  # 1 year(s)
    WARM_UP_TIME = 0
    SIM_START_DATE = datetime.strptime("2023-01-01 05:00:00", "%Y-%m-%d %H:%M:%S")
    AMB_DATA = False

    try:
        removeExistingResults(remove_run_results_csv=True)

        rota = pd.read_csv(
            "tests/rotas_test/HEMS_ROTA_test_two_helicopters_no_solo_car.csv"
        )

        rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        # Run the simulation with only a warm-up period and no actual simulation time
        parallelProcessJoblib(
            total_runs=TOTAL_RUNS,
            sim_duration=SIM_DURATION,
            warm_up_time=WARM_UP_TIME,
            sim_start_date=SIM_START_DATE,
            amb_data=AMB_DATA,
            master_seed=42,
            print_debug_messages=True,
        )

        collateRunResults()

        save_logs("test_extra_helo_base_case.txt")

        results_df_1 = pd.read_csv("data/run_results.csv")
        hems_unavailable_df_1 = (
            results_df_1[
                (results_df_1["event_type"] == "resource_preferred_outcome")
                & (results_df_1["time_type"].str.contains("No HEMS"))
            ]
            .drop_duplicates(subset=["P_ID", "run_number"])
            .groupby("run_number")[["P_ID"]]
            .count()
            .reset_index()
            .rename(columns={"P_ID": "hems_unavailable_two_helos_no_solo_car"})
        )

        removeExistingResults(remove_run_results_csv=True)

        # We need to change more of the files here to reflect the extra car

        rota = pd.read_csv(
            "tests/rotas_test/HEMS_ROTA_test_three_helicopters_no_solo_car.csv"
        )

        rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        service_history = pd.read_csv(
            "tests/rotas_test/service_history_test_extra_helo.csv"
        )

        service_history.to_csv("actual_data/service_history.csv", index=False)

        callsign_registration_lookup = pd.read_csv(
            "tests/rotas_test/callsign_registration_lookup_test_three_helicopters.csv"
        )

        callsign_registration_lookup.to_csv(
            "actual_data/callsign_registration_lookup.csv", index=False
        )

        parallelProcessJoblib(
            total_runs=TOTAL_RUNS,
            sim_duration=SIM_DURATION,
            warm_up_time=WARM_UP_TIME,
            sim_start_date=SIM_START_DATE,
            amb_data=AMB_DATA,
            master_seed=42,
            print_debug_messages=True,
        )

        collateRunResults()

        save_logs("test_extra_helo_extra_helo.txt")

        results_df_2 = pd.read_csv("data/run_results.csv")

        hems_unavailable_df_2 = (
            results_df_2[
                (results_df_2["event_type"] == "resource_preferred_outcome")
                & (results_df_2["time_type"].str.contains("No HEMS"))
            ]
            .drop_duplicates(subset=["P_ID", "run_number"])
            .groupby("run_number")[["P_ID"]]
            .count()
            .reset_index()
            .rename(columns={"P_ID": "hems_unavailable_three_helos_no_solo_car"})
        )

        removeExistingResults(remove_run_results_csv=True)

        hems_unavailable = pd.merge(
            left=hems_unavailable_df_1, right=hems_unavailable_df_2
        )

        hems_unavailable["expected_result"] = (
            hems_unavailable["hems_unavailable_two_helos_no_solo_car"]
            > hems_unavailable["hems_unavailable_three_helos_no_solo_car"]
        )

        print(hems_unavailable)
        hems_unavailable.to_csv(
            "tests/test_outputs/TEST_OUTPUT_hems_unavailable_extra_helo.csv"
        )
        assert sum(hems_unavailable["expected_result"]) == TOTAL_RUNS, (
            "[FAIL - RESOURCE CHANGES] Adding an extra helicopter does not reliably increase the number of calls responded to"
        )

    finally:
        default_rota = pd.read_csv("actual_data/HEMS_ROTA_DEFAULT.csv")
        default_rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        default_service_history = pd.read_csv("actual_data/service_history_DEFAULT.csv")
        default_service_history.to_csv("actual_data/service_history.csv", index=False)

        #   default_service_schedules = pd.read_csv("actual_data/service_schedules_by_model_DEFAULT.csv")
        #   default_service_schedules.to_csv("actual_data/service_schedules_by_model.csv", index=False)

        default_callsign_registration_lookup = pd.read_csv(
            "actual_data/callsign_registration_lookup_DEFAULT.csv"
        )
        default_callsign_registration_lookup.to_csv(
            "actual_data/callsign_registration_lookup.csv", index=False
        )

        del (
            results_df_1,
            results_df_2,
            hems_unavailable_df_1,
            hems_unavailable_df_2,
            hems_unavailable,
        )
        gc.collect()


@pytest.mark.performance
def test_changed_helo_model():
    TOTAL_RUNS = 5
    SIM_DURATION = (
        60 * 24 * 7 * 52 * 4
    )  # 4 years - longer run due to service intervals being a fairly rare event
    WARM_UP_TIME = 0
    SIM_START_DATE = datetime.strptime("2023-01-01 05:00:00", "%Y-%m-%d %H:%M:%S")
    AMB_DATA = False

    try:
        removeExistingResults(remove_run_results_csv=True)

        rota = pd.read_csv(
            "tests/rotas_test/HEMS_ROTA_test_two_helicopters_simple_no_backup_cars.csv"
        )

        rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        service_schedule_lookup = pd.read_csv(
            "tests/rotas_test/service_schedules_by_model_test_more_distinct.csv"
        )

        service_schedule_lookup.to_csv(
            "actual_data/service_schedules_by_model.csv", index=False
        )

        callsign_registration_lookup = pd.read_csv(
            "tests/rotas_test/callsign_registration_lookup_default_helo_model.csv"
        )

        callsign_registration_lookup.to_csv(
            "actual_data/callsign_registration_lookup.csv", index=False
        )

        # Run the simulation with only a warm-up period and no actual simulation time
        parallelProcessJoblib(
            total_runs=TOTAL_RUNS,
            sim_duration=SIM_DURATION,
            warm_up_time=WARM_UP_TIME,
            sim_start_date=SIM_START_DATE,
            amb_data=AMB_DATA,
            master_seed=42,
            print_debug_messages=True,
        )

        collateRunResults()

        save_logs("test_changed_helo_model_base_case.txt")

        results_df_1 = pd.read_csv("data/run_results.csv")
        hems_unavailable_df_1 = (
            results_df_1[
                (results_df_1["event_type"] == "resource_preferred_outcome")
                & (results_df_1["time_type"].str.contains("No HEMS"))
            ]
            .drop_duplicates(subset=["P_ID", "run_number"])
            .groupby("run_number")[["P_ID"]]
            .count()
            .reset_index()
            .rename(columns={"P_ID": "hems_unavailable_two_helos"})
        )

        removeExistingResults(remove_run_results_csv=True)

        # We need to change more of the files here to reflect the change in model

        rota = pd.read_csv(
            "tests/rotas_test/HEMS_ROTA_test_two_helicopters_simple_no_backup_cars.csv"
        )

        rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        service_schedule_lookup = pd.read_csv(
            "tests/rotas_test/service_schedules_by_model_test_more_distinct.csv"
        )

        service_schedule_lookup.to_csv(
            "actual_data/service_schedules_by_model.csv", index=False
        )

        callsign_registration_lookup = pd.read_csv(
            "tests/rotas_test/callsign_registration_lookup_change_helo_model.csv"
        )

        callsign_registration_lookup.to_csv(
            "actual_data/callsign_registration_lookup.csv", index=False
        )

        parallelProcessJoblib(
            total_runs=TOTAL_RUNS,
            sim_duration=SIM_DURATION,
            warm_up_time=WARM_UP_TIME,
            sim_start_date=SIM_START_DATE,
            amb_data=AMB_DATA,
            master_seed=42,
            print_debug_messages=True,
        )

        collateRunResults()

        save_logs("test_changed_helo_model_changed_helo_model.txt")

        results_df_2 = pd.read_csv("data/run_results.csv")

        hems_unavailable_df_2 = (
            results_df_2[
                (results_df_2["event_type"] == "resource_preferred_outcome")
                & (results_df_2["time_type"].str.contains("No HEMS"))
            ]
            .drop_duplicates(subset=["P_ID", "run_number"])
            .groupby("run_number")[["P_ID"]]
            .count()
            .reset_index()
            .rename(columns={"P_ID": "hems_unavailable_changed_helo_model"})
        )

        removeExistingResults(remove_run_results_csv=True)

        hems_unavailable = pd.merge(
            left=hems_unavailable_df_1, right=hems_unavailable_df_2
        )

        # In this test we've only got two helicopters and they
        # Here, as an EC145 goes for service less frequently and for a shorter period of time, we would anticipate
        hems_unavailable["expected_result"] = (
            hems_unavailable["hems_unavailable_two_helos"]
            > hems_unavailable["hems_unavailable_changed_helo_model"]
        )

        print(hems_unavailable)
        hems_unavailable.to_csv(
            "tests/test_outputs/TEST_OUTPUT_hems_unavailable_changed_helo_model.csv"
        )
        assert sum(hems_unavailable["expected_result"]) == TOTAL_RUNS, (
            "[FAIL - RESOURCE CHANGES] Changing the helicopter models does not have the expected effect"
        )

    finally:
        default_rota = pd.read_csv("actual_data/HEMS_ROTA_DEFAULT.csv")
        default_rota.to_csv("actual_data/HEMS_ROTA.csv", index=False)

        # default_service_history = pd.read_csv("actual_data/service_history_DEFAULT.csv")
        # default_service_history.to_csv("actual_data/service_history.csv", index=False)

        default_service_schedules = pd.read_csv(
            "actual_data/service_schedules_by_model_DEFAULT.csv"
        )
        default_service_schedules.to_csv(
            "actual_data/service_schedules_by_model.csv", index=False
        )

        default_callsign_registration_lookup = pd.read_csv(
            "actual_data/callsign_registration_lookup_DEFAULT.csv"
        )
        default_callsign_registration_lookup.to_csv(
            "actual_data/callsign_registration_lookup.csv", index=False
        )

        del (
            results_df_1,
            results_df_2,
            hems_unavailable_df_1,
            hems_unavailable_df_2,
            hems_unavailable,
        )
        gc.collect()
****************************************
